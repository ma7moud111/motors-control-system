
motor_control_system.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003164  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001a8  00800060  00003164  000031f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800208  00800208  000033a0  2**0
                  ALLOC
  3 .stab         000026b8  00000000  00000000  000033a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e14  00000000  00000000  00005a58  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000686c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  00006a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  00006bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  00009008  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  0000a37f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000b558  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  0000b718  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  0000ba0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c3d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e6       	ldi	r30, 0x64	; 100
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 30       	cpi	r26, 0x08	; 8
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a8 e0       	ldi	r26, 0x08	; 8
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 30       	cpi	r26, 0x09	; 9
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 43 13 	call	0x2686	; 0x2686 <main>
      8a:	0c 94 b0 18 	jmp	0x3160	; 0x3160 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 79 18 	jmp	0x30f2	; 0x30f2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac ee       	ldi	r26, 0xEC	; 236
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 95 18 	jmp	0x312a	; 0x312a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 85 18 	jmp	0x310a	; 0x310a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a1 18 	jmp	0x3142	; 0x3142 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 85 18 	jmp	0x310a	; 0x310a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a1 18 	jmp	0x3142	; 0x3142 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 79 18 	jmp	0x30f2	; 0x30f2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c ee       	ldi	r24, 0xEC	; 236
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 95 18 	jmp	0x312a	; 0x312a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 81 18 	jmp	0x3102	; 0x3102 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6c ee       	ldi	r22, 0xEC	; 236
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 9d 18 	jmp	0x313a	; 0x313a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 85 18 	jmp	0x310a	; 0x310a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 a1 18 	jmp	0x3142	; 0x3142 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 85 18 	jmp	0x310a	; 0x310a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 a1 18 	jmp	0x3142	; 0x3142 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 85 18 	jmp	0x310a	; 0x310a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 a1 18 	jmp	0x3142	; 0x3142 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 82 18 	jmp	0x3104	; 0x3104 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 07 05 	call	0xa0e	; 0xa0e <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 9e 18 	jmp	0x313c	; 0x313c <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 89 18 	jmp	0x3112	; 0x3112 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 a5 18 	jmp	0x314a	; 0x314a <__epilogue_restores__+0x20>

00000a0e <__clzsi2>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	7b 01       	movw	r14, r22
     a18:	8c 01       	movw	r16, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	e8 16       	cp	r14, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	f8 06       	cpc	r15, r24
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	08 07       	cpc	r16, r24
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	18 07       	cpc	r17, r24
     a2a:	88 f4       	brcc	.+34     	; 0xa4e <__clzsi2+0x40>
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	e8 16       	cp	r14, r24
     a30:	f1 04       	cpc	r15, r1
     a32:	01 05       	cpc	r16, r1
     a34:	11 05       	cpc	r17, r1
     a36:	31 f0       	breq	.+12     	; 0xa44 <__clzsi2+0x36>
     a38:	28 f0       	brcs	.+10     	; 0xa44 <__clzsi2+0x36>
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	17 c0       	rjmp	.+46     	; 0xa72 <__clzsi2+0x64>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	12 c0       	rjmp	.+36     	; 0xa72 <__clzsi2+0x64>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	e8 16       	cp	r14, r24
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	f8 06       	cpc	r15, r24
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 07       	cpc	r16, r24
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	18 07       	cpc	r17, r24
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x5c>
     a60:	88 e1       	ldi	r24, 0x18	; 24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__clzsi2+0x64>
     a6a:	80 e1       	ldi	r24, 0x10	; 16
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	20 e2       	ldi	r18, 0x20	; 32
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	28 1b       	sub	r18, r24
     a7c:	39 0b       	sbc	r19, r25
     a7e:	4a 0b       	sbc	r20, r26
     a80:	5b 0b       	sbc	r21, r27
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <__clzsi2+0x7e>
     a84:	16 95       	lsr	r17
     a86:	07 95       	ror	r16
     a88:	f7 94       	ror	r15
     a8a:	e7 94       	ror	r14
     a8c:	8a 95       	dec	r24
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <__clzsi2+0x76>
     a90:	f7 01       	movw	r30, r14
     a92:	ec 50       	subi	r30, 0x0C	; 12
     a94:	ff 4f       	sbci	r31, 0xFF	; 255
     a96:	80 81       	ld	r24, Z
     a98:	28 1b       	sub	r18, r24
     a9a:	31 09       	sbc	r19, r1
     a9c:	41 09       	sbc	r20, r1
     a9e:	51 09       	sbc	r21, r1
     aa0:	c9 01       	movw	r24, r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <__pack_f>:
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	fc 01       	movw	r30, r24
     ab8:	e4 80       	ldd	r14, Z+4	; 0x04
     aba:	f5 80       	ldd	r15, Z+5	; 0x05
     abc:	06 81       	ldd	r16, Z+6	; 0x06
     abe:	17 81       	ldd	r17, Z+7	; 0x07
     ac0:	d1 80       	ldd	r13, Z+1	; 0x01
     ac2:	80 81       	ld	r24, Z
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	48 f4       	brcc	.+18     	; 0xada <__pack_f+0x2e>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a0 e1       	ldi	r26, 0x10	; 16
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	e8 2a       	or	r14, r24
     ad2:	f9 2a       	or	r15, r25
     ad4:	0a 2b       	or	r16, r26
     ad6:	1b 2b       	or	r17, r27
     ad8:	a5 c0       	rjmp	.+330    	; 0xc24 <__pack_f+0x178>
     ada:	84 30       	cpi	r24, 0x04	; 4
     adc:	09 f4       	brne	.+2      	; 0xae0 <__pack_f+0x34>
     ade:	9f c0       	rjmp	.+318    	; 0xc1e <__pack_f+0x172>
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	21 f4       	brne	.+8      	; 0xaec <__pack_f+0x40>
     ae4:	ee 24       	eor	r14, r14
     ae6:	ff 24       	eor	r15, r15
     ae8:	87 01       	movw	r16, r14
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x4a>
     aec:	e1 14       	cp	r14, r1
     aee:	f1 04       	cpc	r15, r1
     af0:	01 05       	cpc	r16, r1
     af2:	11 05       	cpc	r17, r1
     af4:	19 f4       	brne	.+6      	; 0xafc <__pack_f+0x50>
     af6:	e0 e0       	ldi	r30, 0x00	; 0
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	96 c0       	rjmp	.+300    	; 0xc28 <__pack_f+0x17c>
     afc:	62 81       	ldd	r22, Z+2	; 0x02
     afe:	73 81       	ldd	r23, Z+3	; 0x03
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	62 38       	cpi	r22, 0x82	; 130
     b04:	79 07       	cpc	r23, r25
     b06:	0c f0       	brlt	.+2      	; 0xb0a <__pack_f+0x5e>
     b08:	5b c0       	rjmp	.+182    	; 0xbc0 <__pack_f+0x114>
     b0a:	22 e8       	ldi	r18, 0x82	; 130
     b0c:	3f ef       	ldi	r19, 0xFF	; 255
     b0e:	26 1b       	sub	r18, r22
     b10:	37 0b       	sbc	r19, r23
     b12:	2a 31       	cpi	r18, 0x1A	; 26
     b14:	31 05       	cpc	r19, r1
     b16:	2c f0       	brlt	.+10     	; 0xb22 <__pack_f+0x76>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <__pack_f+0xca>
     b22:	b8 01       	movw	r22, r16
     b24:	a7 01       	movw	r20, r14
     b26:	02 2e       	mov	r0, r18
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0x86>
     b2a:	76 95       	lsr	r23
     b2c:	67 95       	ror	r22
     b2e:	57 95       	ror	r21
     b30:	47 95       	ror	r20
     b32:	0a 94       	dec	r0
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__pack_f+0x7e>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__pack_f+0x9c>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	aa 1f       	adc	r26, r26
     b46:	bb 1f       	adc	r27, r27
     b48:	2a 95       	dec	r18
     b4a:	d2 f7       	brpl	.-12     	; 0xb40 <__pack_f+0x94>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	a1 09       	sbc	r26, r1
     b50:	b1 09       	sbc	r27, r1
     b52:	8e 21       	and	r24, r14
     b54:	9f 21       	and	r25, r15
     b56:	a0 23       	and	r26, r16
     b58:	b1 23       	and	r27, r17
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	21 f0       	breq	.+8      	; 0xb6a <__pack_f+0xbe>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	9a 01       	movw	r18, r20
     b6c:	ab 01       	movw	r20, r22
     b6e:	28 2b       	or	r18, r24
     b70:	39 2b       	or	r19, r25
     b72:	4a 2b       	or	r20, r26
     b74:	5b 2b       	or	r21, r27
     b76:	da 01       	movw	r26, r20
     b78:	c9 01       	movw	r24, r18
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	a0 70       	andi	r26, 0x00	; 0
     b80:	b0 70       	andi	r27, 0x00	; 0
     b82:	80 34       	cpi	r24, 0x40	; 64
     b84:	91 05       	cpc	r25, r1
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	39 f4       	brne	.+14     	; 0xb9a <__pack_f+0xee>
     b8c:	27 ff       	sbrs	r18, 7
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <__pack_f+0xf6>
     b90:	20 5c       	subi	r18, 0xC0	; 192
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	4f 4f       	sbci	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__pack_f+0xf6>
     b9a:	21 5c       	subi	r18, 0xC1	; 193
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	4f 4f       	sbci	r20, 0xFF	; 255
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	20 30       	cpi	r18, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	3a 07       	cpc	r19, r26
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	4a 07       	cpc	r20, r26
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	5a 07       	cpc	r21, r26
     bb4:	10 f0       	brcs	.+4      	; 0xbba <__pack_f+0x10e>
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	79 01       	movw	r14, r18
     bbc:	8a 01       	movw	r16, r20
     bbe:	27 c0       	rjmp	.+78     	; 0xc0e <__pack_f+0x162>
     bc0:	60 38       	cpi	r22, 0x80	; 128
     bc2:	71 05       	cpc	r23, r1
     bc4:	64 f5       	brge	.+88     	; 0xc1e <__pack_f+0x172>
     bc6:	fb 01       	movw	r30, r22
     bc8:	e1 58       	subi	r30, 0x81	; 129
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	d8 01       	movw	r26, r16
     bce:	c7 01       	movw	r24, r14
     bd0:	8f 77       	andi	r24, 0x7F	; 127
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	a0 70       	andi	r26, 0x00	; 0
     bd6:	b0 70       	andi	r27, 0x00	; 0
     bd8:	80 34       	cpi	r24, 0x40	; 64
     bda:	91 05       	cpc	r25, r1
     bdc:	a1 05       	cpc	r26, r1
     bde:	b1 05       	cpc	r27, r1
     be0:	39 f4       	brne	.+14     	; 0xbf0 <__pack_f+0x144>
     be2:	e7 fe       	sbrs	r14, 7
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <__pack_f+0x154>
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__pack_f+0x14c>
     bf0:	8f e3       	ldi	r24, 0x3F	; 63
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e8 0e       	add	r14, r24
     bfa:	f9 1e       	adc	r15, r25
     bfc:	0a 1f       	adc	r16, r26
     bfe:	1b 1f       	adc	r17, r27
     c00:	17 ff       	sbrs	r17, 7
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <__pack_f+0x162>
     c04:	16 95       	lsr	r17
     c06:	07 95       	ror	r16
     c08:	f7 94       	ror	r15
     c0a:	e7 94       	ror	r14
     c0c:	31 96       	adiw	r30, 0x01	; 1
     c0e:	87 e0       	ldi	r24, 0x07	; 7
     c10:	16 95       	lsr	r17
     c12:	07 95       	ror	r16
     c14:	f7 94       	ror	r15
     c16:	e7 94       	ror	r14
     c18:	8a 95       	dec	r24
     c1a:	d1 f7       	brne	.-12     	; 0xc10 <__pack_f+0x164>
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <__pack_f+0x17c>
     c1e:	ee 24       	eor	r14, r14
     c20:	ff 24       	eor	r15, r15
     c22:	87 01       	movw	r16, r14
     c24:	ef ef       	ldi	r30, 0xFF	; 255
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	6e 2f       	mov	r22, r30
     c2a:	67 95       	ror	r22
     c2c:	66 27       	eor	r22, r22
     c2e:	67 95       	ror	r22
     c30:	90 2f       	mov	r25, r16
     c32:	9f 77       	andi	r25, 0x7F	; 127
     c34:	d7 94       	ror	r13
     c36:	dd 24       	eor	r13, r13
     c38:	d7 94       	ror	r13
     c3a:	8e 2f       	mov	r24, r30
     c3c:	86 95       	lsr	r24
     c3e:	49 2f       	mov	r20, r25
     c40:	46 2b       	or	r20, r22
     c42:	58 2f       	mov	r21, r24
     c44:	5d 29       	or	r21, r13
     c46:	b7 01       	movw	r22, r14
     c48:	ca 01       	movw	r24, r20
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	08 95       	ret

00000c56 <__unpack_f>:
     c56:	fc 01       	movw	r30, r24
     c58:	db 01       	movw	r26, r22
     c5a:	40 81       	ld	r20, Z
     c5c:	51 81       	ldd	r21, Z+1	; 0x01
     c5e:	22 81       	ldd	r18, Z+2	; 0x02
     c60:	62 2f       	mov	r22, r18
     c62:	6f 77       	andi	r22, 0x7F	; 127
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	22 1f       	adc	r18, r18
     c68:	22 27       	eor	r18, r18
     c6a:	22 1f       	adc	r18, r18
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	89 2f       	mov	r24, r25
     c70:	88 0f       	add	r24, r24
     c72:	82 2b       	or	r24, r18
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	99 1f       	adc	r25, r25
     c7a:	99 27       	eor	r25, r25
     c7c:	99 1f       	adc	r25, r25
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	21 15       	cp	r18, r1
     c86:	31 05       	cpc	r19, r1
     c88:	a9 f5       	brne	.+106    	; 0xcf4 <__unpack_f+0x9e>
     c8a:	41 15       	cp	r20, r1
     c8c:	51 05       	cpc	r21, r1
     c8e:	61 05       	cpc	r22, r1
     c90:	71 05       	cpc	r23, r1
     c92:	11 f4       	brne	.+4      	; 0xc98 <__unpack_f+0x42>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	37 c0       	rjmp	.+110    	; 0xd06 <__unpack_f+0xb0>
     c98:	82 e8       	ldi	r24, 0x82	; 130
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	13 96       	adiw	r26, 0x03	; 3
     c9e:	9c 93       	st	X, r25
     ca0:	8e 93       	st	-X, r24
     ca2:	12 97       	sbiw	r26, 0x02	; 2
     ca4:	9a 01       	movw	r18, r20
     ca6:	ab 01       	movw	r20, r22
     ca8:	67 e0       	ldi	r22, 0x07	; 7
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	44 1f       	adc	r20, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	6a 95       	dec	r22
     cb4:	d1 f7       	brne	.-12     	; 0xcaa <__unpack_f+0x54>
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	8c 93       	st	X, r24
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <__unpack_f+0x80>
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	44 1f       	adc	r20, r20
     cc2:	55 1f       	adc	r21, r21
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	8d 91       	ld	r24, X+
     cc8:	9c 91       	ld	r25, X
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	38 07       	cpc	r19, r24
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	48 07       	cpc	r20, r24
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	58 07       	cpc	r21, r24
     ce4:	58 f3       	brcs	.-42     	; 0xcbc <__unpack_f+0x66>
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	2d 93       	st	X+, r18
     cea:	3d 93       	st	X+, r19
     cec:	4d 93       	st	X+, r20
     cee:	5c 93       	st	X, r21
     cf0:	17 97       	sbiw	r26, 0x07	; 7
     cf2:	08 95       	ret
     cf4:	2f 3f       	cpi	r18, 0xFF	; 255
     cf6:	31 05       	cpc	r19, r1
     cf8:	79 f4       	brne	.+30     	; 0xd18 <__unpack_f+0xc2>
     cfa:	41 15       	cp	r20, r1
     cfc:	51 05       	cpc	r21, r1
     cfe:	61 05       	cpc	r22, r1
     d00:	71 05       	cpc	r23, r1
     d02:	19 f4       	brne	.+6      	; 0xd0a <__unpack_f+0xb4>
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
     d08:	08 95       	ret
     d0a:	64 ff       	sbrs	r22, 4
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <__unpack_f+0xbe>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8c 93       	st	X, r24
     d12:	12 c0       	rjmp	.+36     	; 0xd38 <__unpack_f+0xe2>
     d14:	1c 92       	st	X, r1
     d16:	10 c0       	rjmp	.+32     	; 0xd38 <__unpack_f+0xe2>
     d18:	2f 57       	subi	r18, 0x7F	; 127
     d1a:	30 40       	sbci	r19, 0x00	; 0
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	3c 93       	st	X, r19
     d20:	2e 93       	st	-X, r18
     d22:	12 97       	sbiw	r26, 0x02	; 2
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	8c 93       	st	X, r24
     d28:	87 e0       	ldi	r24, 0x07	; 7
     d2a:	44 0f       	add	r20, r20
     d2c:	55 1f       	adc	r21, r21
     d2e:	66 1f       	adc	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	8a 95       	dec	r24
     d34:	d1 f7       	brne	.-12     	; 0xd2a <__unpack_f+0xd4>
     d36:	70 64       	ori	r23, 0x40	; 64
     d38:	14 96       	adiw	r26, 0x04	; 4
     d3a:	4d 93       	st	X+, r20
     d3c:	5d 93       	st	X+, r21
     d3e:	6d 93       	st	X+, r22
     d40:	7c 93       	st	X, r23
     d42:	17 97       	sbiw	r26, 0x07	; 7
     d44:	08 95       	ret

00000d46 <__fpcmp_parts_f>:
     d46:	1f 93       	push	r17
     d48:	dc 01       	movw	r26, r24
     d4a:	fb 01       	movw	r30, r22
     d4c:	9c 91       	ld	r25, X
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	08 f4       	brcc	.+2      	; 0xd54 <__fpcmp_parts_f+0xe>
     d52:	47 c0       	rjmp	.+142    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d54:	80 81       	ld	r24, Z
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	08 f4       	brcc	.+2      	; 0xd5c <__fpcmp_parts_f+0x16>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d5c:	94 30       	cpi	r25, 0x04	; 4
     d5e:	51 f4       	brne	.+20     	; 0xd74 <__fpcmp_parts_f+0x2e>
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	1c 91       	ld	r17, X
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	99 f5       	brne	.+102    	; 0xdce <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	68 2f       	mov	r22, r24
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	61 1b       	sub	r22, r17
     d70:	71 09       	sbc	r23, r1
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <__fpcmp_parts_f+0xac>
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	21 f0       	breq	.+8      	; 0xd80 <__fpcmp_parts_f+0x3a>
     d78:	92 30       	cpi	r25, 0x02	; 2
     d7a:	31 f4       	brne	.+12     	; 0xd88 <__fpcmp_parts_f+0x42>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	b9 f1       	breq	.+110    	; 0xdee <__fpcmp_parts_f+0xa8>
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	88 23       	and	r24, r24
     d84:	89 f1       	breq	.+98     	; 0xde8 <__fpcmp_parts_f+0xa2>
     d86:	2d c0       	rjmp	.+90     	; 0xde2 <__fpcmp_parts_f+0x9c>
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	1c 91       	ld	r17, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	f1 f0       	breq	.+60     	; 0xdce <__fpcmp_parts_f+0x88>
     d92:	81 81       	ldd	r24, Z+1	; 0x01
     d94:	18 17       	cp	r17, r24
     d96:	d9 f4       	brne	.+54     	; 0xdce <__fpcmp_parts_f+0x88>
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	2d 91       	ld	r18, X+
     d9c:	3c 91       	ld	r19, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	82 17       	cp	r24, r18
     da6:	93 07       	cpc	r25, r19
     da8:	94 f0       	brlt	.+36     	; 0xdce <__fpcmp_parts_f+0x88>
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	bc f0       	brlt	.+46     	; 0xdde <__fpcmp_parts_f+0x98>
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	8d 91       	ld	r24, X+
     db4:	9d 91       	ld	r25, X+
     db6:	0d 90       	ld	r0, X+
     db8:	bc 91       	ld	r27, X
     dba:	a0 2d       	mov	r26, r0
     dbc:	24 81       	ldd	r18, Z+4	; 0x04
     dbe:	35 81       	ldd	r19, Z+5	; 0x05
     dc0:	46 81       	ldd	r20, Z+6	; 0x06
     dc2:	57 81       	ldd	r21, Z+7	; 0x07
     dc4:	28 17       	cp	r18, r24
     dc6:	39 07       	cpc	r19, r25
     dc8:	4a 07       	cpc	r20, r26
     dca:	5b 07       	cpc	r21, r27
     dcc:	18 f4       	brcc	.+6      	; 0xdd4 <__fpcmp_parts_f+0x8e>
     dce:	11 23       	and	r17, r17
     dd0:	41 f0       	breq	.+16     	; 0xde2 <__fpcmp_parts_f+0x9c>
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <__fpcmp_parts_f+0xa2>
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	a4 07       	cpc	r26, r20
     dda:	b5 07       	cpc	r27, r21
     ddc:	40 f4       	brcc	.+16     	; 0xdee <__fpcmp_parts_f+0xa8>
     dde:	11 23       	and	r17, r17
     de0:	19 f0       	breq	.+6      	; 0xde8 <__fpcmp_parts_f+0xa2>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <__fpcmp_parts_f+0xac>
     de8:	6f ef       	ldi	r22, 0xFF	; 255
     dea:	7f ef       	ldi	r23, 0xFF	; 255
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <__fpcmp_parts_f+0xac>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	cb 01       	movw	r24, r22
     df4:	1f 91       	pop	r17
     df6:	08 95       	ret

00000df8 <CLCD_voidSendCommand>:
#include <util/delay.h>

u8 CUR_POS = 0;

void CLCD_voidSendCommand(u8 Copy_u8Command)
{
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
     e00:	2f 97       	sbiw	r28, 0x0f	; 15
     e02:	0f b6       	in	r0, 0x3f	; 63
     e04:	f8 94       	cli
     e06:	de bf       	out	0x3e, r29	; 62
     e08:	0f be       	out	0x3f, r0	; 63
     e0a:	cd bf       	out	0x3d, r28	; 61
     e0c:	8f 87       	std	Y+15, r24	; 0x0f
	/* 1- set RS pin to low for command */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_u8PIN_LOW);
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	60 e0       	ldi	r22, 0x00	; 0
     e12:	40 e0       	ldi	r20, 0x00	; 0
     e14:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_u8SetPinValue>

	/* 2- set RW pin to low for write */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_u8PIN_LOW);
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	61 e0       	ldi	r22, 0x01	; 1
     e1c:	40 e0       	ldi	r20, 0x00	; 0
     e1e:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_u8SetPinValue>

	/* 3- set command to data pins */
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Command);
     e22:	80 e0       	ldi	r24, 0x00	; 0
     e24:	6f 85       	ldd	r22, Y+15	; 0x0f
     e26:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <DIO_u8SetPortValue>

	/* 4- set pulse on the enable pin */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_u8PIN_HIGH);
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	62 e0       	ldi	r22, 0x02	; 2
     e2e:	41 e0       	ldi	r20, 0x01	; 1
     e30:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_u8SetPinValue>
     e34:	80 e0       	ldi	r24, 0x00	; 0
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	a0 e0       	ldi	r26, 0x00	; 0
     e3a:	b0 e4       	ldi	r27, 0x40	; 64
     e3c:	8b 87       	std	Y+11, r24	; 0x0b
     e3e:	9c 87       	std	Y+12, r25	; 0x0c
     e40:	ad 87       	std	Y+13, r26	; 0x0d
     e42:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e44:	6b 85       	ldd	r22, Y+11	; 0x0b
     e46:	7c 85       	ldd	r23, Y+12	; 0x0c
     e48:	8d 85       	ldd	r24, Y+13	; 0x0d
     e4a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e4c:	20 e0       	ldi	r18, 0x00	; 0
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	4a ef       	ldi	r20, 0xFA	; 250
     e52:	54 e4       	ldi	r21, 0x44	; 68
     e54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e58:	dc 01       	movw	r26, r24
     e5a:	cb 01       	movw	r24, r22
     e5c:	8f 83       	std	Y+7, r24	; 0x07
     e5e:	98 87       	std	Y+8, r25	; 0x08
     e60:	a9 87       	std	Y+9, r26	; 0x09
     e62:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e64:	6f 81       	ldd	r22, Y+7	; 0x07
     e66:	78 85       	ldd	r23, Y+8	; 0x08
     e68:	89 85       	ldd	r24, Y+9	; 0x09
     e6a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e6c:	20 e0       	ldi	r18, 0x00	; 0
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	40 e8       	ldi	r20, 0x80	; 128
     e72:	5f e3       	ldi	r21, 0x3F	; 63
     e74:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     e78:	88 23       	and	r24, r24
     e7a:	2c f4       	brge	.+10     	; 0xe86 <CLCD_voidSendCommand+0x8e>
		__ticks = 1;
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	9e 83       	std	Y+6, r25	; 0x06
     e82:	8d 83       	std	Y+5, r24	; 0x05
     e84:	3f c0       	rjmp	.+126    	; 0xf04 <CLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
     e86:	6f 81       	ldd	r22, Y+7	; 0x07
     e88:	78 85       	ldd	r23, Y+8	; 0x08
     e8a:	89 85       	ldd	r24, Y+9	; 0x09
     e8c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e8e:	20 e0       	ldi	r18, 0x00	; 0
     e90:	3f ef       	ldi	r19, 0xFF	; 255
     e92:	4f e7       	ldi	r20, 0x7F	; 127
     e94:	57 e4       	ldi	r21, 0x47	; 71
     e96:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     e9a:	18 16       	cp	r1, r24
     e9c:	4c f5       	brge	.+82     	; 0xef0 <CLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e9e:	6b 85       	ldd	r22, Y+11	; 0x0b
     ea0:	7c 85       	ldd	r23, Y+12	; 0x0c
     ea2:	8d 85       	ldd	r24, Y+13	; 0x0d
     ea4:	9e 85       	ldd	r25, Y+14	; 0x0e
     ea6:	20 e0       	ldi	r18, 0x00	; 0
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	40 e2       	ldi	r20, 0x20	; 32
     eac:	51 e4       	ldi	r21, 0x41	; 65
     eae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eb2:	dc 01       	movw	r26, r24
     eb4:	cb 01       	movw	r24, r22
     eb6:	bc 01       	movw	r22, r24
     eb8:	cd 01       	movw	r24, r26
     eba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ebe:	dc 01       	movw	r26, r24
     ec0:	cb 01       	movw	r24, r22
     ec2:	9e 83       	std	Y+6, r25	; 0x06
     ec4:	8d 83       	std	Y+5, r24	; 0x05
     ec6:	0f c0       	rjmp	.+30     	; 0xee6 <CLCD_voidSendCommand+0xee>
     ec8:	88 ec       	ldi	r24, 0xC8	; 200
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	9c 83       	std	Y+4, r25	; 0x04
     ece:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ed0:	8b 81       	ldd	r24, Y+3	; 0x03
     ed2:	9c 81       	ldd	r25, Y+4	; 0x04
     ed4:	01 97       	sbiw	r24, 0x01	; 1
     ed6:	f1 f7       	brne	.-4      	; 0xed4 <CLCD_voidSendCommand+0xdc>
     ed8:	9c 83       	std	Y+4, r25	; 0x04
     eda:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     edc:	8d 81       	ldd	r24, Y+5	; 0x05
     ede:	9e 81       	ldd	r25, Y+6	; 0x06
     ee0:	01 97       	sbiw	r24, 0x01	; 1
     ee2:	9e 83       	std	Y+6, r25	; 0x06
     ee4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ee6:	8d 81       	ldd	r24, Y+5	; 0x05
     ee8:	9e 81       	ldd	r25, Y+6	; 0x06
     eea:	00 97       	sbiw	r24, 0x00	; 0
     eec:	69 f7       	brne	.-38     	; 0xec8 <CLCD_voidSendCommand+0xd0>
     eee:	14 c0       	rjmp	.+40     	; 0xf18 <CLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ef0:	6f 81       	ldd	r22, Y+7	; 0x07
     ef2:	78 85       	ldd	r23, Y+8	; 0x08
     ef4:	89 85       	ldd	r24, Y+9	; 0x09
     ef6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ef8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     efc:	dc 01       	movw	r26, r24
     efe:	cb 01       	movw	r24, r22
     f00:	9e 83       	std	Y+6, r25	; 0x06
     f02:	8d 83       	std	Y+5, r24	; 0x05
     f04:	8d 81       	ldd	r24, Y+5	; 0x05
     f06:	9e 81       	ldd	r25, Y+6	; 0x06
     f08:	9a 83       	std	Y+2, r25	; 0x02
     f0a:	89 83       	std	Y+1, r24	; 0x01
     f0c:	89 81       	ldd	r24, Y+1	; 0x01
     f0e:	9a 81       	ldd	r25, Y+2	; 0x02
     f10:	01 97       	sbiw	r24, 0x01	; 1
     f12:	f1 f7       	brne	.-4      	; 0xf10 <CLCD_voidSendCommand+0x118>
     f14:	9a 83       	std	Y+2, r25	; 0x02
     f16:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_u8PIN_LOW);
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	62 e0       	ldi	r22, 0x02	; 2
     f1c:	40 e0       	ldi	r20, 0x00	; 0
     f1e:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_u8SetPinValue>
}
     f22:	2f 96       	adiw	r28, 0x0f	; 15
     f24:	0f b6       	in	r0, 0x3f	; 63
     f26:	f8 94       	cli
     f28:	de bf       	out	0x3e, r29	; 62
     f2a:	0f be       	out	0x3f, r0	; 63
     f2c:	cd bf       	out	0x3d, r28	; 61
     f2e:	cf 91       	pop	r28
     f30:	df 91       	pop	r29
     f32:	08 95       	ret

00000f34 <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
     f34:	df 93       	push	r29
     f36:	cf 93       	push	r28
     f38:	cd b7       	in	r28, 0x3d	; 61
     f3a:	de b7       	in	r29, 0x3e	; 62
     f3c:	2f 97       	sbiw	r28, 0x0f	; 15
     f3e:	0f b6       	in	r0, 0x3f	; 63
     f40:	f8 94       	cli
     f42:	de bf       	out	0x3e, r29	; 62
     f44:	0f be       	out	0x3f, r0	; 63
     f46:	cd bf       	out	0x3d, r28	; 61
     f48:	8f 87       	std	Y+15, r24	; 0x0f
	/* 1- set RS pin to high for data */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_u8PIN_HIGH);
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	60 e0       	ldi	r22, 0x00	; 0
     f4e:	41 e0       	ldi	r20, 0x01	; 1
     f50:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_u8SetPinValue>

	/* 2- set RW pin to low for write */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_u8PIN_LOW);
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	61 e0       	ldi	r22, 0x01	; 1
     f58:	40 e0       	ldi	r20, 0x00	; 0
     f5a:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_u8SetPinValue>

	/* 3- set data to data pins */
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Data);
     f5e:	80 e0       	ldi	r24, 0x00	; 0
     f60:	6f 85       	ldd	r22, Y+15	; 0x0f
     f62:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <DIO_u8SetPortValue>

	/* 4- set pulse on the enable pin */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_u8PIN_HIGH);
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	62 e0       	ldi	r22, 0x02	; 2
     f6a:	41 e0       	ldi	r20, 0x01	; 1
     f6c:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_u8SetPinValue>
     f70:	80 e0       	ldi	r24, 0x00	; 0
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	a0 e0       	ldi	r26, 0x00	; 0
     f76:	b0 e4       	ldi	r27, 0x40	; 64
     f78:	8b 87       	std	Y+11, r24	; 0x0b
     f7a:	9c 87       	std	Y+12, r25	; 0x0c
     f7c:	ad 87       	std	Y+13, r26	; 0x0d
     f7e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f80:	6b 85       	ldd	r22, Y+11	; 0x0b
     f82:	7c 85       	ldd	r23, Y+12	; 0x0c
     f84:	8d 85       	ldd	r24, Y+13	; 0x0d
     f86:	9e 85       	ldd	r25, Y+14	; 0x0e
     f88:	20 e0       	ldi	r18, 0x00	; 0
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	4a ef       	ldi	r20, 0xFA	; 250
     f8e:	54 e4       	ldi	r21, 0x44	; 68
     f90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f94:	dc 01       	movw	r26, r24
     f96:	cb 01       	movw	r24, r22
     f98:	8f 83       	std	Y+7, r24	; 0x07
     f9a:	98 87       	std	Y+8, r25	; 0x08
     f9c:	a9 87       	std	Y+9, r26	; 0x09
     f9e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fa0:	6f 81       	ldd	r22, Y+7	; 0x07
     fa2:	78 85       	ldd	r23, Y+8	; 0x08
     fa4:	89 85       	ldd	r24, Y+9	; 0x09
     fa6:	9a 85       	ldd	r25, Y+10	; 0x0a
     fa8:	20 e0       	ldi	r18, 0x00	; 0
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	40 e8       	ldi	r20, 0x80	; 128
     fae:	5f e3       	ldi	r21, 0x3F	; 63
     fb0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     fb4:	88 23       	and	r24, r24
     fb6:	2c f4       	brge	.+10     	; 0xfc2 <CLCD_voidSendData+0x8e>
		__ticks = 1;
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	9e 83       	std	Y+6, r25	; 0x06
     fbe:	8d 83       	std	Y+5, r24	; 0x05
     fc0:	3f c0       	rjmp	.+126    	; 0x1040 <CLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
     fc2:	6f 81       	ldd	r22, Y+7	; 0x07
     fc4:	78 85       	ldd	r23, Y+8	; 0x08
     fc6:	89 85       	ldd	r24, Y+9	; 0x09
     fc8:	9a 85       	ldd	r25, Y+10	; 0x0a
     fca:	20 e0       	ldi	r18, 0x00	; 0
     fcc:	3f ef       	ldi	r19, 0xFF	; 255
     fce:	4f e7       	ldi	r20, 0x7F	; 127
     fd0:	57 e4       	ldi	r21, 0x47	; 71
     fd2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     fd6:	18 16       	cp	r1, r24
     fd8:	4c f5       	brge	.+82     	; 0x102c <CLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fda:	6b 85       	ldd	r22, Y+11	; 0x0b
     fdc:	7c 85       	ldd	r23, Y+12	; 0x0c
     fde:	8d 85       	ldd	r24, Y+13	; 0x0d
     fe0:	9e 85       	ldd	r25, Y+14	; 0x0e
     fe2:	20 e0       	ldi	r18, 0x00	; 0
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	40 e2       	ldi	r20, 0x20	; 32
     fe8:	51 e4       	ldi	r21, 0x41	; 65
     fea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fee:	dc 01       	movw	r26, r24
     ff0:	cb 01       	movw	r24, r22
     ff2:	bc 01       	movw	r22, r24
     ff4:	cd 01       	movw	r24, r26
     ff6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ffa:	dc 01       	movw	r26, r24
     ffc:	cb 01       	movw	r24, r22
     ffe:	9e 83       	std	Y+6, r25	; 0x06
    1000:	8d 83       	std	Y+5, r24	; 0x05
    1002:	0f c0       	rjmp	.+30     	; 0x1022 <CLCD_voidSendData+0xee>
    1004:	88 ec       	ldi	r24, 0xC8	; 200
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	9c 83       	std	Y+4, r25	; 0x04
    100a:	8b 83       	std	Y+3, r24	; 0x03
    100c:	8b 81       	ldd	r24, Y+3	; 0x03
    100e:	9c 81       	ldd	r25, Y+4	; 0x04
    1010:	01 97       	sbiw	r24, 0x01	; 1
    1012:	f1 f7       	brne	.-4      	; 0x1010 <CLCD_voidSendData+0xdc>
    1014:	9c 83       	std	Y+4, r25	; 0x04
    1016:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1018:	8d 81       	ldd	r24, Y+5	; 0x05
    101a:	9e 81       	ldd	r25, Y+6	; 0x06
    101c:	01 97       	sbiw	r24, 0x01	; 1
    101e:	9e 83       	std	Y+6, r25	; 0x06
    1020:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1022:	8d 81       	ldd	r24, Y+5	; 0x05
    1024:	9e 81       	ldd	r25, Y+6	; 0x06
    1026:	00 97       	sbiw	r24, 0x00	; 0
    1028:	69 f7       	brne	.-38     	; 0x1004 <CLCD_voidSendData+0xd0>
    102a:	14 c0       	rjmp	.+40     	; 0x1054 <CLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    102c:	6f 81       	ldd	r22, Y+7	; 0x07
    102e:	78 85       	ldd	r23, Y+8	; 0x08
    1030:	89 85       	ldd	r24, Y+9	; 0x09
    1032:	9a 85       	ldd	r25, Y+10	; 0x0a
    1034:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1038:	dc 01       	movw	r26, r24
    103a:	cb 01       	movw	r24, r22
    103c:	9e 83       	std	Y+6, r25	; 0x06
    103e:	8d 83       	std	Y+5, r24	; 0x05
    1040:	8d 81       	ldd	r24, Y+5	; 0x05
    1042:	9e 81       	ldd	r25, Y+6	; 0x06
    1044:	9a 83       	std	Y+2, r25	; 0x02
    1046:	89 83       	std	Y+1, r24	; 0x01
    1048:	89 81       	ldd	r24, Y+1	; 0x01
    104a:	9a 81       	ldd	r25, Y+2	; 0x02
    104c:	01 97       	sbiw	r24, 0x01	; 1
    104e:	f1 f7       	brne	.-4      	; 0x104c <CLCD_voidSendData+0x118>
    1050:	9a 83       	std	Y+2, r25	; 0x02
    1052:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_u8PIN_LOW);
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	62 e0       	ldi	r22, 0x02	; 2
    1058:	40 e0       	ldi	r20, 0x00	; 0
    105a:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_u8SetPinValue>
}
    105e:	2f 96       	adiw	r28, 0x0f	; 15
    1060:	0f b6       	in	r0, 0x3f	; 63
    1062:	f8 94       	cli
    1064:	de bf       	out	0x3e, r29	; 62
    1066:	0f be       	out	0x3f, r0	; 63
    1068:	cd bf       	out	0x3d, r28	; 61
    106a:	cf 91       	pop	r28
    106c:	df 91       	pop	r29
    106e:	08 95       	ret

00001070 <CLCD_voidInit>:

/* 8 bit initialization*/
void CLCD_voidInit(void)
{
    1070:	df 93       	push	r29
    1072:	cf 93       	push	r28
    1074:	cd b7       	in	r28, 0x3d	; 61
    1076:	de b7       	in	r29, 0x3e	; 62
    1078:	2e 97       	sbiw	r28, 0x0e	; 14
    107a:	0f b6       	in	r0, 0x3f	; 63
    107c:	f8 94       	cli
    107e:	de bf       	out	0x3e, r29	; 62
    1080:	0f be       	out	0x3f, r0	; 63
    1082:	cd bf       	out	0x3d, r28	; 61
    1084:	80 e0       	ldi	r24, 0x00	; 0
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	a0 e2       	ldi	r26, 0x20	; 32
    108a:	b2 e4       	ldi	r27, 0x42	; 66
    108c:	8b 87       	std	Y+11, r24	; 0x0b
    108e:	9c 87       	std	Y+12, r25	; 0x0c
    1090:	ad 87       	std	Y+13, r26	; 0x0d
    1092:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1094:	6b 85       	ldd	r22, Y+11	; 0x0b
    1096:	7c 85       	ldd	r23, Y+12	; 0x0c
    1098:	8d 85       	ldd	r24, Y+13	; 0x0d
    109a:	9e 85       	ldd	r25, Y+14	; 0x0e
    109c:	20 e0       	ldi	r18, 0x00	; 0
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	4a ef       	ldi	r20, 0xFA	; 250
    10a2:	54 e4       	ldi	r21, 0x44	; 68
    10a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10a8:	dc 01       	movw	r26, r24
    10aa:	cb 01       	movw	r24, r22
    10ac:	8f 83       	std	Y+7, r24	; 0x07
    10ae:	98 87       	std	Y+8, r25	; 0x08
    10b0:	a9 87       	std	Y+9, r26	; 0x09
    10b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10b4:	6f 81       	ldd	r22, Y+7	; 0x07
    10b6:	78 85       	ldd	r23, Y+8	; 0x08
    10b8:	89 85       	ldd	r24, Y+9	; 0x09
    10ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    10bc:	20 e0       	ldi	r18, 0x00	; 0
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	40 e8       	ldi	r20, 0x80	; 128
    10c2:	5f e3       	ldi	r21, 0x3F	; 63
    10c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    10c8:	88 23       	and	r24, r24
    10ca:	2c f4       	brge	.+10     	; 0x10d6 <CLCD_voidInit+0x66>
		__ticks = 1;
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	9e 83       	std	Y+6, r25	; 0x06
    10d2:	8d 83       	std	Y+5, r24	; 0x05
    10d4:	3f c0       	rjmp	.+126    	; 0x1154 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    10d6:	6f 81       	ldd	r22, Y+7	; 0x07
    10d8:	78 85       	ldd	r23, Y+8	; 0x08
    10da:	89 85       	ldd	r24, Y+9	; 0x09
    10dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    10de:	20 e0       	ldi	r18, 0x00	; 0
    10e0:	3f ef       	ldi	r19, 0xFF	; 255
    10e2:	4f e7       	ldi	r20, 0x7F	; 127
    10e4:	57 e4       	ldi	r21, 0x47	; 71
    10e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    10ea:	18 16       	cp	r1, r24
    10ec:	4c f5       	brge	.+82     	; 0x1140 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    10f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    10f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    10f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    10f6:	20 e0       	ldi	r18, 0x00	; 0
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	40 e2       	ldi	r20, 0x20	; 32
    10fc:	51 e4       	ldi	r21, 0x41	; 65
    10fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1102:	dc 01       	movw	r26, r24
    1104:	cb 01       	movw	r24, r22
    1106:	bc 01       	movw	r22, r24
    1108:	cd 01       	movw	r24, r26
    110a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    110e:	dc 01       	movw	r26, r24
    1110:	cb 01       	movw	r24, r22
    1112:	9e 83       	std	Y+6, r25	; 0x06
    1114:	8d 83       	std	Y+5, r24	; 0x05
    1116:	0f c0       	rjmp	.+30     	; 0x1136 <CLCD_voidInit+0xc6>
    1118:	88 ec       	ldi	r24, 0xC8	; 200
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	9c 83       	std	Y+4, r25	; 0x04
    111e:	8b 83       	std	Y+3, r24	; 0x03
    1120:	8b 81       	ldd	r24, Y+3	; 0x03
    1122:	9c 81       	ldd	r25, Y+4	; 0x04
    1124:	01 97       	sbiw	r24, 0x01	; 1
    1126:	f1 f7       	brne	.-4      	; 0x1124 <CLCD_voidInit+0xb4>
    1128:	9c 83       	std	Y+4, r25	; 0x04
    112a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    112c:	8d 81       	ldd	r24, Y+5	; 0x05
    112e:	9e 81       	ldd	r25, Y+6	; 0x06
    1130:	01 97       	sbiw	r24, 0x01	; 1
    1132:	9e 83       	std	Y+6, r25	; 0x06
    1134:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1136:	8d 81       	ldd	r24, Y+5	; 0x05
    1138:	9e 81       	ldd	r25, Y+6	; 0x06
    113a:	00 97       	sbiw	r24, 0x00	; 0
    113c:	69 f7       	brne	.-38     	; 0x1118 <CLCD_voidInit+0xa8>
    113e:	14 c0       	rjmp	.+40     	; 0x1168 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1140:	6f 81       	ldd	r22, Y+7	; 0x07
    1142:	78 85       	ldd	r23, Y+8	; 0x08
    1144:	89 85       	ldd	r24, Y+9	; 0x09
    1146:	9a 85       	ldd	r25, Y+10	; 0x0a
    1148:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    114c:	dc 01       	movw	r26, r24
    114e:	cb 01       	movw	r24, r22
    1150:	9e 83       	std	Y+6, r25	; 0x06
    1152:	8d 83       	std	Y+5, r24	; 0x05
    1154:	8d 81       	ldd	r24, Y+5	; 0x05
    1156:	9e 81       	ldd	r25, Y+6	; 0x06
    1158:	9a 83       	std	Y+2, r25	; 0x02
    115a:	89 83       	std	Y+1, r24	; 0x01
    115c:	89 81       	ldd	r24, Y+1	; 0x01
    115e:	9a 81       	ldd	r25, Y+2	; 0x02
    1160:	01 97       	sbiw	r24, 0x01	; 1
    1162:	f1 f7       	brne	.-4      	; 0x1160 <CLCD_voidInit+0xf0>
    1164:	9a 83       	std	Y+2, r25	; 0x02
    1166:	89 83       	std	Y+1, r24	; 0x01
	/*wait for more than 30 ms*/
	_delay_ms(40);

	/*function set command: 2 lines & 5*8 font size*/
	CLCD_voidSendCommand(0b00111000);
    1168:	88 e3       	ldi	r24, 0x38	; 56
    116a:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <CLCD_voidSendCommand>

	/*display on off command: display enable, cursor disable, no blink cursor*/
	CLCD_voidSendCommand(0b00001100);
    116e:	8c e0       	ldi	r24, 0x0C	; 12
    1170:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <CLCD_voidSendCommand>

	/*clear display*/
	CLCD_voidSendCommand(0b00000001);
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <CLCD_voidSendCommand>
}
    117a:	2e 96       	adiw	r28, 0x0e	; 14
    117c:	0f b6       	in	r0, 0x3f	; 63
    117e:	f8 94       	cli
    1180:	de bf       	out	0x3e, r29	; 62
    1182:	0f be       	out	0x3f, r0	; 63
    1184:	cd bf       	out	0x3d, r28	; 61
    1186:	cf 91       	pop	r28
    1188:	df 91       	pop	r29
    118a:	08 95       	ret

0000118c <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 Copy_u8XPos, u8 Copy_u8YPos)
{
    118c:	df 93       	push	r29
    118e:	cf 93       	push	r28
    1190:	00 d0       	rcall	.+0      	; 0x1192 <CLCD_voidGoToXY+0x6>
    1192:	0f 92       	push	r0
    1194:	cd b7       	in	r28, 0x3d	; 61
    1196:	de b7       	in	r29, 0x3e	; 62
    1198:	8a 83       	std	Y+2, r24	; 0x02
    119a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;
	if(Copy_u8XPos == 0)
    119c:	8a 81       	ldd	r24, Y+2	; 0x02
    119e:	88 23       	and	r24, r24
    11a0:	19 f4       	brne	.+6      	; 0x11a8 <CLCD_voidGoToXY+0x1c>
	{
		Local_u8Address = Copy_u8YPos;
    11a2:	8b 81       	ldd	r24, Y+3	; 0x03
    11a4:	89 83       	std	Y+1, r24	; 0x01
    11a6:	06 c0       	rjmp	.+12     	; 0x11b4 <CLCD_voidGoToXY+0x28>
	}
	else if(Copy_u8XPos == 1)
    11a8:	8a 81       	ldd	r24, Y+2	; 0x02
    11aa:	81 30       	cpi	r24, 0x01	; 1
    11ac:	19 f4       	brne	.+6      	; 0x11b4 <CLCD_voidGoToXY+0x28>
	{
		Local_u8Address = Copy_u8YPos + 0x40;
    11ae:	8b 81       	ldd	r24, Y+3	; 0x03
    11b0:	80 5c       	subi	r24, 0xC0	; 192
    11b2:	89 83       	std	Y+1, r24	; 0x01
	}
	/*set DDRAM Address*/
	CLCD_voidSendCommand(Local_u8Address + 128);
    11b4:	89 81       	ldd	r24, Y+1	; 0x01
    11b6:	80 58       	subi	r24, 0x80	; 128
    11b8:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <CLCD_voidSendCommand>
}
    11bc:	0f 90       	pop	r0
    11be:	0f 90       	pop	r0
    11c0:	0f 90       	pop	r0
    11c2:	cf 91       	pop	r28
    11c4:	df 91       	pop	r29
    11c6:	08 95       	ret

000011c8 <CLCD_voidSendString>:

void CLCD_voidSendString(const char* Copy_pcString)
{
    11c8:	df 93       	push	r29
    11ca:	cf 93       	push	r28
    11cc:	00 d0       	rcall	.+0      	; 0x11ce <CLCD_voidSendString+0x6>
    11ce:	0f 92       	push	r0
    11d0:	cd b7       	in	r28, 0x3d	; 61
    11d2:	de b7       	in	r29, 0x3e	; 62
    11d4:	9b 83       	std	Y+3, r25	; 0x03
    11d6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter = 0;
    11d8:	19 82       	std	Y+1, r1	; 0x01
    11da:	1b c0       	rjmp	.+54     	; 0x1212 <CLCD_voidSendString+0x4a>
	while(Copy_pcString[Local_u8Counter] != '\0')
	{
		if(CUR_POS == 17){
    11dc:	80 91 08 02 	lds	r24, 0x0208
    11e0:	81 31       	cpi	r24, 0x11	; 17
    11e2:	21 f4       	brne	.+8      	; 0x11ec <CLCD_voidSendString+0x24>
			CLCD_voidGoToXY(1,0);
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	60 e0       	ldi	r22, 0x00	; 0
    11e8:	0e 94 c6 08 	call	0x118c	; 0x118c <CLCD_voidGoToXY>
		}

		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
    11ec:	89 81       	ldd	r24, Y+1	; 0x01
    11ee:	28 2f       	mov	r18, r24
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	8a 81       	ldd	r24, Y+2	; 0x02
    11f4:	9b 81       	ldd	r25, Y+3	; 0x03
    11f6:	fc 01       	movw	r30, r24
    11f8:	e2 0f       	add	r30, r18
    11fa:	f3 1f       	adc	r31, r19
    11fc:	80 81       	ld	r24, Z
    11fe:	0e 94 9a 07 	call	0xf34	; 0xf34 <CLCD_voidSendData>
		Local_u8Counter++;
    1202:	89 81       	ldd	r24, Y+1	; 0x01
    1204:	8f 5f       	subi	r24, 0xFF	; 255
    1206:	89 83       	std	Y+1, r24	; 0x01
		CUR_POS++;
    1208:	80 91 08 02 	lds	r24, 0x0208
    120c:	8f 5f       	subi	r24, 0xFF	; 255
    120e:	80 93 08 02 	sts	0x0208, r24
}

void CLCD_voidSendString(const char* Copy_pcString)
{
	u8 Local_u8Counter = 0;
	while(Copy_pcString[Local_u8Counter] != '\0')
    1212:	89 81       	ldd	r24, Y+1	; 0x01
    1214:	28 2f       	mov	r18, r24
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	8a 81       	ldd	r24, Y+2	; 0x02
    121a:	9b 81       	ldd	r25, Y+3	; 0x03
    121c:	fc 01       	movw	r30, r24
    121e:	e2 0f       	add	r30, r18
    1220:	f3 1f       	adc	r31, r19
    1222:	80 81       	ld	r24, Z
    1224:	88 23       	and	r24, r24
    1226:	d1 f6       	brne	.-76     	; 0x11dc <CLCD_voidSendString+0x14>

		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
		Local_u8Counter++;
		CUR_POS++;
	}
	CUR_POS = 0;
    1228:	10 92 08 02 	sts	0x0208, r1
}
    122c:	0f 90       	pop	r0
    122e:	0f 90       	pop	r0
    1230:	0f 90       	pop	r0
    1232:	cf 91       	pop	r28
    1234:	df 91       	pop	r29
    1236:	08 95       	ret

00001238 <CLCD_voidWriteSpecialCharacter>:


void CLCD_voidWriteSpecialCharacter(u8* Copy_pu8Pattern, u8 Copy_u8PatternNumber, u8 Copy_u8XPos, u8 Copy_u8YPos)
{
    1238:	df 93       	push	r29
    123a:	cf 93       	push	r28
    123c:	cd b7       	in	r28, 0x3d	; 61
    123e:	de b7       	in	r29, 0x3e	; 62
    1240:	27 97       	sbiw	r28, 0x07	; 7
    1242:	0f b6       	in	r0, 0x3f	; 63
    1244:	f8 94       	cli
    1246:	de bf       	out	0x3e, r29	; 62
    1248:	0f be       	out	0x3f, r0	; 63
    124a:	cd bf       	out	0x3d, r28	; 61
    124c:	9c 83       	std	Y+4, r25	; 0x04
    124e:	8b 83       	std	Y+3, r24	; 0x03
    1250:	6d 83       	std	Y+5, r22	; 0x05
    1252:	4e 83       	std	Y+6, r20	; 0x06
    1254:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress, Local_u8Iterator;

	/*calculate the GCRAM Address whose each block is 8 bytes*/
	Local_u8CGRAMAddress = Copy_u8PatternNumber * 8;
    1256:	8d 81       	ldd	r24, Y+5	; 0x05
    1258:	88 2f       	mov	r24, r24
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	88 0f       	add	r24, r24
    125e:	99 1f       	adc	r25, r25
    1260:	88 0f       	add	r24, r24
    1262:	99 1f       	adc	r25, r25
    1264:	88 0f       	add	r24, r24
    1266:	99 1f       	adc	r25, r25
    1268:	8a 83       	std	Y+2, r24	; 0x02

	/*send the physical address command of the CGRAM to LCD, setting bit 6 and clearing bit 7 */
	CLCD_voidSendCommand(Local_u8CGRAMAddress + 64);
    126a:	8a 81       	ldd	r24, Y+2	; 0x02
    126c:	80 5c       	subi	r24, 0xC0	; 192
    126e:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <CLCD_voidSendCommand>

	/*write the pattern into the CGRAM*/
	for(Local_u8Iterator = 0; Local_u8Iterator < 8; Local_u8Iterator++)
    1272:	19 82       	std	Y+1, r1	; 0x01
    1274:	0e c0       	rjmp	.+28     	; 0x1292 <CLCD_voidWriteSpecialCharacter+0x5a>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
    1276:	89 81       	ldd	r24, Y+1	; 0x01
    1278:	28 2f       	mov	r18, r24
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	8b 81       	ldd	r24, Y+3	; 0x03
    127e:	9c 81       	ldd	r25, Y+4	; 0x04
    1280:	fc 01       	movw	r30, r24
    1282:	e2 0f       	add	r30, r18
    1284:	f3 1f       	adc	r31, r19
    1286:	80 81       	ld	r24, Z
    1288:	0e 94 9a 07 	call	0xf34	; 0xf34 <CLCD_voidSendData>

	/*send the physical address command of the CGRAM to LCD, setting bit 6 and clearing bit 7 */
	CLCD_voidSendCommand(Local_u8CGRAMAddress + 64);

	/*write the pattern into the CGRAM*/
	for(Local_u8Iterator = 0; Local_u8Iterator < 8; Local_u8Iterator++)
    128c:	89 81       	ldd	r24, Y+1	; 0x01
    128e:	8f 5f       	subi	r24, 0xFF	; 255
    1290:	89 83       	std	Y+1, r24	; 0x01
    1292:	89 81       	ldd	r24, Y+1	; 0x01
    1294:	88 30       	cpi	r24, 0x08	; 8
    1296:	78 f3       	brcs	.-34     	; 0x1276 <CLCD_voidWriteSpecialCharacter+0x3e>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
	}

	/*returning to the DDRAM with a specific position on the LCD display*/
	CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
    1298:	8e 81       	ldd	r24, Y+6	; 0x06
    129a:	6f 81       	ldd	r22, Y+7	; 0x07
    129c:	0e 94 c6 08 	call	0x118c	; 0x118c <CLCD_voidGoToXY>

	/*display the pattern written in the CGRAM on the LCD (dealing with the location of the data as the data itself)*/
	CLCD_voidSendData(Copy_u8PatternNumber);
    12a0:	8d 81       	ldd	r24, Y+5	; 0x05
    12a2:	0e 94 9a 07 	call	0xf34	; 0xf34 <CLCD_voidSendData>
	 *
	 * - if it took an number from 0 to 7 then it will access the CGRAM and display the pattern which
	 * 	 exists at this location or block form block 0 to block 7
	 */

}
    12a6:	27 96       	adiw	r28, 0x07	; 7
    12a8:	0f b6       	in	r0, 0x3f	; 63
    12aa:	f8 94       	cli
    12ac:	de bf       	out	0x3e, r29	; 62
    12ae:	0f be       	out	0x3f, r0	; 63
    12b0:	cd bf       	out	0x3d, r28	; 61
    12b2:	cf 91       	pop	r28
    12b4:	df 91       	pop	r29
    12b6:	08 95       	ret

000012b8 <CLCD_voidWriteNumber>:

void CLCD_voidWriteNumber(u32 Copy_u32Number)
{
    12b8:	df 93       	push	r29
    12ba:	cf 93       	push	r28
    12bc:	00 d0       	rcall	.+0      	; 0x12be <CLCD_voidWriteNumber+0x6>
    12be:	00 d0       	rcall	.+0      	; 0x12c0 <CLCD_voidWriteNumber+0x8>
    12c0:	cd b7       	in	r28, 0x3d	; 61
    12c2:	de b7       	in	r29, 0x3e	; 62
    12c4:	69 83       	std	Y+1, r22	; 0x01
    12c6:	7a 83       	std	Y+2, r23	; 0x02
    12c8:	8b 83       	std	Y+3, r24	; 0x03
    12ca:	9c 83       	std	Y+4, r25	; 0x04
	if(Copy_u32Number == 0)
    12cc:	89 81       	ldd	r24, Y+1	; 0x01
    12ce:	9a 81       	ldd	r25, Y+2	; 0x02
    12d0:	ab 81       	ldd	r26, Y+3	; 0x03
    12d2:	bc 81       	ldd	r27, Y+4	; 0x04
    12d4:	00 97       	sbiw	r24, 0x00	; 0
    12d6:	a1 05       	cpc	r26, r1
    12d8:	b1 05       	cpc	r27, r1
    12da:	19 f1       	breq	.+70     	; 0x1322 <CLCD_voidWriteNumber+0x6a>
	{
		return;
	}
	CLCD_voidWriteNumber(Copy_u32Number / 10);
    12dc:	89 81       	ldd	r24, Y+1	; 0x01
    12de:	9a 81       	ldd	r25, Y+2	; 0x02
    12e0:	ab 81       	ldd	r26, Y+3	; 0x03
    12e2:	bc 81       	ldd	r27, Y+4	; 0x04
    12e4:	2a e0       	ldi	r18, 0x0A	; 10
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	40 e0       	ldi	r20, 0x00	; 0
    12ea:	50 e0       	ldi	r21, 0x00	; 0
    12ec:	bc 01       	movw	r22, r24
    12ee:	cd 01       	movw	r24, r26
    12f0:	0e 94 57 18 	call	0x30ae	; 0x30ae <__udivmodsi4>
    12f4:	da 01       	movw	r26, r20
    12f6:	c9 01       	movw	r24, r18
    12f8:	bc 01       	movw	r22, r24
    12fa:	cd 01       	movw	r24, r26
    12fc:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <CLCD_voidWriteNumber>
	CLCD_voidSendData((Copy_u32Number % 10) + '0');
    1300:	89 81       	ldd	r24, Y+1	; 0x01
    1302:	9a 81       	ldd	r25, Y+2	; 0x02
    1304:	ab 81       	ldd	r26, Y+3	; 0x03
    1306:	bc 81       	ldd	r27, Y+4	; 0x04
    1308:	2a e0       	ldi	r18, 0x0A	; 10
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	40 e0       	ldi	r20, 0x00	; 0
    130e:	50 e0       	ldi	r21, 0x00	; 0
    1310:	bc 01       	movw	r22, r24
    1312:	cd 01       	movw	r24, r26
    1314:	0e 94 57 18 	call	0x30ae	; 0x30ae <__udivmodsi4>
    1318:	dc 01       	movw	r26, r24
    131a:	cb 01       	movw	r24, r22
    131c:	80 5d       	subi	r24, 0xD0	; 208
    131e:	0e 94 9a 07 	call	0xf34	; 0xf34 <CLCD_voidSendData>
}
    1322:	0f 90       	pop	r0
    1324:	0f 90       	pop	r0
    1326:	0f 90       	pop	r0
    1328:	0f 90       	pop	r0
    132a:	cf 91       	pop	r28
    132c:	df 91       	pop	r29
    132e:	08 95       	ret

00001330 <DCMOTOR_voidRotateClockWise>:
#include "DIO_interface.h"
#include "PORT_interface.h"
#include "DCMOTOR_interface.h"

void DCMOTOR_voidRotateClockWise(u8 Copy_u8Port, u8 Copy_u8PinHigh, u8 Copy_u8PinLow)
{
    1330:	df 93       	push	r29
    1332:	cf 93       	push	r28
    1334:	00 d0       	rcall	.+0      	; 0x1336 <DCMOTOR_voidRotateClockWise+0x6>
    1336:	0f 92       	push	r0
    1338:	cd b7       	in	r28, 0x3d	; 61
    133a:	de b7       	in	r29, 0x3e	; 62
    133c:	89 83       	std	Y+1, r24	; 0x01
    133e:	6a 83       	std	Y+2, r22	; 0x02
    1340:	4b 83       	std	Y+3, r20	; 0x03
	DIO_u8SetPinValue(Copy_u8Port, Copy_u8PinLow, DIO_u8PIN_LOW);
    1342:	89 81       	ldd	r24, Y+1	; 0x01
    1344:	6b 81       	ldd	r22, Y+3	; 0x03
    1346:	40 e0       	ldi	r20, 0x00	; 0
    1348:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Copy_u8Port, Copy_u8PinHigh, DIO_u8PIN_HIGH);
    134c:	89 81       	ldd	r24, Y+1	; 0x01
    134e:	6a 81       	ldd	r22, Y+2	; 0x02
    1350:	41 e0       	ldi	r20, 0x01	; 1
    1352:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_u8SetPinValue>
	
}
    1356:	0f 90       	pop	r0
    1358:	0f 90       	pop	r0
    135a:	0f 90       	pop	r0
    135c:	cf 91       	pop	r28
    135e:	df 91       	pop	r29
    1360:	08 95       	ret

00001362 <DCMOTOR_voidRotateCounterClockWise>:

void DCMOTOR_voidRotateCounterClockWise(u8 Copy_u8Port, u8 Copy_u8PinHigh, u8 Copy_u8PinLow)
{
    1362:	df 93       	push	r29
    1364:	cf 93       	push	r28
    1366:	00 d0       	rcall	.+0      	; 0x1368 <DCMOTOR_voidRotateCounterClockWise+0x6>
    1368:	0f 92       	push	r0
    136a:	cd b7       	in	r28, 0x3d	; 61
    136c:	de b7       	in	r29, 0x3e	; 62
    136e:	89 83       	std	Y+1, r24	; 0x01
    1370:	6a 83       	std	Y+2, r22	; 0x02
    1372:	4b 83       	std	Y+3, r20	; 0x03
	DIO_u8SetPinValue(Copy_u8Port, Copy_u8PinLow, DIO_u8PIN_LOW);
    1374:	89 81       	ldd	r24, Y+1	; 0x01
    1376:	6b 81       	ldd	r22, Y+3	; 0x03
    1378:	40 e0       	ldi	r20, 0x00	; 0
    137a:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Copy_u8Port, Copy_u8PinHigh, DIO_u8PIN_HIGH);
    137e:	89 81       	ldd	r24, Y+1	; 0x01
    1380:	6a 81       	ldd	r22, Y+2	; 0x02
    1382:	41 e0       	ldi	r20, 0x01	; 1
    1384:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_u8SetPinValue>
}
    1388:	0f 90       	pop	r0
    138a:	0f 90       	pop	r0
    138c:	0f 90       	pop	r0
    138e:	cf 91       	pop	r28
    1390:	df 91       	pop	r29
    1392:	08 95       	ret

00001394 <DCMOTOR_voidStopDCMotor>:

void DCMOTOR_voidStopDCMotor(u8 Copy_u8Port, u8 Copy_u8Pin1, u8 Copy_u8Pin2)
{
    1394:	df 93       	push	r29
    1396:	cf 93       	push	r28
    1398:	00 d0       	rcall	.+0      	; 0x139a <DCMOTOR_voidStopDCMotor+0x6>
    139a:	0f 92       	push	r0
    139c:	cd b7       	in	r28, 0x3d	; 61
    139e:	de b7       	in	r29, 0x3e	; 62
    13a0:	89 83       	std	Y+1, r24	; 0x01
    13a2:	6a 83       	std	Y+2, r22	; 0x02
    13a4:	4b 83       	std	Y+3, r20	; 0x03
	DIO_u8SetPinValue(Copy_u8Port, Copy_u8Pin1, DIO_u8PIN_LOW);
    13a6:	89 81       	ldd	r24, Y+1	; 0x01
    13a8:	6a 81       	ldd	r22, Y+2	; 0x02
    13aa:	40 e0       	ldi	r20, 0x00	; 0
    13ac:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Copy_u8Port, Copy_u8Pin2, DIO_u8PIN_LOW);
    13b0:	89 81       	ldd	r24, Y+1	; 0x01
    13b2:	6b 81       	ldd	r22, Y+3	; 0x03
    13b4:	40 e0       	ldi	r20, 0x00	; 0
    13b6:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_u8SetPinValue>
}
    13ba:	0f 90       	pop	r0
    13bc:	0f 90       	pop	r0
    13be:	0f 90       	pop	r0
    13c0:	cf 91       	pop	r28
    13c2:	df 91       	pop	r29
    13c4:	08 95       	ret

000013c6 <DIO_u8SetPinValue>:
*/

/*************************************************************************************/

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
    13c6:	df 93       	push	r29
    13c8:	cf 93       	push	r28
    13ca:	00 d0       	rcall	.+0      	; 0x13cc <DIO_u8SetPinValue+0x6>
    13cc:	00 d0       	rcall	.+0      	; 0x13ce <DIO_u8SetPinValue+0x8>
    13ce:	00 d0       	rcall	.+0      	; 0x13d0 <DIO_u8SetPinValue+0xa>
    13d0:	cd b7       	in	r28, 0x3d	; 61
    13d2:	de b7       	in	r29, 0x3e	; 62
    13d4:	8a 83       	std	Y+2, r24	; 0x02
    13d6:	6b 83       	std	Y+3, r22	; 0x03
    13d8:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = 0;
    13da:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    13dc:	8a 81       	ldd	r24, Y+2	; 0x02
    13de:	28 2f       	mov	r18, r24
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	3e 83       	std	Y+6, r19	; 0x06
    13e4:	2d 83       	std	Y+5, r18	; 0x05
    13e6:	8d 81       	ldd	r24, Y+5	; 0x05
    13e8:	9e 81       	ldd	r25, Y+6	; 0x06
    13ea:	81 30       	cpi	r24, 0x01	; 1
    13ec:	91 05       	cpc	r25, r1
    13ee:	09 f4       	brne	.+2      	; 0x13f2 <DIO_u8SetPinValue+0x2c>
    13f0:	49 c0       	rjmp	.+146    	; 0x1484 <DIO_u8SetPinValue+0xbe>
    13f2:	2d 81       	ldd	r18, Y+5	; 0x05
    13f4:	3e 81       	ldd	r19, Y+6	; 0x06
    13f6:	22 30       	cpi	r18, 0x02	; 2
    13f8:	31 05       	cpc	r19, r1
    13fa:	2c f4       	brge	.+10     	; 0x1406 <DIO_u8SetPinValue+0x40>
    13fc:	8d 81       	ldd	r24, Y+5	; 0x05
    13fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1400:	00 97       	sbiw	r24, 0x00	; 0
    1402:	71 f0       	breq	.+28     	; 0x1420 <DIO_u8SetPinValue+0x5a>
    1404:	d5 c0       	rjmp	.+426    	; 0x15b0 <DIO_u8SetPinValue+0x1ea>
    1406:	2d 81       	ldd	r18, Y+5	; 0x05
    1408:	3e 81       	ldd	r19, Y+6	; 0x06
    140a:	22 30       	cpi	r18, 0x02	; 2
    140c:	31 05       	cpc	r19, r1
    140e:	09 f4       	brne	.+2      	; 0x1412 <DIO_u8SetPinValue+0x4c>
    1410:	6b c0       	rjmp	.+214    	; 0x14e8 <DIO_u8SetPinValue+0x122>
    1412:	8d 81       	ldd	r24, Y+5	; 0x05
    1414:	9e 81       	ldd	r25, Y+6	; 0x06
    1416:	83 30       	cpi	r24, 0x03	; 3
    1418:	91 05       	cpc	r25, r1
    141a:	09 f4       	brne	.+2      	; 0x141e <DIO_u8SetPinValue+0x58>
    141c:	97 c0       	rjmp	.+302    	; 0x154c <DIO_u8SetPinValue+0x186>
    141e:	c8 c0       	rjmp	.+400    	; 0x15b0 <DIO_u8SetPinValue+0x1ea>
	{
	case DIO_u8PORTA:
		if(Copy_u8Value == DIO_u8PIN_HIGH)
    1420:	8c 81       	ldd	r24, Y+4	; 0x04
    1422:	81 30       	cpi	r24, 0x01	; 1
    1424:	a1 f4       	brne	.+40     	; 0x144e <DIO_u8SetPinValue+0x88>
			SET_BIT(PORTA,Copy_u8Pin);
    1426:	ab e3       	ldi	r26, 0x3B	; 59
    1428:	b0 e0       	ldi	r27, 0x00	; 0
    142a:	eb e3       	ldi	r30, 0x3B	; 59
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	80 81       	ld	r24, Z
    1430:	48 2f       	mov	r20, r24
    1432:	8b 81       	ldd	r24, Y+3	; 0x03
    1434:	28 2f       	mov	r18, r24
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	02 2e       	mov	r0, r18
    143e:	02 c0       	rjmp	.+4      	; 0x1444 <DIO_u8SetPinValue+0x7e>
    1440:	88 0f       	add	r24, r24
    1442:	99 1f       	adc	r25, r25
    1444:	0a 94       	dec	r0
    1446:	e2 f7       	brpl	.-8      	; 0x1440 <DIO_u8SetPinValue+0x7a>
    1448:	84 2b       	or	r24, r20
    144a:	8c 93       	st	X, r24
    144c:	b3 c0       	rjmp	.+358    	; 0x15b4 <DIO_u8SetPinValue+0x1ee>
		else if(Copy_u8Value == DIO_u8PIN_LOW)
    144e:	8c 81       	ldd	r24, Y+4	; 0x04
    1450:	88 23       	and	r24, r24
    1452:	a9 f4       	brne	.+42     	; 0x147e <DIO_u8SetPinValue+0xb8>
			CLR_BIT(PORTA,Copy_u8Pin);
    1454:	ab e3       	ldi	r26, 0x3B	; 59
    1456:	b0 e0       	ldi	r27, 0x00	; 0
    1458:	eb e3       	ldi	r30, 0x3B	; 59
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	80 81       	ld	r24, Z
    145e:	48 2f       	mov	r20, r24
    1460:	8b 81       	ldd	r24, Y+3	; 0x03
    1462:	28 2f       	mov	r18, r24
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	02 2e       	mov	r0, r18
    146c:	02 c0       	rjmp	.+4      	; 0x1472 <DIO_u8SetPinValue+0xac>
    146e:	88 0f       	add	r24, r24
    1470:	99 1f       	adc	r25, r25
    1472:	0a 94       	dec	r0
    1474:	e2 f7       	brpl	.-8      	; 0x146e <DIO_u8SetPinValue+0xa8>
    1476:	80 95       	com	r24
    1478:	84 23       	and	r24, r20
    147a:	8c 93       	st	X, r24
    147c:	9b c0       	rjmp	.+310    	; 0x15b4 <DIO_u8SetPinValue+0x1ee>
		else
			Local_u8ErrorState = 1;
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	89 83       	std	Y+1, r24	; 0x01
    1482:	98 c0       	rjmp	.+304    	; 0x15b4 <DIO_u8SetPinValue+0x1ee>
		break;

	case DIO_u8PORTB:
		if(Copy_u8Value == DIO_u8PIN_HIGH)
    1484:	8c 81       	ldd	r24, Y+4	; 0x04
    1486:	81 30       	cpi	r24, 0x01	; 1
    1488:	a1 f4       	brne	.+40     	; 0x14b2 <DIO_u8SetPinValue+0xec>
			SET_BIT(PORTB,Copy_u8Pin);
    148a:	a8 e3       	ldi	r26, 0x38	; 56
    148c:	b0 e0       	ldi	r27, 0x00	; 0
    148e:	e8 e3       	ldi	r30, 0x38	; 56
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	80 81       	ld	r24, Z
    1494:	48 2f       	mov	r20, r24
    1496:	8b 81       	ldd	r24, Y+3	; 0x03
    1498:	28 2f       	mov	r18, r24
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	02 2e       	mov	r0, r18
    14a2:	02 c0       	rjmp	.+4      	; 0x14a8 <DIO_u8SetPinValue+0xe2>
    14a4:	88 0f       	add	r24, r24
    14a6:	99 1f       	adc	r25, r25
    14a8:	0a 94       	dec	r0
    14aa:	e2 f7       	brpl	.-8      	; 0x14a4 <DIO_u8SetPinValue+0xde>
    14ac:	84 2b       	or	r24, r20
    14ae:	8c 93       	st	X, r24
    14b0:	81 c0       	rjmp	.+258    	; 0x15b4 <DIO_u8SetPinValue+0x1ee>
		else if(Copy_u8Value == DIO_u8PIN_LOW)
    14b2:	8c 81       	ldd	r24, Y+4	; 0x04
    14b4:	88 23       	and	r24, r24
    14b6:	a9 f4       	brne	.+42     	; 0x14e2 <DIO_u8SetPinValue+0x11c>
			CLR_BIT(PORTB,Copy_u8Pin);
    14b8:	a8 e3       	ldi	r26, 0x38	; 56
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	e8 e3       	ldi	r30, 0x38	; 56
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	48 2f       	mov	r20, r24
    14c4:	8b 81       	ldd	r24, Y+3	; 0x03
    14c6:	28 2f       	mov	r18, r24
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	02 2e       	mov	r0, r18
    14d0:	02 c0       	rjmp	.+4      	; 0x14d6 <DIO_u8SetPinValue+0x110>
    14d2:	88 0f       	add	r24, r24
    14d4:	99 1f       	adc	r25, r25
    14d6:	0a 94       	dec	r0
    14d8:	e2 f7       	brpl	.-8      	; 0x14d2 <DIO_u8SetPinValue+0x10c>
    14da:	80 95       	com	r24
    14dc:	84 23       	and	r24, r20
    14de:	8c 93       	st	X, r24
    14e0:	69 c0       	rjmp	.+210    	; 0x15b4 <DIO_u8SetPinValue+0x1ee>
		else
			Local_u8ErrorState = 1;
    14e2:	81 e0       	ldi	r24, 0x01	; 1
    14e4:	89 83       	std	Y+1, r24	; 0x01
    14e6:	66 c0       	rjmp	.+204    	; 0x15b4 <DIO_u8SetPinValue+0x1ee>
		break;

	case DIO_u8PORTC:
		if(Copy_u8Value == DIO_u8PIN_HIGH)
    14e8:	8c 81       	ldd	r24, Y+4	; 0x04
    14ea:	81 30       	cpi	r24, 0x01	; 1
    14ec:	a1 f4       	brne	.+40     	; 0x1516 <DIO_u8SetPinValue+0x150>
			SET_BIT(PORTC,Copy_u8Pin);
    14ee:	a5 e3       	ldi	r26, 0x35	; 53
    14f0:	b0 e0       	ldi	r27, 0x00	; 0
    14f2:	e5 e3       	ldi	r30, 0x35	; 53
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	80 81       	ld	r24, Z
    14f8:	48 2f       	mov	r20, r24
    14fa:	8b 81       	ldd	r24, Y+3	; 0x03
    14fc:	28 2f       	mov	r18, r24
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	02 2e       	mov	r0, r18
    1506:	02 c0       	rjmp	.+4      	; 0x150c <DIO_u8SetPinValue+0x146>
    1508:	88 0f       	add	r24, r24
    150a:	99 1f       	adc	r25, r25
    150c:	0a 94       	dec	r0
    150e:	e2 f7       	brpl	.-8      	; 0x1508 <DIO_u8SetPinValue+0x142>
    1510:	84 2b       	or	r24, r20
    1512:	8c 93       	st	X, r24
    1514:	4f c0       	rjmp	.+158    	; 0x15b4 <DIO_u8SetPinValue+0x1ee>
		else if(Copy_u8Value == DIO_u8PIN_LOW)
    1516:	8c 81       	ldd	r24, Y+4	; 0x04
    1518:	88 23       	and	r24, r24
    151a:	a9 f4       	brne	.+42     	; 0x1546 <DIO_u8SetPinValue+0x180>
			CLR_BIT(PORTC,Copy_u8Pin);
    151c:	a5 e3       	ldi	r26, 0x35	; 53
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	e5 e3       	ldi	r30, 0x35	; 53
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	48 2f       	mov	r20, r24
    1528:	8b 81       	ldd	r24, Y+3	; 0x03
    152a:	28 2f       	mov	r18, r24
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	02 2e       	mov	r0, r18
    1534:	02 c0       	rjmp	.+4      	; 0x153a <DIO_u8SetPinValue+0x174>
    1536:	88 0f       	add	r24, r24
    1538:	99 1f       	adc	r25, r25
    153a:	0a 94       	dec	r0
    153c:	e2 f7       	brpl	.-8      	; 0x1536 <DIO_u8SetPinValue+0x170>
    153e:	80 95       	com	r24
    1540:	84 23       	and	r24, r20
    1542:	8c 93       	st	X, r24
    1544:	37 c0       	rjmp	.+110    	; 0x15b4 <DIO_u8SetPinValue+0x1ee>
		else
			Local_u8ErrorState = 1;
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	89 83       	std	Y+1, r24	; 0x01
    154a:	34 c0       	rjmp	.+104    	; 0x15b4 <DIO_u8SetPinValue+0x1ee>
		break;

	case DIO_u8PORTD:
		if(Copy_u8Value == DIO_u8PIN_HIGH)
    154c:	8c 81       	ldd	r24, Y+4	; 0x04
    154e:	81 30       	cpi	r24, 0x01	; 1
    1550:	a1 f4       	brne	.+40     	; 0x157a <DIO_u8SetPinValue+0x1b4>
			SET_BIT(PORTD,Copy_u8Pin);
    1552:	a2 e3       	ldi	r26, 0x32	; 50
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	e2 e3       	ldi	r30, 0x32	; 50
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	48 2f       	mov	r20, r24
    155e:	8b 81       	ldd	r24, Y+3	; 0x03
    1560:	28 2f       	mov	r18, r24
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	02 2e       	mov	r0, r18
    156a:	02 c0       	rjmp	.+4      	; 0x1570 <DIO_u8SetPinValue+0x1aa>
    156c:	88 0f       	add	r24, r24
    156e:	99 1f       	adc	r25, r25
    1570:	0a 94       	dec	r0
    1572:	e2 f7       	brpl	.-8      	; 0x156c <DIO_u8SetPinValue+0x1a6>
    1574:	84 2b       	or	r24, r20
    1576:	8c 93       	st	X, r24
    1578:	1d c0       	rjmp	.+58     	; 0x15b4 <DIO_u8SetPinValue+0x1ee>
		else if(Copy_u8Value == DIO_u8PIN_LOW)
    157a:	8c 81       	ldd	r24, Y+4	; 0x04
    157c:	88 23       	and	r24, r24
    157e:	a9 f4       	brne	.+42     	; 0x15aa <DIO_u8SetPinValue+0x1e4>
			CLR_BIT(PORTD,Copy_u8Pin);
    1580:	a2 e3       	ldi	r26, 0x32	; 50
    1582:	b0 e0       	ldi	r27, 0x00	; 0
    1584:	e2 e3       	ldi	r30, 0x32	; 50
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	48 2f       	mov	r20, r24
    158c:	8b 81       	ldd	r24, Y+3	; 0x03
    158e:	28 2f       	mov	r18, r24
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	02 2e       	mov	r0, r18
    1598:	02 c0       	rjmp	.+4      	; 0x159e <DIO_u8SetPinValue+0x1d8>
    159a:	88 0f       	add	r24, r24
    159c:	99 1f       	adc	r25, r25
    159e:	0a 94       	dec	r0
    15a0:	e2 f7       	brpl	.-8      	; 0x159a <DIO_u8SetPinValue+0x1d4>
    15a2:	80 95       	com	r24
    15a4:	84 23       	and	r24, r20
    15a6:	8c 93       	st	X, r24
    15a8:	05 c0       	rjmp	.+10     	; 0x15b4 <DIO_u8SetPinValue+0x1ee>
		else
			Local_u8ErrorState = 1;
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	89 83       	std	Y+1, r24	; 0x01
    15ae:	02 c0       	rjmp	.+4      	; 0x15b4 <DIO_u8SetPinValue+0x1ee>
		break;

	default:
		Local_u8ErrorState = 1;
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return Local_u8ErrorState;
    15b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    15b6:	26 96       	adiw	r28, 0x06	; 6
    15b8:	0f b6       	in	r0, 0x3f	; 63
    15ba:	f8 94       	cli
    15bc:	de bf       	out	0x3e, r29	; 62
    15be:	0f be       	out	0x3f, r0	; 63
    15c0:	cd bf       	out	0x3d, r28	; 61
    15c2:	cf 91       	pop	r28
    15c4:	df 91       	pop	r29
    15c6:	08 95       	ret

000015c8 <DIO_u8SetPortValue>:

/*************************************************************/

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    15c8:	df 93       	push	r29
    15ca:	cf 93       	push	r28
    15cc:	00 d0       	rcall	.+0      	; 0x15ce <DIO_u8SetPortValue+0x6>
    15ce:	00 d0       	rcall	.+0      	; 0x15d0 <DIO_u8SetPortValue+0x8>
    15d0:	0f 92       	push	r0
    15d2:	cd b7       	in	r28, 0x3d	; 61
    15d4:	de b7       	in	r29, 0x3e	; 62
    15d6:	8a 83       	std	Y+2, r24	; 0x02
    15d8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState;
	switch(Copy_u8Port)
    15da:	8a 81       	ldd	r24, Y+2	; 0x02
    15dc:	28 2f       	mov	r18, r24
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	3d 83       	std	Y+5, r19	; 0x05
    15e2:	2c 83       	std	Y+4, r18	; 0x04
    15e4:	8c 81       	ldd	r24, Y+4	; 0x04
    15e6:	9d 81       	ldd	r25, Y+5	; 0x05
    15e8:	81 30       	cpi	r24, 0x01	; 1
    15ea:	91 05       	cpc	r25, r1
    15ec:	d9 f0       	breq	.+54     	; 0x1624 <DIO_u8SetPortValue+0x5c>
    15ee:	2c 81       	ldd	r18, Y+4	; 0x04
    15f0:	3d 81       	ldd	r19, Y+5	; 0x05
    15f2:	22 30       	cpi	r18, 0x02	; 2
    15f4:	31 05       	cpc	r19, r1
    15f6:	2c f4       	brge	.+10     	; 0x1602 <DIO_u8SetPortValue+0x3a>
    15f8:	8c 81       	ldd	r24, Y+4	; 0x04
    15fa:	9d 81       	ldd	r25, Y+5	; 0x05
    15fc:	00 97       	sbiw	r24, 0x00	; 0
    15fe:	61 f0       	breq	.+24     	; 0x1618 <DIO_u8SetPortValue+0x50>
    1600:	23 c0       	rjmp	.+70     	; 0x1648 <DIO_u8SetPortValue+0x80>
    1602:	2c 81       	ldd	r18, Y+4	; 0x04
    1604:	3d 81       	ldd	r19, Y+5	; 0x05
    1606:	22 30       	cpi	r18, 0x02	; 2
    1608:	31 05       	cpc	r19, r1
    160a:	91 f0       	breq	.+36     	; 0x1630 <DIO_u8SetPortValue+0x68>
    160c:	8c 81       	ldd	r24, Y+4	; 0x04
    160e:	9d 81       	ldd	r25, Y+5	; 0x05
    1610:	83 30       	cpi	r24, 0x03	; 3
    1612:	91 05       	cpc	r25, r1
    1614:	99 f0       	breq	.+38     	; 0x163c <DIO_u8SetPortValue+0x74>
    1616:	18 c0       	rjmp	.+48     	; 0x1648 <DIO_u8SetPortValue+0x80>
	{
	case DIO_u8PORTA:
		PORTA = Copy_u8Value;
    1618:	eb e3       	ldi	r30, 0x3B	; 59
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	8b 81       	ldd	r24, Y+3	; 0x03
    161e:	80 83       	st	Z, r24
		Local_u8ErrorState = 0;
    1620:	19 82       	std	Y+1, r1	; 0x01
    1622:	14 c0       	rjmp	.+40     	; 0x164c <DIO_u8SetPortValue+0x84>
		break;

	case DIO_u8PORTB:
		PORTB = Copy_u8Value;
    1624:	e8 e3       	ldi	r30, 0x38	; 56
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	8b 81       	ldd	r24, Y+3	; 0x03
    162a:	80 83       	st	Z, r24
		Local_u8ErrorState = 0;
    162c:	19 82       	std	Y+1, r1	; 0x01
    162e:	0e c0       	rjmp	.+28     	; 0x164c <DIO_u8SetPortValue+0x84>
		break;

	case DIO_u8PORTC:
		PORTC = Copy_u8Value;
    1630:	e5 e3       	ldi	r30, 0x35	; 53
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	8b 81       	ldd	r24, Y+3	; 0x03
    1636:	80 83       	st	Z, r24
		Local_u8ErrorState = 0;
    1638:	19 82       	std	Y+1, r1	; 0x01
    163a:	08 c0       	rjmp	.+16     	; 0x164c <DIO_u8SetPortValue+0x84>
		break;

	case DIO_u8PORTD:
		PORTD = Copy_u8Value;
    163c:	e2 e3       	ldi	r30, 0x32	; 50
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	8b 81       	ldd	r24, Y+3	; 0x03
    1642:	80 83       	st	Z, r24
		Local_u8ErrorState = 0;
    1644:	19 82       	std	Y+1, r1	; 0x01
    1646:	02 c0       	rjmp	.+4      	; 0x164c <DIO_u8SetPortValue+0x84>
		break;

	default:
		Local_u8ErrorState = 1;
    1648:	81 e0       	ldi	r24, 0x01	; 1
    164a:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return Local_u8ErrorState;
    164c:	89 81       	ldd	r24, Y+1	; 0x01
}
    164e:	0f 90       	pop	r0
    1650:	0f 90       	pop	r0
    1652:	0f 90       	pop	r0
    1654:	0f 90       	pop	r0
    1656:	0f 90       	pop	r0
    1658:	cf 91       	pop	r28
    165a:	df 91       	pop	r29
    165c:	08 95       	ret

0000165e <DIO_u8GetPinValue>:

/*************************************************************/
u8 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8* Copy_pu8Value)
{
    165e:	df 93       	push	r29
    1660:	cf 93       	push	r28
    1662:	cd b7       	in	r28, 0x3d	; 61
    1664:	de b7       	in	r29, 0x3e	; 62
    1666:	27 97       	sbiw	r28, 0x07	; 7
    1668:	0f b6       	in	r0, 0x3f	; 63
    166a:	f8 94       	cli
    166c:	de bf       	out	0x3e, r29	; 62
    166e:	0f be       	out	0x3f, r0	; 63
    1670:	cd bf       	out	0x3d, r28	; 61
    1672:	8a 83       	std	Y+2, r24	; 0x02
    1674:	6b 83       	std	Y+3, r22	; 0x03
    1676:	5d 83       	std	Y+5, r21	; 0x05
    1678:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState;

	if(Copy_pu8Value == NULL || Copy_u8Pin > DIO_u8PIN7)
    167a:	8c 81       	ldd	r24, Y+4	; 0x04
    167c:	9d 81       	ldd	r25, Y+5	; 0x05
    167e:	00 97       	sbiw	r24, 0x00	; 0
    1680:	19 f0       	breq	.+6      	; 0x1688 <DIO_u8GetPinValue+0x2a>
    1682:	8b 81       	ldd	r24, Y+3	; 0x03
    1684:	88 30       	cpi	r24, 0x08	; 8
    1686:	18 f0       	brcs	.+6      	; 0x168e <DIO_u8GetPinValue+0x30>
	{
		Local_u8ErrorState = 1;
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	89 83       	std	Y+1, r24	; 0x01
    168c:	77 c0       	rjmp	.+238    	; 0x177c <DIO_u8GetPinValue+0x11e>
	}
	else
	{
		switch(Copy_u8Port)
    168e:	8a 81       	ldd	r24, Y+2	; 0x02
    1690:	28 2f       	mov	r18, r24
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	3f 83       	std	Y+7, r19	; 0x07
    1696:	2e 83       	std	Y+6, r18	; 0x06
    1698:	4e 81       	ldd	r20, Y+6	; 0x06
    169a:	5f 81       	ldd	r21, Y+7	; 0x07
    169c:	41 30       	cpi	r20, 0x01	; 1
    169e:	51 05       	cpc	r21, r1
    16a0:	61 f1       	breq	.+88     	; 0x16fa <DIO_u8GetPinValue+0x9c>
    16a2:	8e 81       	ldd	r24, Y+6	; 0x06
    16a4:	9f 81       	ldd	r25, Y+7	; 0x07
    16a6:	82 30       	cpi	r24, 0x02	; 2
    16a8:	91 05       	cpc	r25, r1
    16aa:	34 f4       	brge	.+12     	; 0x16b8 <DIO_u8GetPinValue+0x5a>
    16ac:	2e 81       	ldd	r18, Y+6	; 0x06
    16ae:	3f 81       	ldd	r19, Y+7	; 0x07
    16b0:	21 15       	cp	r18, r1
    16b2:	31 05       	cpc	r19, r1
    16b4:	69 f0       	breq	.+26     	; 0x16d0 <DIO_u8GetPinValue+0x72>
    16b6:	60 c0       	rjmp	.+192    	; 0x1778 <DIO_u8GetPinValue+0x11a>
    16b8:	4e 81       	ldd	r20, Y+6	; 0x06
    16ba:	5f 81       	ldd	r21, Y+7	; 0x07
    16bc:	42 30       	cpi	r20, 0x02	; 2
    16be:	51 05       	cpc	r21, r1
    16c0:	89 f1       	breq	.+98     	; 0x1724 <DIO_u8GetPinValue+0xc6>
    16c2:	8e 81       	ldd	r24, Y+6	; 0x06
    16c4:	9f 81       	ldd	r25, Y+7	; 0x07
    16c6:	83 30       	cpi	r24, 0x03	; 3
    16c8:	91 05       	cpc	r25, r1
    16ca:	09 f4       	brne	.+2      	; 0x16ce <DIO_u8GetPinValue+0x70>
    16cc:	40 c0       	rjmp	.+128    	; 0x174e <DIO_u8GetPinValue+0xf0>
    16ce:	54 c0       	rjmp	.+168    	; 0x1778 <DIO_u8GetPinValue+0x11a>
		{
		case DIO_u8PORTA:
			*Copy_pu8Value = GET_BIT(PINA, Copy_u8Pin);
    16d0:	e9 e3       	ldi	r30, 0x39	; 57
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	80 81       	ld	r24, Z
    16d6:	28 2f       	mov	r18, r24
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	8b 81       	ldd	r24, Y+3	; 0x03
    16dc:	88 2f       	mov	r24, r24
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	a9 01       	movw	r20, r18
    16e2:	02 c0       	rjmp	.+4      	; 0x16e8 <DIO_u8GetPinValue+0x8a>
    16e4:	55 95       	asr	r21
    16e6:	47 95       	ror	r20
    16e8:	8a 95       	dec	r24
    16ea:	e2 f7       	brpl	.-8      	; 0x16e4 <DIO_u8GetPinValue+0x86>
    16ec:	ca 01       	movw	r24, r20
    16ee:	81 70       	andi	r24, 0x01	; 1
    16f0:	ec 81       	ldd	r30, Y+4	; 0x04
    16f2:	fd 81       	ldd	r31, Y+5	; 0x05
    16f4:	80 83       	st	Z, r24
			Local_u8ErrorState = 0;
    16f6:	19 82       	std	Y+1, r1	; 0x01
    16f8:	41 c0       	rjmp	.+130    	; 0x177c <DIO_u8GetPinValue+0x11e>
			break;

		case DIO_u8PORTB:
			*Copy_pu8Value = GET_BIT(PINB, Copy_u8Pin);
    16fa:	e6 e3       	ldi	r30, 0x36	; 54
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	80 81       	ld	r24, Z
    1700:	28 2f       	mov	r18, r24
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	8b 81       	ldd	r24, Y+3	; 0x03
    1706:	88 2f       	mov	r24, r24
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	a9 01       	movw	r20, r18
    170c:	02 c0       	rjmp	.+4      	; 0x1712 <DIO_u8GetPinValue+0xb4>
    170e:	55 95       	asr	r21
    1710:	47 95       	ror	r20
    1712:	8a 95       	dec	r24
    1714:	e2 f7       	brpl	.-8      	; 0x170e <DIO_u8GetPinValue+0xb0>
    1716:	ca 01       	movw	r24, r20
    1718:	81 70       	andi	r24, 0x01	; 1
    171a:	ec 81       	ldd	r30, Y+4	; 0x04
    171c:	fd 81       	ldd	r31, Y+5	; 0x05
    171e:	80 83       	st	Z, r24
			Local_u8ErrorState = 0;
    1720:	19 82       	std	Y+1, r1	; 0x01
    1722:	2c c0       	rjmp	.+88     	; 0x177c <DIO_u8GetPinValue+0x11e>
			break;

		case DIO_u8PORTC:
			*Copy_pu8Value = GET_BIT(PINC, Copy_u8Pin);
    1724:	e3 e3       	ldi	r30, 0x33	; 51
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	80 81       	ld	r24, Z
    172a:	28 2f       	mov	r18, r24
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	8b 81       	ldd	r24, Y+3	; 0x03
    1730:	88 2f       	mov	r24, r24
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	a9 01       	movw	r20, r18
    1736:	02 c0       	rjmp	.+4      	; 0x173c <DIO_u8GetPinValue+0xde>
    1738:	55 95       	asr	r21
    173a:	47 95       	ror	r20
    173c:	8a 95       	dec	r24
    173e:	e2 f7       	brpl	.-8      	; 0x1738 <DIO_u8GetPinValue+0xda>
    1740:	ca 01       	movw	r24, r20
    1742:	81 70       	andi	r24, 0x01	; 1
    1744:	ec 81       	ldd	r30, Y+4	; 0x04
    1746:	fd 81       	ldd	r31, Y+5	; 0x05
    1748:	80 83       	st	Z, r24
			Local_u8ErrorState = 0;
    174a:	19 82       	std	Y+1, r1	; 0x01
    174c:	17 c0       	rjmp	.+46     	; 0x177c <DIO_u8GetPinValue+0x11e>
			break;

		case DIO_u8PORTD:
			*Copy_pu8Value = GET_BIT(PIND, Copy_u8Pin);
    174e:	e0 e3       	ldi	r30, 0x30	; 48
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	80 81       	ld	r24, Z
    1754:	28 2f       	mov	r18, r24
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	8b 81       	ldd	r24, Y+3	; 0x03
    175a:	88 2f       	mov	r24, r24
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	a9 01       	movw	r20, r18
    1760:	02 c0       	rjmp	.+4      	; 0x1766 <DIO_u8GetPinValue+0x108>
    1762:	55 95       	asr	r21
    1764:	47 95       	ror	r20
    1766:	8a 95       	dec	r24
    1768:	e2 f7       	brpl	.-8      	; 0x1762 <DIO_u8GetPinValue+0x104>
    176a:	ca 01       	movw	r24, r20
    176c:	81 70       	andi	r24, 0x01	; 1
    176e:	ec 81       	ldd	r30, Y+4	; 0x04
    1770:	fd 81       	ldd	r31, Y+5	; 0x05
    1772:	80 83       	st	Z, r24
			Local_u8ErrorState = 0;
    1774:	19 82       	std	Y+1, r1	; 0x01
    1776:	02 c0       	rjmp	.+4      	; 0x177c <DIO_u8GetPinValue+0x11e>
			break;

		default:
			Local_u8ErrorState = 1;
    1778:	81 e0       	ldi	r24, 0x01	; 1
    177a:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return Local_u8ErrorState;
    177c:	89 81       	ldd	r24, Y+1	; 0x01
}
    177e:	27 96       	adiw	r28, 0x07	; 7
    1780:	0f b6       	in	r0, 0x3f	; 63
    1782:	f8 94       	cli
    1784:	de bf       	out	0x3e, r29	; 62
    1786:	0f be       	out	0x3f, r0	; 63
    1788:	cd bf       	out	0x3d, r28	; 61
    178a:	cf 91       	pop	r28
    178c:	df 91       	pop	r29
    178e:	08 95       	ret

00001790 <DIO_u8TogglePinValue>:

/****************************************************************/

u8 DIO_u8TogglePinValue(u8 Copy_u8Port, u8 Copy_u8Pin)
{
    1790:	df 93       	push	r29
    1792:	cf 93       	push	r28
    1794:	00 d0       	rcall	.+0      	; 0x1796 <DIO_u8TogglePinValue+0x6>
    1796:	00 d0       	rcall	.+0      	; 0x1798 <DIO_u8TogglePinValue+0x8>
    1798:	0f 92       	push	r0
    179a:	cd b7       	in	r28, 0x3d	; 61
    179c:	de b7       	in	r29, 0x3e	; 62
    179e:	8a 83       	std	Y+2, r24	; 0x02
    17a0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState;
	switch(Copy_u8Port)
    17a2:	8a 81       	ldd	r24, Y+2	; 0x02
    17a4:	28 2f       	mov	r18, r24
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	3d 83       	std	Y+5, r19	; 0x05
    17aa:	2c 83       	std	Y+4, r18	; 0x04
    17ac:	8c 81       	ldd	r24, Y+4	; 0x04
    17ae:	9d 81       	ldd	r25, Y+5	; 0x05
    17b0:	81 30       	cpi	r24, 0x01	; 1
    17b2:	91 05       	cpc	r25, r1
    17b4:	59 f1       	breq	.+86     	; 0x180c <DIO_u8TogglePinValue+0x7c>
    17b6:	2c 81       	ldd	r18, Y+4	; 0x04
    17b8:	3d 81       	ldd	r19, Y+5	; 0x05
    17ba:	22 30       	cpi	r18, 0x02	; 2
    17bc:	31 05       	cpc	r19, r1
    17be:	2c f4       	brge	.+10     	; 0x17ca <DIO_u8TogglePinValue+0x3a>
    17c0:	8c 81       	ldd	r24, Y+4	; 0x04
    17c2:	9d 81       	ldd	r25, Y+5	; 0x05
    17c4:	00 97       	sbiw	r24, 0x00	; 0
    17c6:	69 f0       	breq	.+26     	; 0x17e2 <DIO_u8TogglePinValue+0x52>
    17c8:	60 c0       	rjmp	.+192    	; 0x188a <DIO_u8TogglePinValue+0xfa>
    17ca:	2c 81       	ldd	r18, Y+4	; 0x04
    17cc:	3d 81       	ldd	r19, Y+5	; 0x05
    17ce:	22 30       	cpi	r18, 0x02	; 2
    17d0:	31 05       	cpc	r19, r1
    17d2:	89 f1       	breq	.+98     	; 0x1836 <DIO_u8TogglePinValue+0xa6>
    17d4:	8c 81       	ldd	r24, Y+4	; 0x04
    17d6:	9d 81       	ldd	r25, Y+5	; 0x05
    17d8:	83 30       	cpi	r24, 0x03	; 3
    17da:	91 05       	cpc	r25, r1
    17dc:	09 f4       	brne	.+2      	; 0x17e0 <DIO_u8TogglePinValue+0x50>
    17de:	40 c0       	rjmp	.+128    	; 0x1860 <DIO_u8TogglePinValue+0xd0>
    17e0:	54 c0       	rjmp	.+168    	; 0x188a <DIO_u8TogglePinValue+0xfa>
	{
	case DIO_u8PORTA:
		TOGGLE_BIT(PORTA, Copy_u8Pin);
    17e2:	ab e3       	ldi	r26, 0x3B	; 59
    17e4:	b0 e0       	ldi	r27, 0x00	; 0
    17e6:	eb e3       	ldi	r30, 0x3B	; 59
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	80 81       	ld	r24, Z
    17ec:	48 2f       	mov	r20, r24
    17ee:	8b 81       	ldd	r24, Y+3	; 0x03
    17f0:	28 2f       	mov	r18, r24
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	02 2e       	mov	r0, r18
    17fa:	02 c0       	rjmp	.+4      	; 0x1800 <DIO_u8TogglePinValue+0x70>
    17fc:	88 0f       	add	r24, r24
    17fe:	99 1f       	adc	r25, r25
    1800:	0a 94       	dec	r0
    1802:	e2 f7       	brpl	.-8      	; 0x17fc <DIO_u8TogglePinValue+0x6c>
    1804:	84 27       	eor	r24, r20
    1806:	8c 93       	st	X, r24
		Local_u8ErrorState = 0;
    1808:	19 82       	std	Y+1, r1	; 0x01
    180a:	41 c0       	rjmp	.+130    	; 0x188e <DIO_u8TogglePinValue+0xfe>
		break;

	case DIO_u8PORTB:
		TOGGLE_BIT(PORTB, Copy_u8Pin);
    180c:	a8 e3       	ldi	r26, 0x38	; 56
    180e:	b0 e0       	ldi	r27, 0x00	; 0
    1810:	e8 e3       	ldi	r30, 0x38	; 56
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	80 81       	ld	r24, Z
    1816:	48 2f       	mov	r20, r24
    1818:	8b 81       	ldd	r24, Y+3	; 0x03
    181a:	28 2f       	mov	r18, r24
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	81 e0       	ldi	r24, 0x01	; 1
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	02 2e       	mov	r0, r18
    1824:	02 c0       	rjmp	.+4      	; 0x182a <DIO_u8TogglePinValue+0x9a>
    1826:	88 0f       	add	r24, r24
    1828:	99 1f       	adc	r25, r25
    182a:	0a 94       	dec	r0
    182c:	e2 f7       	brpl	.-8      	; 0x1826 <DIO_u8TogglePinValue+0x96>
    182e:	84 27       	eor	r24, r20
    1830:	8c 93       	st	X, r24
		Local_u8ErrorState = 0;
    1832:	19 82       	std	Y+1, r1	; 0x01
    1834:	2c c0       	rjmp	.+88     	; 0x188e <DIO_u8TogglePinValue+0xfe>
		break;

	case DIO_u8PORTC:
		TOGGLE_BIT(PORTC, Copy_u8Pin);;
    1836:	a5 e3       	ldi	r26, 0x35	; 53
    1838:	b0 e0       	ldi	r27, 0x00	; 0
    183a:	e5 e3       	ldi	r30, 0x35	; 53
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	80 81       	ld	r24, Z
    1840:	48 2f       	mov	r20, r24
    1842:	8b 81       	ldd	r24, Y+3	; 0x03
    1844:	28 2f       	mov	r18, r24
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	02 2e       	mov	r0, r18
    184e:	02 c0       	rjmp	.+4      	; 0x1854 <DIO_u8TogglePinValue+0xc4>
    1850:	88 0f       	add	r24, r24
    1852:	99 1f       	adc	r25, r25
    1854:	0a 94       	dec	r0
    1856:	e2 f7       	brpl	.-8      	; 0x1850 <DIO_u8TogglePinValue+0xc0>
    1858:	84 27       	eor	r24, r20
    185a:	8c 93       	st	X, r24
		Local_u8ErrorState = 0;
    185c:	19 82       	std	Y+1, r1	; 0x01
    185e:	17 c0       	rjmp	.+46     	; 0x188e <DIO_u8TogglePinValue+0xfe>
		break;

	case DIO_u8PORTD:
		TOGGLE_BIT(PORTD, Copy_u8Pin);
    1860:	a2 e3       	ldi	r26, 0x32	; 50
    1862:	b0 e0       	ldi	r27, 0x00	; 0
    1864:	e2 e3       	ldi	r30, 0x32	; 50
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	80 81       	ld	r24, Z
    186a:	48 2f       	mov	r20, r24
    186c:	8b 81       	ldd	r24, Y+3	; 0x03
    186e:	28 2f       	mov	r18, r24
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	02 2e       	mov	r0, r18
    1878:	02 c0       	rjmp	.+4      	; 0x187e <DIO_u8TogglePinValue+0xee>
    187a:	88 0f       	add	r24, r24
    187c:	99 1f       	adc	r25, r25
    187e:	0a 94       	dec	r0
    1880:	e2 f7       	brpl	.-8      	; 0x187a <DIO_u8TogglePinValue+0xea>
    1882:	84 27       	eor	r24, r20
    1884:	8c 93       	st	X, r24
		Local_u8ErrorState = 0;
    1886:	19 82       	std	Y+1, r1	; 0x01
    1888:	02 c0       	rjmp	.+4      	; 0x188e <DIO_u8TogglePinValue+0xfe>
		break;

	default:
		Local_u8ErrorState = 1;
    188a:	81 e0       	ldi	r24, 0x01	; 1
    188c:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return Local_u8ErrorState;	
    188e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1890:	0f 90       	pop	r0
    1892:	0f 90       	pop	r0
    1894:	0f 90       	pop	r0
    1896:	0f 90       	pop	r0
    1898:	0f 90       	pop	r0
    189a:	cf 91       	pop	r28
    189c:	df 91       	pop	r29
    189e:	08 95       	ret

000018a0 <KPD_u8GetPressedKey>:
#include "KEYPAD_config.h"
#include "KEYPAD_interface.h"
#include "KEYPAD_private.h"

u8 KPD_u8GetPressedKey(void)
{
    18a0:	df 93       	push	r29
    18a2:	cf 93       	push	r28
    18a4:	00 d0       	rcall	.+0      	; 0x18a6 <KPD_u8GetPressedKey+0x6>
    18a6:	00 d0       	rcall	.+0      	; 0x18a8 <KPD_u8GetPressedKey+0x8>
    18a8:	0f 92       	push	r0
    18aa:	cd b7       	in	r28, 0x3d	; 61
    18ac:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8PressedKey = KPD_NO_PRESSED_KEY, Local_u8ColIdx, Local_u8RowIdx, Local_u8PinState;
    18ae:	8f ef       	ldi	r24, 0xFF	; 255
    18b0:	8b 83       	std	Y+3, r24	; 0x03
	static u8 Local_u8KPDArr[ROW_NUM][COLUMN_NUM] = KPD_ARR_VAL;
	static u8 Local_u8KPDColumnArr[COLUMN_NUM] = {KPD_COLUMN0_PIN, KPD_COLUMN1_PIN, KPD_COLUMN2_PIN};
	static u8 Local_u8KPDRowArr[ROW_NUM] = {KPD_ROW0_PIN, KPD_ROW1_PIN, KPD_ROW2_PIN, KPD_ROW3_PIN};

	for(Local_u8ColIdx = 0; Local_u8ColIdx<COLUMN_NUM; Local_u8ColIdx++)
    18b2:	1a 82       	std	Y+2, r1	; 0x02
    18b4:	5e c0       	rjmp	.+188    	; 0x1972 <KPD_u8GetPressedKey+0xd2>
	{
		/*activate current column*/
		DIO_u8SetPinValue(KPD_PORT, Local_u8KPDColumnArr[Local_u8ColIdx], DIO_u8PIN_LOW);
    18b6:	8a 81       	ldd	r24, Y+2	; 0x02
    18b8:	88 2f       	mov	r24, r24
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	fc 01       	movw	r30, r24
    18be:	e8 50       	subi	r30, 0x08	; 8
    18c0:	fe 4f       	sbci	r31, 0xFE	; 254
    18c2:	90 81       	ld	r25, Z
    18c4:	82 e0       	ldi	r24, 0x02	; 2
    18c6:	69 2f       	mov	r22, r25
    18c8:	40 e0       	ldi	r20, 0x00	; 0
    18ca:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_u8SetPinValue>

		for(Local_u8RowIdx = 0; Local_u8RowIdx<ROW_NUM; Local_u8RowIdx++)
    18ce:	19 82       	std	Y+1, r1	; 0x01
    18d0:	3d c0       	rjmp	.+122    	; 0x194c <KPD_u8GetPressedKey+0xac>
		{
			/*read the current row*/
			DIO_u8GetPinValue(KPD_PORT, Local_u8KPDRowArr[Local_u8RowIdx], &Local_u8PinState);
    18d2:	89 81       	ldd	r24, Y+1	; 0x01
    18d4:	88 2f       	mov	r24, r24
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	fc 01       	movw	r30, r24
    18da:	ec 50       	subi	r30, 0x0C	; 12
    18dc:	fe 4f       	sbci	r31, 0xFE	; 254
    18de:	90 81       	ld	r25, Z
    18e0:	9e 01       	movw	r18, r28
    18e2:	2c 5f       	subi	r18, 0xFC	; 252
    18e4:	3f 4f       	sbci	r19, 0xFF	; 255
    18e6:	82 e0       	ldi	r24, 0x02	; 2
    18e8:	69 2f       	mov	r22, r25
    18ea:	a9 01       	movw	r20, r18
    18ec:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_u8GetPinValue>

			/*check if the switch is pressed or not*/
			if(DIO_u8PIN_LOW == Local_u8PinState)
    18f0:	8c 81       	ldd	r24, Y+4	; 0x04
    18f2:	88 23       	and	r24, r24
    18f4:	41 f5       	brne	.+80     	; 0x1946 <KPD_u8GetPressedKey+0xa6>
			{
				Local_u8PressedKey = Local_u8KPDArr[Local_u8RowIdx][Local_u8ColIdx];
    18f6:	89 81       	ldd	r24, Y+1	; 0x01
    18f8:	28 2f       	mov	r18, r24
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	8a 81       	ldd	r24, Y+2	; 0x02
    18fe:	48 2f       	mov	r20, r24
    1900:	50 e0       	ldi	r21, 0x00	; 0
    1902:	c9 01       	movw	r24, r18
    1904:	88 0f       	add	r24, r24
    1906:	99 1f       	adc	r25, r25
    1908:	82 0f       	add	r24, r18
    190a:	93 1f       	adc	r25, r19
    190c:	84 0f       	add	r24, r20
    190e:	95 1f       	adc	r25, r21
    1910:	fc 01       	movw	r30, r24
    1912:	e5 50       	subi	r30, 0x05	; 5
    1914:	fe 4f       	sbci	r31, 0xFE	; 254
    1916:	80 81       	ld	r24, Z
    1918:	8b 83       	std	Y+3, r24	; 0x03
    191a:	0f c0       	rjmp	.+30     	; 0x193a <KPD_u8GetPressedKey+0x9a>

				/*Polling (busy waiting) until the key is released*/
				while(DIO_u8PIN_LOW == Local_u8PinState)
				{
					DIO_u8GetPinValue(KPD_PORT, Local_u8KPDRowArr[Local_u8RowIdx], &Local_u8PinState);
    191c:	89 81       	ldd	r24, Y+1	; 0x01
    191e:	88 2f       	mov	r24, r24
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	fc 01       	movw	r30, r24
    1924:	ec 50       	subi	r30, 0x0C	; 12
    1926:	fe 4f       	sbci	r31, 0xFE	; 254
    1928:	90 81       	ld	r25, Z
    192a:	9e 01       	movw	r18, r28
    192c:	2c 5f       	subi	r18, 0xFC	; 252
    192e:	3f 4f       	sbci	r19, 0xFF	; 255
    1930:	82 e0       	ldi	r24, 0x02	; 2
    1932:	69 2f       	mov	r22, r25
    1934:	a9 01       	movw	r20, r18
    1936:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_u8GetPinValue>
			if(DIO_u8PIN_LOW == Local_u8PinState)
			{
				Local_u8PressedKey = Local_u8KPDArr[Local_u8RowIdx][Local_u8ColIdx];

				/*Polling (busy waiting) until the key is released*/
				while(DIO_u8PIN_LOW == Local_u8PinState)
    193a:	8c 81       	ldd	r24, Y+4	; 0x04
    193c:	88 23       	and	r24, r24
    193e:	71 f3       	breq	.-36     	; 0x191c <KPD_u8GetPressedKey+0x7c>
				{
					DIO_u8GetPinValue(KPD_PORT, Local_u8KPDRowArr[Local_u8RowIdx], &Local_u8PinState);
				}
				return Local_u8PressedKey;	//for avoiding debouncing & avoiding 2 pressed buttons at the same time
    1940:	8b 81       	ldd	r24, Y+3	; 0x03
    1942:	8d 83       	std	Y+5, r24	; 0x05
    1944:	1c c0       	rjmp	.+56     	; 0x197e <KPD_u8GetPressedKey+0xde>
	for(Local_u8ColIdx = 0; Local_u8ColIdx<COLUMN_NUM; Local_u8ColIdx++)
	{
		/*activate current column*/
		DIO_u8SetPinValue(KPD_PORT, Local_u8KPDColumnArr[Local_u8ColIdx], DIO_u8PIN_LOW);

		for(Local_u8RowIdx = 0; Local_u8RowIdx<ROW_NUM; Local_u8RowIdx++)
    1946:	89 81       	ldd	r24, Y+1	; 0x01
    1948:	8f 5f       	subi	r24, 0xFF	; 255
    194a:	89 83       	std	Y+1, r24	; 0x01
    194c:	89 81       	ldd	r24, Y+1	; 0x01
    194e:	84 30       	cpi	r24, 0x04	; 4
    1950:	08 f4       	brcc	.+2      	; 0x1954 <KPD_u8GetPressedKey+0xb4>
    1952:	bf cf       	rjmp	.-130    	; 0x18d2 <KPD_u8GetPressedKey+0x32>
				}
				return Local_u8PressedKey;	//for avoiding debouncing & avoiding 2 pressed buttons at the same time
			}
		}
		/*deactivate current column*/
		DIO_u8SetPinValue(KPD_PORT, Local_u8KPDColumnArr[Local_u8ColIdx], DIO_u8PIN_HIGH);
    1954:	8a 81       	ldd	r24, Y+2	; 0x02
    1956:	88 2f       	mov	r24, r24
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	fc 01       	movw	r30, r24
    195c:	e8 50       	subi	r30, 0x08	; 8
    195e:	fe 4f       	sbci	r31, 0xFE	; 254
    1960:	90 81       	ld	r25, Z
    1962:	82 e0       	ldi	r24, 0x02	; 2
    1964:	69 2f       	mov	r22, r25
    1966:	41 e0       	ldi	r20, 0x01	; 1
    1968:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_u8SetPinValue>
	u8 Local_u8PressedKey = KPD_NO_PRESSED_KEY, Local_u8ColIdx, Local_u8RowIdx, Local_u8PinState;
	static u8 Local_u8KPDArr[ROW_NUM][COLUMN_NUM] = KPD_ARR_VAL;
	static u8 Local_u8KPDColumnArr[COLUMN_NUM] = {KPD_COLUMN0_PIN, KPD_COLUMN1_PIN, KPD_COLUMN2_PIN};
	static u8 Local_u8KPDRowArr[ROW_NUM] = {KPD_ROW0_PIN, KPD_ROW1_PIN, KPD_ROW2_PIN, KPD_ROW3_PIN};

	for(Local_u8ColIdx = 0; Local_u8ColIdx<COLUMN_NUM; Local_u8ColIdx++)
    196c:	8a 81       	ldd	r24, Y+2	; 0x02
    196e:	8f 5f       	subi	r24, 0xFF	; 255
    1970:	8a 83       	std	Y+2, r24	; 0x02
    1972:	8a 81       	ldd	r24, Y+2	; 0x02
    1974:	83 30       	cpi	r24, 0x03	; 3
    1976:	08 f4       	brcc	.+2      	; 0x197a <KPD_u8GetPressedKey+0xda>
    1978:	9e cf       	rjmp	.-196    	; 0x18b6 <KPD_u8GetPressedKey+0x16>
			}
		}
		/*deactivate current column*/
		DIO_u8SetPinValue(KPD_PORT, Local_u8KPDColumnArr[Local_u8ColIdx], DIO_u8PIN_HIGH);
	}
	return Local_u8PressedKey;
    197a:	8b 81       	ldd	r24, Y+3	; 0x03
    197c:	8d 83       	std	Y+5, r24	; 0x05
    197e:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1980:	0f 90       	pop	r0
    1982:	0f 90       	pop	r0
    1984:	0f 90       	pop	r0
    1986:	0f 90       	pop	r0
    1988:	0f 90       	pop	r0
    198a:	cf 91       	pop	r28
    198c:	df 91       	pop	r29
    198e:	08 95       	ret

00001990 <PORT_voidInit>:
#include "PORT_private.h"
#include "PORT_interface.h"
#include "PORT_register.h"

void PORT_voidInit(void)
{
    1990:	df 93       	push	r29
    1992:	cf 93       	push	r28
    1994:	cd b7       	in	r28, 0x3d	; 61
    1996:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR;
    1998:	ea e3       	ldi	r30, 0x3A	; 58
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	8f ef       	ldi	r24, 0xFF	; 255
    199e:	80 83       	st	Z, r24
	DDRB = PORTB_DIR;
    19a0:	e7 e3       	ldi	r30, 0x37	; 55
    19a2:	f0 e0       	ldi	r31, 0x00	; 0
    19a4:	87 ec       	ldi	r24, 0xC7	; 199
    19a6:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
    19a8:	e4 e3       	ldi	r30, 0x34	; 52
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	87 e0       	ldi	r24, 0x07	; 7
    19ae:	80 83       	st	Z, r24
	DDRD = PORTD_DIR;
    19b0:	e1 e3       	ldi	r30, 0x31	; 49
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	8f e0       	ldi	r24, 0x0F	; 15
    19b6:	80 83       	st	Z, r24
	
	PORTA = PORTA_INIT_VALUE;
    19b8:	eb e3       	ldi	r30, 0x3B	; 59
    19ba:	f0 e0       	ldi	r31, 0x00	; 0
    19bc:	10 82       	st	Z, r1
	PORTB = PORTB_INIT_VALUE;
    19be:	e8 e3       	ldi	r30, 0x38	; 56
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	10 82       	st	Z, r1
	PORTC = PORTC_INIT_VALUE;
    19c4:	e5 e3       	ldi	r30, 0x35	; 53
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	8f ef       	ldi	r24, 0xFF	; 255
    19ca:	80 83       	st	Z, r24
	PORTD = PORTD_INIT_VALUE;
    19cc:	e2 e3       	ldi	r30, 0x32	; 50
    19ce:	f0 e0       	ldi	r31, 0x00	; 0
    19d0:	10 82       	st	Z, r1
    19d2:	cf 91       	pop	r28
    19d4:	df 91       	pop	r29
    19d6:	08 95       	ret

000019d8 <STEPPER_voidRotateClockWise>:
#include "STEPPER_config.h"
#include "STEPPER_interface.h"
#include <util/delay.h>

void STEPPER_voidRotateClockWise(STEPPER_t* Copy_pSTEPPER_tStepper)
{
    19d8:	df 93       	push	r29
    19da:	cf 93       	push	r28
    19dc:	cd b7       	in	r28, 0x3d	; 61
    19de:	de b7       	in	r29, 0x3e	; 62
    19e0:	c2 54       	subi	r28, 0x42	; 66
    19e2:	d0 40       	sbci	r29, 0x00	; 0
    19e4:	0f b6       	in	r0, 0x3f	; 63
    19e6:	f8 94       	cli
    19e8:	de bf       	out	0x3e, r29	; 62
    19ea:	0f be       	out	0x3f, r0	; 63
    19ec:	cd bf       	out	0x3d, r28	; 61
    19ee:	fe 01       	movw	r30, r28
    19f0:	ef 5b       	subi	r30, 0xBF	; 191
    19f2:	ff 4f       	sbci	r31, 0xFF	; 255
    19f4:	91 83       	std	Z+1, r25	; 0x01
    19f6:	80 83       	st	Z, r24
	/*calculate total number of steps*/
	f32 Local_f32NumberOfSteps;
	Local_f32NumberOfSteps = Copy_pSTEPPER_tStepper->DEGREE / STEPPER_DEGREE_PER_STEP;
    19f8:	fe 01       	movw	r30, r28
    19fa:	ef 5b       	subi	r30, 0xBF	; 191
    19fc:	ff 4f       	sbci	r31, 0xFF	; 255
    19fe:	01 90       	ld	r0, Z+
    1a00:	f0 81       	ld	r31, Z
    1a02:	e0 2d       	mov	r30, r0
    1a04:	85 81       	ldd	r24, Z+5	; 0x05
    1a06:	96 81       	ldd	r25, Z+6	; 0x06
    1a08:	a7 81       	ldd	r26, Z+7	; 0x07
    1a0a:	b0 85       	ldd	r27, Z+8	; 0x08
    1a0c:	bc 01       	movw	r22, r24
    1a0e:	cd 01       	movw	r24, r26
    1a10:	23 e3       	ldi	r18, 0x33	; 51
    1a12:	33 e3       	ldi	r19, 0x33	; 51
    1a14:	43 e3       	ldi	r20, 0x33	; 51
    1a16:	5e e3       	ldi	r21, 0x3E	; 62
    1a18:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1a1c:	dc 01       	movw	r26, r24
    1a1e:	cb 01       	movw	r24, r22
    1a20:	fe 01       	movw	r30, r28
    1a22:	fd 96       	adiw	r30, 0x3d	; 61
    1a24:	80 83       	st	Z, r24
    1a26:	91 83       	std	Z+1, r25	; 0x01
    1a28:	a2 83       	std	Z+2, r26	; 0x02
    1a2a:	b3 83       	std	Z+3, r27	; 0x03

	/*calculate number of iterations to reach the required angle*/
	u16 Local_u8NumberOfIterations = Local_f32NumberOfSteps / 4;
    1a2c:	fe 01       	movw	r30, r28
    1a2e:	fd 96       	adiw	r30, 0x3d	; 61
    1a30:	60 81       	ld	r22, Z
    1a32:	71 81       	ldd	r23, Z+1	; 0x01
    1a34:	82 81       	ldd	r24, Z+2	; 0x02
    1a36:	93 81       	ldd	r25, Z+3	; 0x03
    1a38:	20 e0       	ldi	r18, 0x00	; 0
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	40 e8       	ldi	r20, 0x80	; 128
    1a3e:	50 e4       	ldi	r21, 0x40	; 64
    1a40:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1a44:	dc 01       	movw	r26, r24
    1a46:	cb 01       	movw	r24, r22
    1a48:	bc 01       	movw	r22, r24
    1a4a:	cd 01       	movw	r24, r26
    1a4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a50:	dc 01       	movw	r26, r24
    1a52:	cb 01       	movw	r24, r22
    1a54:	9c af       	std	Y+60, r25	; 0x3c
    1a56:	8b af       	std	Y+59, r24	; 0x3b

	u16 Local_u16Iter;
	for(Local_u16Iter = 0; Local_u16Iter<(u16)Local_u8NumberOfIterations; Local_u16Iter++)
    1a58:	1a ae       	std	Y+58, r1	; 0x3a
    1a5a:	19 ae       	std	Y+57, r1	; 0x39
    1a5c:	ed c2       	rjmp	.+1498   	; 0x2038 <STEPPER_voidRotateClockWise+0x660>
	{
		/*Step 1 in stepper motor*/
		DIO_u8SetPinValue(Copy_pSTEPPER_tStepper->PORT, Copy_pSTEPPER_tStepper->PIN1, DIO_u8PIN_LOW);
    1a5e:	fe 01       	movw	r30, r28
    1a60:	ef 5b       	subi	r30, 0xBF	; 191
    1a62:	ff 4f       	sbci	r31, 0xFF	; 255
    1a64:	01 90       	ld	r0, Z+
    1a66:	f0 81       	ld	r31, Z
    1a68:	e0 2d       	mov	r30, r0
    1a6a:	80 81       	ld	r24, Z
    1a6c:	fe 01       	movw	r30, r28
    1a6e:	ef 5b       	subi	r30, 0xBF	; 191
    1a70:	ff 4f       	sbci	r31, 0xFF	; 255
    1a72:	01 90       	ld	r0, Z+
    1a74:	f0 81       	ld	r31, Z
    1a76:	e0 2d       	mov	r30, r0
    1a78:	91 81       	ldd	r25, Z+1	; 0x01
    1a7a:	69 2f       	mov	r22, r25
    1a7c:	40 e0       	ldi	r20, 0x00	; 0
    1a7e:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Copy_pSTEPPER_tStepper->PORT, Copy_pSTEPPER_tStepper->PIN2, DIO_u8PIN_HIGH);
    1a82:	fe 01       	movw	r30, r28
    1a84:	ef 5b       	subi	r30, 0xBF	; 191
    1a86:	ff 4f       	sbci	r31, 0xFF	; 255
    1a88:	01 90       	ld	r0, Z+
    1a8a:	f0 81       	ld	r31, Z
    1a8c:	e0 2d       	mov	r30, r0
    1a8e:	80 81       	ld	r24, Z
    1a90:	fe 01       	movw	r30, r28
    1a92:	ef 5b       	subi	r30, 0xBF	; 191
    1a94:	ff 4f       	sbci	r31, 0xFF	; 255
    1a96:	01 90       	ld	r0, Z+
    1a98:	f0 81       	ld	r31, Z
    1a9a:	e0 2d       	mov	r30, r0
    1a9c:	92 81       	ldd	r25, Z+2	; 0x02
    1a9e:	69 2f       	mov	r22, r25
    1aa0:	41 e0       	ldi	r20, 0x01	; 1
    1aa2:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Copy_pSTEPPER_tStepper->PORT, Copy_pSTEPPER_tStepper->PIN3, DIO_u8PIN_HIGH);
    1aa6:	fe 01       	movw	r30, r28
    1aa8:	ef 5b       	subi	r30, 0xBF	; 191
    1aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    1aac:	01 90       	ld	r0, Z+
    1aae:	f0 81       	ld	r31, Z
    1ab0:	e0 2d       	mov	r30, r0
    1ab2:	80 81       	ld	r24, Z
    1ab4:	fe 01       	movw	r30, r28
    1ab6:	ef 5b       	subi	r30, 0xBF	; 191
    1ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aba:	01 90       	ld	r0, Z+
    1abc:	f0 81       	ld	r31, Z
    1abe:	e0 2d       	mov	r30, r0
    1ac0:	93 81       	ldd	r25, Z+3	; 0x03
    1ac2:	69 2f       	mov	r22, r25
    1ac4:	41 e0       	ldi	r20, 0x01	; 1
    1ac6:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Copy_pSTEPPER_tStepper->PORT, Copy_pSTEPPER_tStepper->PIN4, DIO_u8PIN_HIGH);
    1aca:	fe 01       	movw	r30, r28
    1acc:	ef 5b       	subi	r30, 0xBF	; 191
    1ace:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad0:	01 90       	ld	r0, Z+
    1ad2:	f0 81       	ld	r31, Z
    1ad4:	e0 2d       	mov	r30, r0
    1ad6:	80 81       	ld	r24, Z
    1ad8:	fe 01       	movw	r30, r28
    1ada:	ef 5b       	subi	r30, 0xBF	; 191
    1adc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ade:	01 90       	ld	r0, Z+
    1ae0:	f0 81       	ld	r31, Z
    1ae2:	e0 2d       	mov	r30, r0
    1ae4:	94 81       	ldd	r25, Z+4	; 0x04
    1ae6:	69 2f       	mov	r22, r25
    1ae8:	41 e0       	ldi	r20, 0x01	; 1
    1aea:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_u8SetPinValue>
    1aee:	80 e0       	ldi	r24, 0x00	; 0
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	a0 ea       	ldi	r26, 0xA0	; 160
    1af4:	b1 e4       	ldi	r27, 0x41	; 65
    1af6:	8d ab       	std	Y+53, r24	; 0x35
    1af8:	9e ab       	std	Y+54, r25	; 0x36
    1afa:	af ab       	std	Y+55, r26	; 0x37
    1afc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1afe:	6d a9       	ldd	r22, Y+53	; 0x35
    1b00:	7e a9       	ldd	r23, Y+54	; 0x36
    1b02:	8f a9       	ldd	r24, Y+55	; 0x37
    1b04:	98 ad       	ldd	r25, Y+56	; 0x38
    1b06:	20 e0       	ldi	r18, 0x00	; 0
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	4a ef       	ldi	r20, 0xFA	; 250
    1b0c:	54 e4       	ldi	r21, 0x44	; 68
    1b0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b12:	dc 01       	movw	r26, r24
    1b14:	cb 01       	movw	r24, r22
    1b16:	89 ab       	std	Y+49, r24	; 0x31
    1b18:	9a ab       	std	Y+50, r25	; 0x32
    1b1a:	ab ab       	std	Y+51, r26	; 0x33
    1b1c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b1e:	69 a9       	ldd	r22, Y+49	; 0x31
    1b20:	7a a9       	ldd	r23, Y+50	; 0x32
    1b22:	8b a9       	ldd	r24, Y+51	; 0x33
    1b24:	9c a9       	ldd	r25, Y+52	; 0x34
    1b26:	20 e0       	ldi	r18, 0x00	; 0
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	40 e8       	ldi	r20, 0x80	; 128
    1b2c:	5f e3       	ldi	r21, 0x3F	; 63
    1b2e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b32:	88 23       	and	r24, r24
    1b34:	2c f4       	brge	.+10     	; 0x1b40 <STEPPER_voidRotateClockWise+0x168>
		__ticks = 1;
    1b36:	81 e0       	ldi	r24, 0x01	; 1
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	98 ab       	std	Y+48, r25	; 0x30
    1b3c:	8f a7       	std	Y+47, r24	; 0x2f
    1b3e:	3f c0       	rjmp	.+126    	; 0x1bbe <STEPPER_voidRotateClockWise+0x1e6>
	else if (__tmp > 65535)
    1b40:	69 a9       	ldd	r22, Y+49	; 0x31
    1b42:	7a a9       	ldd	r23, Y+50	; 0x32
    1b44:	8b a9       	ldd	r24, Y+51	; 0x33
    1b46:	9c a9       	ldd	r25, Y+52	; 0x34
    1b48:	20 e0       	ldi	r18, 0x00	; 0
    1b4a:	3f ef       	ldi	r19, 0xFF	; 255
    1b4c:	4f e7       	ldi	r20, 0x7F	; 127
    1b4e:	57 e4       	ldi	r21, 0x47	; 71
    1b50:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b54:	18 16       	cp	r1, r24
    1b56:	4c f5       	brge	.+82     	; 0x1baa <STEPPER_voidRotateClockWise+0x1d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b58:	6d a9       	ldd	r22, Y+53	; 0x35
    1b5a:	7e a9       	ldd	r23, Y+54	; 0x36
    1b5c:	8f a9       	ldd	r24, Y+55	; 0x37
    1b5e:	98 ad       	ldd	r25, Y+56	; 0x38
    1b60:	20 e0       	ldi	r18, 0x00	; 0
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	40 e2       	ldi	r20, 0x20	; 32
    1b66:	51 e4       	ldi	r21, 0x41	; 65
    1b68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b6c:	dc 01       	movw	r26, r24
    1b6e:	cb 01       	movw	r24, r22
    1b70:	bc 01       	movw	r22, r24
    1b72:	cd 01       	movw	r24, r26
    1b74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b78:	dc 01       	movw	r26, r24
    1b7a:	cb 01       	movw	r24, r22
    1b7c:	98 ab       	std	Y+48, r25	; 0x30
    1b7e:	8f a7       	std	Y+47, r24	; 0x2f
    1b80:	0f c0       	rjmp	.+30     	; 0x1ba0 <STEPPER_voidRotateClockWise+0x1c8>
    1b82:	88 ec       	ldi	r24, 0xC8	; 200
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	9e a7       	std	Y+46, r25	; 0x2e
    1b88:	8d a7       	std	Y+45, r24	; 0x2d
    1b8a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b8c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b8e:	01 97       	sbiw	r24, 0x01	; 1
    1b90:	f1 f7       	brne	.-4      	; 0x1b8e <STEPPER_voidRotateClockWise+0x1b6>
    1b92:	9e a7       	std	Y+46, r25	; 0x2e
    1b94:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b96:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b98:	98 a9       	ldd	r25, Y+48	; 0x30
    1b9a:	01 97       	sbiw	r24, 0x01	; 1
    1b9c:	98 ab       	std	Y+48, r25	; 0x30
    1b9e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ba0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ba2:	98 a9       	ldd	r25, Y+48	; 0x30
    1ba4:	00 97       	sbiw	r24, 0x00	; 0
    1ba6:	69 f7       	brne	.-38     	; 0x1b82 <STEPPER_voidRotateClockWise+0x1aa>
    1ba8:	14 c0       	rjmp	.+40     	; 0x1bd2 <STEPPER_voidRotateClockWise+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1baa:	69 a9       	ldd	r22, Y+49	; 0x31
    1bac:	7a a9       	ldd	r23, Y+50	; 0x32
    1bae:	8b a9       	ldd	r24, Y+51	; 0x33
    1bb0:	9c a9       	ldd	r25, Y+52	; 0x34
    1bb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb6:	dc 01       	movw	r26, r24
    1bb8:	cb 01       	movw	r24, r22
    1bba:	98 ab       	std	Y+48, r25	; 0x30
    1bbc:	8f a7       	std	Y+47, r24	; 0x2f
    1bbe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bc0:	98 a9       	ldd	r25, Y+48	; 0x30
    1bc2:	9c a7       	std	Y+44, r25	; 0x2c
    1bc4:	8b a7       	std	Y+43, r24	; 0x2b
    1bc6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bc8:	9c a5       	ldd	r25, Y+44	; 0x2c
    1bca:	01 97       	sbiw	r24, 0x01	; 1
    1bcc:	f1 f7       	brne	.-4      	; 0x1bca <STEPPER_voidRotateClockWise+0x1f2>
    1bce:	9c a7       	std	Y+44, r25	; 0x2c
    1bd0:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(20);

		/*Step 2 in stepper motor*/
		DIO_u8SetPinValue(Copy_pSTEPPER_tStepper->PORT, Copy_pSTEPPER_tStepper->PIN1, DIO_u8PIN_HIGH);
    1bd2:	fe 01       	movw	r30, r28
    1bd4:	ef 5b       	subi	r30, 0xBF	; 191
    1bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd8:	01 90       	ld	r0, Z+
    1bda:	f0 81       	ld	r31, Z
    1bdc:	e0 2d       	mov	r30, r0
    1bde:	80 81       	ld	r24, Z
    1be0:	fe 01       	movw	r30, r28
    1be2:	ef 5b       	subi	r30, 0xBF	; 191
    1be4:	ff 4f       	sbci	r31, 0xFF	; 255
    1be6:	01 90       	ld	r0, Z+
    1be8:	f0 81       	ld	r31, Z
    1bea:	e0 2d       	mov	r30, r0
    1bec:	91 81       	ldd	r25, Z+1	; 0x01
    1bee:	69 2f       	mov	r22, r25
    1bf0:	41 e0       	ldi	r20, 0x01	; 1
    1bf2:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Copy_pSTEPPER_tStepper->PORT, Copy_pSTEPPER_tStepper->PIN2, DIO_u8PIN_LOW);
    1bf6:	fe 01       	movw	r30, r28
    1bf8:	ef 5b       	subi	r30, 0xBF	; 191
    1bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfc:	01 90       	ld	r0, Z+
    1bfe:	f0 81       	ld	r31, Z
    1c00:	e0 2d       	mov	r30, r0
    1c02:	80 81       	ld	r24, Z
    1c04:	fe 01       	movw	r30, r28
    1c06:	ef 5b       	subi	r30, 0xBF	; 191
    1c08:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0a:	01 90       	ld	r0, Z+
    1c0c:	f0 81       	ld	r31, Z
    1c0e:	e0 2d       	mov	r30, r0
    1c10:	92 81       	ldd	r25, Z+2	; 0x02
    1c12:	69 2f       	mov	r22, r25
    1c14:	40 e0       	ldi	r20, 0x00	; 0
    1c16:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Copy_pSTEPPER_tStepper->PORT, Copy_pSTEPPER_tStepper->PIN3, DIO_u8PIN_HIGH);
    1c1a:	fe 01       	movw	r30, r28
    1c1c:	ef 5b       	subi	r30, 0xBF	; 191
    1c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c20:	01 90       	ld	r0, Z+
    1c22:	f0 81       	ld	r31, Z
    1c24:	e0 2d       	mov	r30, r0
    1c26:	80 81       	ld	r24, Z
    1c28:	fe 01       	movw	r30, r28
    1c2a:	ef 5b       	subi	r30, 0xBF	; 191
    1c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2e:	01 90       	ld	r0, Z+
    1c30:	f0 81       	ld	r31, Z
    1c32:	e0 2d       	mov	r30, r0
    1c34:	93 81       	ldd	r25, Z+3	; 0x03
    1c36:	69 2f       	mov	r22, r25
    1c38:	41 e0       	ldi	r20, 0x01	; 1
    1c3a:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Copy_pSTEPPER_tStepper->PORT, Copy_pSTEPPER_tStepper->PIN4, DIO_u8PIN_HIGH);
    1c3e:	fe 01       	movw	r30, r28
    1c40:	ef 5b       	subi	r30, 0xBF	; 191
    1c42:	ff 4f       	sbci	r31, 0xFF	; 255
    1c44:	01 90       	ld	r0, Z+
    1c46:	f0 81       	ld	r31, Z
    1c48:	e0 2d       	mov	r30, r0
    1c4a:	80 81       	ld	r24, Z
    1c4c:	fe 01       	movw	r30, r28
    1c4e:	ef 5b       	subi	r30, 0xBF	; 191
    1c50:	ff 4f       	sbci	r31, 0xFF	; 255
    1c52:	01 90       	ld	r0, Z+
    1c54:	f0 81       	ld	r31, Z
    1c56:	e0 2d       	mov	r30, r0
    1c58:	94 81       	ldd	r25, Z+4	; 0x04
    1c5a:	69 2f       	mov	r22, r25
    1c5c:	41 e0       	ldi	r20, 0x01	; 1
    1c5e:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_u8SetPinValue>
    1c62:	80 e0       	ldi	r24, 0x00	; 0
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	a0 ea       	ldi	r26, 0xA0	; 160
    1c68:	b1 e4       	ldi	r27, 0x41	; 65
    1c6a:	8f a3       	std	Y+39, r24	; 0x27
    1c6c:	98 a7       	std	Y+40, r25	; 0x28
    1c6e:	a9 a7       	std	Y+41, r26	; 0x29
    1c70:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c72:	6f a1       	ldd	r22, Y+39	; 0x27
    1c74:	78 a5       	ldd	r23, Y+40	; 0x28
    1c76:	89 a5       	ldd	r24, Y+41	; 0x29
    1c78:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c7a:	20 e0       	ldi	r18, 0x00	; 0
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	4a ef       	ldi	r20, 0xFA	; 250
    1c80:	54 e4       	ldi	r21, 0x44	; 68
    1c82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c86:	dc 01       	movw	r26, r24
    1c88:	cb 01       	movw	r24, r22
    1c8a:	8b a3       	std	Y+35, r24	; 0x23
    1c8c:	9c a3       	std	Y+36, r25	; 0x24
    1c8e:	ad a3       	std	Y+37, r26	; 0x25
    1c90:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c92:	6b a1       	ldd	r22, Y+35	; 0x23
    1c94:	7c a1       	ldd	r23, Y+36	; 0x24
    1c96:	8d a1       	ldd	r24, Y+37	; 0x25
    1c98:	9e a1       	ldd	r25, Y+38	; 0x26
    1c9a:	20 e0       	ldi	r18, 0x00	; 0
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	40 e8       	ldi	r20, 0x80	; 128
    1ca0:	5f e3       	ldi	r21, 0x3F	; 63
    1ca2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ca6:	88 23       	and	r24, r24
    1ca8:	2c f4       	brge	.+10     	; 0x1cb4 <STEPPER_voidRotateClockWise+0x2dc>
		__ticks = 1;
    1caa:	81 e0       	ldi	r24, 0x01	; 1
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	9a a3       	std	Y+34, r25	; 0x22
    1cb0:	89 a3       	std	Y+33, r24	; 0x21
    1cb2:	3f c0       	rjmp	.+126    	; 0x1d32 <STEPPER_voidRotateClockWise+0x35a>
	else if (__tmp > 65535)
    1cb4:	6b a1       	ldd	r22, Y+35	; 0x23
    1cb6:	7c a1       	ldd	r23, Y+36	; 0x24
    1cb8:	8d a1       	ldd	r24, Y+37	; 0x25
    1cba:	9e a1       	ldd	r25, Y+38	; 0x26
    1cbc:	20 e0       	ldi	r18, 0x00	; 0
    1cbe:	3f ef       	ldi	r19, 0xFF	; 255
    1cc0:	4f e7       	ldi	r20, 0x7F	; 127
    1cc2:	57 e4       	ldi	r21, 0x47	; 71
    1cc4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cc8:	18 16       	cp	r1, r24
    1cca:	4c f5       	brge	.+82     	; 0x1d1e <STEPPER_voidRotateClockWise+0x346>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ccc:	6f a1       	ldd	r22, Y+39	; 0x27
    1cce:	78 a5       	ldd	r23, Y+40	; 0x28
    1cd0:	89 a5       	ldd	r24, Y+41	; 0x29
    1cd2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cd4:	20 e0       	ldi	r18, 0x00	; 0
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
    1cd8:	40 e2       	ldi	r20, 0x20	; 32
    1cda:	51 e4       	ldi	r21, 0x41	; 65
    1cdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce0:	dc 01       	movw	r26, r24
    1ce2:	cb 01       	movw	r24, r22
    1ce4:	bc 01       	movw	r22, r24
    1ce6:	cd 01       	movw	r24, r26
    1ce8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cec:	dc 01       	movw	r26, r24
    1cee:	cb 01       	movw	r24, r22
    1cf0:	9a a3       	std	Y+34, r25	; 0x22
    1cf2:	89 a3       	std	Y+33, r24	; 0x21
    1cf4:	0f c0       	rjmp	.+30     	; 0x1d14 <STEPPER_voidRotateClockWise+0x33c>
    1cf6:	88 ec       	ldi	r24, 0xC8	; 200
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	98 a3       	std	Y+32, r25	; 0x20
    1cfc:	8f 8f       	std	Y+31, r24	; 0x1f
    1cfe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d00:	98 a1       	ldd	r25, Y+32	; 0x20
    1d02:	01 97       	sbiw	r24, 0x01	; 1
    1d04:	f1 f7       	brne	.-4      	; 0x1d02 <STEPPER_voidRotateClockWise+0x32a>
    1d06:	98 a3       	std	Y+32, r25	; 0x20
    1d08:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d0a:	89 a1       	ldd	r24, Y+33	; 0x21
    1d0c:	9a a1       	ldd	r25, Y+34	; 0x22
    1d0e:	01 97       	sbiw	r24, 0x01	; 1
    1d10:	9a a3       	std	Y+34, r25	; 0x22
    1d12:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d14:	89 a1       	ldd	r24, Y+33	; 0x21
    1d16:	9a a1       	ldd	r25, Y+34	; 0x22
    1d18:	00 97       	sbiw	r24, 0x00	; 0
    1d1a:	69 f7       	brne	.-38     	; 0x1cf6 <STEPPER_voidRotateClockWise+0x31e>
    1d1c:	14 c0       	rjmp	.+40     	; 0x1d46 <STEPPER_voidRotateClockWise+0x36e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d1e:	6b a1       	ldd	r22, Y+35	; 0x23
    1d20:	7c a1       	ldd	r23, Y+36	; 0x24
    1d22:	8d a1       	ldd	r24, Y+37	; 0x25
    1d24:	9e a1       	ldd	r25, Y+38	; 0x26
    1d26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d2a:	dc 01       	movw	r26, r24
    1d2c:	cb 01       	movw	r24, r22
    1d2e:	9a a3       	std	Y+34, r25	; 0x22
    1d30:	89 a3       	std	Y+33, r24	; 0x21
    1d32:	89 a1       	ldd	r24, Y+33	; 0x21
    1d34:	9a a1       	ldd	r25, Y+34	; 0x22
    1d36:	9e 8f       	std	Y+30, r25	; 0x1e
    1d38:	8d 8f       	std	Y+29, r24	; 0x1d
    1d3a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d3c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d3e:	01 97       	sbiw	r24, 0x01	; 1
    1d40:	f1 f7       	brne	.-4      	; 0x1d3e <STEPPER_voidRotateClockWise+0x366>
    1d42:	9e 8f       	std	Y+30, r25	; 0x1e
    1d44:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(20);

		/*Step 3 in stepper motor*/
		DIO_u8SetPinValue(Copy_pSTEPPER_tStepper->PORT, Copy_pSTEPPER_tStepper->PIN1, DIO_u8PIN_HIGH);
    1d46:	fe 01       	movw	r30, r28
    1d48:	ef 5b       	subi	r30, 0xBF	; 191
    1d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4c:	01 90       	ld	r0, Z+
    1d4e:	f0 81       	ld	r31, Z
    1d50:	e0 2d       	mov	r30, r0
    1d52:	80 81       	ld	r24, Z
    1d54:	fe 01       	movw	r30, r28
    1d56:	ef 5b       	subi	r30, 0xBF	; 191
    1d58:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5a:	01 90       	ld	r0, Z+
    1d5c:	f0 81       	ld	r31, Z
    1d5e:	e0 2d       	mov	r30, r0
    1d60:	91 81       	ldd	r25, Z+1	; 0x01
    1d62:	69 2f       	mov	r22, r25
    1d64:	41 e0       	ldi	r20, 0x01	; 1
    1d66:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Copy_pSTEPPER_tStepper->PORT, Copy_pSTEPPER_tStepper->PIN2, DIO_u8PIN_HIGH);
    1d6a:	fe 01       	movw	r30, r28
    1d6c:	ef 5b       	subi	r30, 0xBF	; 191
    1d6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d70:	01 90       	ld	r0, Z+
    1d72:	f0 81       	ld	r31, Z
    1d74:	e0 2d       	mov	r30, r0
    1d76:	80 81       	ld	r24, Z
    1d78:	fe 01       	movw	r30, r28
    1d7a:	ef 5b       	subi	r30, 0xBF	; 191
    1d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7e:	01 90       	ld	r0, Z+
    1d80:	f0 81       	ld	r31, Z
    1d82:	e0 2d       	mov	r30, r0
    1d84:	92 81       	ldd	r25, Z+2	; 0x02
    1d86:	69 2f       	mov	r22, r25
    1d88:	41 e0       	ldi	r20, 0x01	; 1
    1d8a:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Copy_pSTEPPER_tStepper->PORT, Copy_pSTEPPER_tStepper->PIN3, DIO_u8PIN_LOW);
    1d8e:	fe 01       	movw	r30, r28
    1d90:	ef 5b       	subi	r30, 0xBF	; 191
    1d92:	ff 4f       	sbci	r31, 0xFF	; 255
    1d94:	01 90       	ld	r0, Z+
    1d96:	f0 81       	ld	r31, Z
    1d98:	e0 2d       	mov	r30, r0
    1d9a:	80 81       	ld	r24, Z
    1d9c:	fe 01       	movw	r30, r28
    1d9e:	ef 5b       	subi	r30, 0xBF	; 191
    1da0:	ff 4f       	sbci	r31, 0xFF	; 255
    1da2:	01 90       	ld	r0, Z+
    1da4:	f0 81       	ld	r31, Z
    1da6:	e0 2d       	mov	r30, r0
    1da8:	93 81       	ldd	r25, Z+3	; 0x03
    1daa:	69 2f       	mov	r22, r25
    1dac:	40 e0       	ldi	r20, 0x00	; 0
    1dae:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Copy_pSTEPPER_tStepper->PORT, Copy_pSTEPPER_tStepper->PIN4, DIO_u8PIN_HIGH);
    1db2:	fe 01       	movw	r30, r28
    1db4:	ef 5b       	subi	r30, 0xBF	; 191
    1db6:	ff 4f       	sbci	r31, 0xFF	; 255
    1db8:	01 90       	ld	r0, Z+
    1dba:	f0 81       	ld	r31, Z
    1dbc:	e0 2d       	mov	r30, r0
    1dbe:	80 81       	ld	r24, Z
    1dc0:	fe 01       	movw	r30, r28
    1dc2:	ef 5b       	subi	r30, 0xBF	; 191
    1dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc6:	01 90       	ld	r0, Z+
    1dc8:	f0 81       	ld	r31, Z
    1dca:	e0 2d       	mov	r30, r0
    1dcc:	94 81       	ldd	r25, Z+4	; 0x04
    1dce:	69 2f       	mov	r22, r25
    1dd0:	41 e0       	ldi	r20, 0x01	; 1
    1dd2:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_u8SetPinValue>
    1dd6:	80 e0       	ldi	r24, 0x00	; 0
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	a0 ea       	ldi	r26, 0xA0	; 160
    1ddc:	b1 e4       	ldi	r27, 0x41	; 65
    1dde:	89 8f       	std	Y+25, r24	; 0x19
    1de0:	9a 8f       	std	Y+26, r25	; 0x1a
    1de2:	ab 8f       	std	Y+27, r26	; 0x1b
    1de4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1de6:	69 8d       	ldd	r22, Y+25	; 0x19
    1de8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dee:	20 e0       	ldi	r18, 0x00	; 0
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	4a ef       	ldi	r20, 0xFA	; 250
    1df4:	54 e4       	ldi	r21, 0x44	; 68
    1df6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dfa:	dc 01       	movw	r26, r24
    1dfc:	cb 01       	movw	r24, r22
    1dfe:	8d 8b       	std	Y+21, r24	; 0x15
    1e00:	9e 8b       	std	Y+22, r25	; 0x16
    1e02:	af 8b       	std	Y+23, r26	; 0x17
    1e04:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e06:	6d 89       	ldd	r22, Y+21	; 0x15
    1e08:	7e 89       	ldd	r23, Y+22	; 0x16
    1e0a:	8f 89       	ldd	r24, Y+23	; 0x17
    1e0c:	98 8d       	ldd	r25, Y+24	; 0x18
    1e0e:	20 e0       	ldi	r18, 0x00	; 0
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	40 e8       	ldi	r20, 0x80	; 128
    1e14:	5f e3       	ldi	r21, 0x3F	; 63
    1e16:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e1a:	88 23       	and	r24, r24
    1e1c:	2c f4       	brge	.+10     	; 0x1e28 <STEPPER_voidRotateClockWise+0x450>
		__ticks = 1;
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	9c 8b       	std	Y+20, r25	; 0x14
    1e24:	8b 8b       	std	Y+19, r24	; 0x13
    1e26:	3f c0       	rjmp	.+126    	; 0x1ea6 <STEPPER_voidRotateClockWise+0x4ce>
	else if (__tmp > 65535)
    1e28:	6d 89       	ldd	r22, Y+21	; 0x15
    1e2a:	7e 89       	ldd	r23, Y+22	; 0x16
    1e2c:	8f 89       	ldd	r24, Y+23	; 0x17
    1e2e:	98 8d       	ldd	r25, Y+24	; 0x18
    1e30:	20 e0       	ldi	r18, 0x00	; 0
    1e32:	3f ef       	ldi	r19, 0xFF	; 255
    1e34:	4f e7       	ldi	r20, 0x7F	; 127
    1e36:	57 e4       	ldi	r21, 0x47	; 71
    1e38:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e3c:	18 16       	cp	r1, r24
    1e3e:	4c f5       	brge	.+82     	; 0x1e92 <STEPPER_voidRotateClockWise+0x4ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e40:	69 8d       	ldd	r22, Y+25	; 0x19
    1e42:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e44:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e46:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e48:	20 e0       	ldi	r18, 0x00	; 0
    1e4a:	30 e0       	ldi	r19, 0x00	; 0
    1e4c:	40 e2       	ldi	r20, 0x20	; 32
    1e4e:	51 e4       	ldi	r21, 0x41	; 65
    1e50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e54:	dc 01       	movw	r26, r24
    1e56:	cb 01       	movw	r24, r22
    1e58:	bc 01       	movw	r22, r24
    1e5a:	cd 01       	movw	r24, r26
    1e5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e60:	dc 01       	movw	r26, r24
    1e62:	cb 01       	movw	r24, r22
    1e64:	9c 8b       	std	Y+20, r25	; 0x14
    1e66:	8b 8b       	std	Y+19, r24	; 0x13
    1e68:	0f c0       	rjmp	.+30     	; 0x1e88 <STEPPER_voidRotateClockWise+0x4b0>
    1e6a:	88 ec       	ldi	r24, 0xC8	; 200
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	9a 8b       	std	Y+18, r25	; 0x12
    1e70:	89 8b       	std	Y+17, r24	; 0x11
    1e72:	89 89       	ldd	r24, Y+17	; 0x11
    1e74:	9a 89       	ldd	r25, Y+18	; 0x12
    1e76:	01 97       	sbiw	r24, 0x01	; 1
    1e78:	f1 f7       	brne	.-4      	; 0x1e76 <STEPPER_voidRotateClockWise+0x49e>
    1e7a:	9a 8b       	std	Y+18, r25	; 0x12
    1e7c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e7e:	8b 89       	ldd	r24, Y+19	; 0x13
    1e80:	9c 89       	ldd	r25, Y+20	; 0x14
    1e82:	01 97       	sbiw	r24, 0x01	; 1
    1e84:	9c 8b       	std	Y+20, r25	; 0x14
    1e86:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e88:	8b 89       	ldd	r24, Y+19	; 0x13
    1e8a:	9c 89       	ldd	r25, Y+20	; 0x14
    1e8c:	00 97       	sbiw	r24, 0x00	; 0
    1e8e:	69 f7       	brne	.-38     	; 0x1e6a <STEPPER_voidRotateClockWise+0x492>
    1e90:	14 c0       	rjmp	.+40     	; 0x1eba <STEPPER_voidRotateClockWise+0x4e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e92:	6d 89       	ldd	r22, Y+21	; 0x15
    1e94:	7e 89       	ldd	r23, Y+22	; 0x16
    1e96:	8f 89       	ldd	r24, Y+23	; 0x17
    1e98:	98 8d       	ldd	r25, Y+24	; 0x18
    1e9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e9e:	dc 01       	movw	r26, r24
    1ea0:	cb 01       	movw	r24, r22
    1ea2:	9c 8b       	std	Y+20, r25	; 0x14
    1ea4:	8b 8b       	std	Y+19, r24	; 0x13
    1ea6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ea8:	9c 89       	ldd	r25, Y+20	; 0x14
    1eaa:	98 8b       	std	Y+16, r25	; 0x10
    1eac:	8f 87       	std	Y+15, r24	; 0x0f
    1eae:	8f 85       	ldd	r24, Y+15	; 0x0f
    1eb0:	98 89       	ldd	r25, Y+16	; 0x10
    1eb2:	01 97       	sbiw	r24, 0x01	; 1
    1eb4:	f1 f7       	brne	.-4      	; 0x1eb2 <STEPPER_voidRotateClockWise+0x4da>
    1eb6:	98 8b       	std	Y+16, r25	; 0x10
    1eb8:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(20);

		/*Step 4 in stepper motor*/
		DIO_u8SetPinValue(Copy_pSTEPPER_tStepper->PORT, Copy_pSTEPPER_tStepper->PIN1, DIO_u8PIN_HIGH);
    1eba:	fe 01       	movw	r30, r28
    1ebc:	ef 5b       	subi	r30, 0xBF	; 191
    1ebe:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec0:	01 90       	ld	r0, Z+
    1ec2:	f0 81       	ld	r31, Z
    1ec4:	e0 2d       	mov	r30, r0
    1ec6:	80 81       	ld	r24, Z
    1ec8:	fe 01       	movw	r30, r28
    1eca:	ef 5b       	subi	r30, 0xBF	; 191
    1ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ece:	01 90       	ld	r0, Z+
    1ed0:	f0 81       	ld	r31, Z
    1ed2:	e0 2d       	mov	r30, r0
    1ed4:	91 81       	ldd	r25, Z+1	; 0x01
    1ed6:	69 2f       	mov	r22, r25
    1ed8:	41 e0       	ldi	r20, 0x01	; 1
    1eda:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Copy_pSTEPPER_tStepper->PORT, Copy_pSTEPPER_tStepper->PIN2, DIO_u8PIN_HIGH);
    1ede:	fe 01       	movw	r30, r28
    1ee0:	ef 5b       	subi	r30, 0xBF	; 191
    1ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee4:	01 90       	ld	r0, Z+
    1ee6:	f0 81       	ld	r31, Z
    1ee8:	e0 2d       	mov	r30, r0
    1eea:	80 81       	ld	r24, Z
    1eec:	fe 01       	movw	r30, r28
    1eee:	ef 5b       	subi	r30, 0xBF	; 191
    1ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef2:	01 90       	ld	r0, Z+
    1ef4:	f0 81       	ld	r31, Z
    1ef6:	e0 2d       	mov	r30, r0
    1ef8:	92 81       	ldd	r25, Z+2	; 0x02
    1efa:	69 2f       	mov	r22, r25
    1efc:	41 e0       	ldi	r20, 0x01	; 1
    1efe:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Copy_pSTEPPER_tStepper->PORT, Copy_pSTEPPER_tStepper->PIN3, DIO_u8PIN_HIGH);
    1f02:	fe 01       	movw	r30, r28
    1f04:	ef 5b       	subi	r30, 0xBF	; 191
    1f06:	ff 4f       	sbci	r31, 0xFF	; 255
    1f08:	01 90       	ld	r0, Z+
    1f0a:	f0 81       	ld	r31, Z
    1f0c:	e0 2d       	mov	r30, r0
    1f0e:	80 81       	ld	r24, Z
    1f10:	fe 01       	movw	r30, r28
    1f12:	ef 5b       	subi	r30, 0xBF	; 191
    1f14:	ff 4f       	sbci	r31, 0xFF	; 255
    1f16:	01 90       	ld	r0, Z+
    1f18:	f0 81       	ld	r31, Z
    1f1a:	e0 2d       	mov	r30, r0
    1f1c:	93 81       	ldd	r25, Z+3	; 0x03
    1f1e:	69 2f       	mov	r22, r25
    1f20:	41 e0       	ldi	r20, 0x01	; 1
    1f22:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Copy_pSTEPPER_tStepper->PORT, Copy_pSTEPPER_tStepper->PIN4, DIO_u8PIN_LOW);
    1f26:	fe 01       	movw	r30, r28
    1f28:	ef 5b       	subi	r30, 0xBF	; 191
    1f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2c:	01 90       	ld	r0, Z+
    1f2e:	f0 81       	ld	r31, Z
    1f30:	e0 2d       	mov	r30, r0
    1f32:	80 81       	ld	r24, Z
    1f34:	fe 01       	movw	r30, r28
    1f36:	ef 5b       	subi	r30, 0xBF	; 191
    1f38:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3a:	01 90       	ld	r0, Z+
    1f3c:	f0 81       	ld	r31, Z
    1f3e:	e0 2d       	mov	r30, r0
    1f40:	94 81       	ldd	r25, Z+4	; 0x04
    1f42:	69 2f       	mov	r22, r25
    1f44:	40 e0       	ldi	r20, 0x00	; 0
    1f46:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_u8SetPinValue>
    1f4a:	80 e0       	ldi	r24, 0x00	; 0
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	a0 ea       	ldi	r26, 0xA0	; 160
    1f50:	b1 e4       	ldi	r27, 0x41	; 65
    1f52:	8b 87       	std	Y+11, r24	; 0x0b
    1f54:	9c 87       	std	Y+12, r25	; 0x0c
    1f56:	ad 87       	std	Y+13, r26	; 0x0d
    1f58:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f60:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f62:	20 e0       	ldi	r18, 0x00	; 0
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	4a ef       	ldi	r20, 0xFA	; 250
    1f68:	54 e4       	ldi	r21, 0x44	; 68
    1f6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f6e:	dc 01       	movw	r26, r24
    1f70:	cb 01       	movw	r24, r22
    1f72:	8f 83       	std	Y+7, r24	; 0x07
    1f74:	98 87       	std	Y+8, r25	; 0x08
    1f76:	a9 87       	std	Y+9, r26	; 0x09
    1f78:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f7a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f7c:	78 85       	ldd	r23, Y+8	; 0x08
    1f7e:	89 85       	ldd	r24, Y+9	; 0x09
    1f80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f82:	20 e0       	ldi	r18, 0x00	; 0
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	40 e8       	ldi	r20, 0x80	; 128
    1f88:	5f e3       	ldi	r21, 0x3F	; 63
    1f8a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f8e:	88 23       	and	r24, r24
    1f90:	2c f4       	brge	.+10     	; 0x1f9c <STEPPER_voidRotateClockWise+0x5c4>
		__ticks = 1;
    1f92:	81 e0       	ldi	r24, 0x01	; 1
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	9e 83       	std	Y+6, r25	; 0x06
    1f98:	8d 83       	std	Y+5, r24	; 0x05
    1f9a:	3f c0       	rjmp	.+126    	; 0x201a <STEPPER_voidRotateClockWise+0x642>
	else if (__tmp > 65535)
    1f9c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f9e:	78 85       	ldd	r23, Y+8	; 0x08
    1fa0:	89 85       	ldd	r24, Y+9	; 0x09
    1fa2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fa4:	20 e0       	ldi	r18, 0x00	; 0
    1fa6:	3f ef       	ldi	r19, 0xFF	; 255
    1fa8:	4f e7       	ldi	r20, 0x7F	; 127
    1faa:	57 e4       	ldi	r21, 0x47	; 71
    1fac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fb0:	18 16       	cp	r1, r24
    1fb2:	4c f5       	brge	.+82     	; 0x2006 <STEPPER_voidRotateClockWise+0x62e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fb4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fb6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fb8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fba:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fbc:	20 e0       	ldi	r18, 0x00	; 0
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	40 e2       	ldi	r20, 0x20	; 32
    1fc2:	51 e4       	ldi	r21, 0x41	; 65
    1fc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc8:	dc 01       	movw	r26, r24
    1fca:	cb 01       	movw	r24, r22
    1fcc:	bc 01       	movw	r22, r24
    1fce:	cd 01       	movw	r24, r26
    1fd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd4:	dc 01       	movw	r26, r24
    1fd6:	cb 01       	movw	r24, r22
    1fd8:	9e 83       	std	Y+6, r25	; 0x06
    1fda:	8d 83       	std	Y+5, r24	; 0x05
    1fdc:	0f c0       	rjmp	.+30     	; 0x1ffc <STEPPER_voidRotateClockWise+0x624>
    1fde:	88 ec       	ldi	r24, 0xC8	; 200
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	9c 83       	std	Y+4, r25	; 0x04
    1fe4:	8b 83       	std	Y+3, r24	; 0x03
    1fe6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe8:	9c 81       	ldd	r25, Y+4	; 0x04
    1fea:	01 97       	sbiw	r24, 0x01	; 1
    1fec:	f1 f7       	brne	.-4      	; 0x1fea <STEPPER_voidRotateClockWise+0x612>
    1fee:	9c 83       	std	Y+4, r25	; 0x04
    1ff0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ff2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff6:	01 97       	sbiw	r24, 0x01	; 1
    1ff8:	9e 83       	std	Y+6, r25	; 0x06
    1ffa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ffc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ffe:	9e 81       	ldd	r25, Y+6	; 0x06
    2000:	00 97       	sbiw	r24, 0x00	; 0
    2002:	69 f7       	brne	.-38     	; 0x1fde <STEPPER_voidRotateClockWise+0x606>
    2004:	14 c0       	rjmp	.+40     	; 0x202e <STEPPER_voidRotateClockWise+0x656>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2006:	6f 81       	ldd	r22, Y+7	; 0x07
    2008:	78 85       	ldd	r23, Y+8	; 0x08
    200a:	89 85       	ldd	r24, Y+9	; 0x09
    200c:	9a 85       	ldd	r25, Y+10	; 0x0a
    200e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2012:	dc 01       	movw	r26, r24
    2014:	cb 01       	movw	r24, r22
    2016:	9e 83       	std	Y+6, r25	; 0x06
    2018:	8d 83       	std	Y+5, r24	; 0x05
    201a:	8d 81       	ldd	r24, Y+5	; 0x05
    201c:	9e 81       	ldd	r25, Y+6	; 0x06
    201e:	9a 83       	std	Y+2, r25	; 0x02
    2020:	89 83       	std	Y+1, r24	; 0x01
    2022:	89 81       	ldd	r24, Y+1	; 0x01
    2024:	9a 81       	ldd	r25, Y+2	; 0x02
    2026:	01 97       	sbiw	r24, 0x01	; 1
    2028:	f1 f7       	brne	.-4      	; 0x2026 <STEPPER_voidRotateClockWise+0x64e>
    202a:	9a 83       	std	Y+2, r25	; 0x02
    202c:	89 83       	std	Y+1, r24	; 0x01

	/*calculate number of iterations to reach the required angle*/
	u16 Local_u8NumberOfIterations = Local_f32NumberOfSteps / 4;

	u16 Local_u16Iter;
	for(Local_u16Iter = 0; Local_u16Iter<(u16)Local_u8NumberOfIterations; Local_u16Iter++)
    202e:	89 ad       	ldd	r24, Y+57	; 0x39
    2030:	9a ad       	ldd	r25, Y+58	; 0x3a
    2032:	01 96       	adiw	r24, 0x01	; 1
    2034:	9a af       	std	Y+58, r25	; 0x3a
    2036:	89 af       	std	Y+57, r24	; 0x39
    2038:	29 ad       	ldd	r18, Y+57	; 0x39
    203a:	3a ad       	ldd	r19, Y+58	; 0x3a
    203c:	8b ad       	ldd	r24, Y+59	; 0x3b
    203e:	9c ad       	ldd	r25, Y+60	; 0x3c
    2040:	28 17       	cp	r18, r24
    2042:	39 07       	cpc	r19, r25
    2044:	08 f4       	brcc	.+2      	; 0x2048 <STEPPER_voidRotateClockWise+0x670>
    2046:	0b cd       	rjmp	.-1514   	; 0x1a5e <STEPPER_voidRotateClockWise+0x86>
		DIO_u8SetPinValue(Copy_pSTEPPER_tStepper->PORT, Copy_pSTEPPER_tStepper->PIN2, DIO_u8PIN_HIGH);
		DIO_u8SetPinValue(Copy_pSTEPPER_tStepper->PORT, Copy_pSTEPPER_tStepper->PIN3, DIO_u8PIN_HIGH);
		DIO_u8SetPinValue(Copy_pSTEPPER_tStepper->PORT, Copy_pSTEPPER_tStepper->PIN4, DIO_u8PIN_LOW);
		_delay_ms(20);
	}
}
    2048:	ce 5b       	subi	r28, 0xBE	; 190
    204a:	df 4f       	sbci	r29, 0xFF	; 255
    204c:	0f b6       	in	r0, 0x3f	; 63
    204e:	f8 94       	cli
    2050:	de bf       	out	0x3e, r29	; 62
    2052:	0f be       	out	0x3f, r0	; 63
    2054:	cd bf       	out	0x3d, r28	; 61
    2056:	cf 91       	pop	r28
    2058:	df 91       	pop	r29
    205a:	08 95       	ret

0000205c <STEPPER_voidRotateCounterClockWise>:


void STEPPER_voidRotateCounterClockWise(STEPPER_t* Copy_pSTEPPER_tStepper)
{
    205c:	df 93       	push	r29
    205e:	cf 93       	push	r28
    2060:	cd b7       	in	r28, 0x3d	; 61
    2062:	de b7       	in	r29, 0x3e	; 62
    2064:	c0 54       	subi	r28, 0x40	; 64
    2066:	d0 40       	sbci	r29, 0x00	; 0
    2068:	0f b6       	in	r0, 0x3f	; 63
    206a:	f8 94       	cli
    206c:	de bf       	out	0x3e, r29	; 62
    206e:	0f be       	out	0x3f, r0	; 63
    2070:	cd bf       	out	0x3d, r28	; 61
    2072:	fe 01       	movw	r30, r28
    2074:	ff 96       	adiw	r30, 0x3f	; 63
    2076:	91 83       	std	Z+1, r25	; 0x01
    2078:	80 83       	st	Z, r24
	/*calculate total number of steps*/
	f32 Local_u8NumberOfSteps;
	Local_u8NumberOfSteps = Copy_pSTEPPER_tStepper->DEGREE / STEPPER_DEGREE_PER_STEP;
    207a:	fe 01       	movw	r30, r28
    207c:	ff 96       	adiw	r30, 0x3f	; 63
    207e:	01 90       	ld	r0, Z+
    2080:	f0 81       	ld	r31, Z
    2082:	e0 2d       	mov	r30, r0
    2084:	85 81       	ldd	r24, Z+5	; 0x05
    2086:	96 81       	ldd	r25, Z+6	; 0x06
    2088:	a7 81       	ldd	r26, Z+7	; 0x07
    208a:	b0 85       	ldd	r27, Z+8	; 0x08
    208c:	bc 01       	movw	r22, r24
    208e:	cd 01       	movw	r24, r26
    2090:	23 e3       	ldi	r18, 0x33	; 51
    2092:	33 e3       	ldi	r19, 0x33	; 51
    2094:	43 e3       	ldi	r20, 0x33	; 51
    2096:	5e e3       	ldi	r21, 0x3E	; 62
    2098:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    209c:	dc 01       	movw	r26, r24
    209e:	cb 01       	movw	r24, r22
    20a0:	8b af       	std	Y+59, r24	; 0x3b
    20a2:	9c af       	std	Y+60, r25	; 0x3c
    20a4:	ad af       	std	Y+61, r26	; 0x3d
    20a6:	be af       	std	Y+62, r27	; 0x3e

	/*calculate number of iterations to reach the required angle*/
	u8 Local_u8NumberOfIterations = Local_u8NumberOfSteps / 4;
    20a8:	6b ad       	ldd	r22, Y+59	; 0x3b
    20aa:	7c ad       	ldd	r23, Y+60	; 0x3c
    20ac:	8d ad       	ldd	r24, Y+61	; 0x3d
    20ae:	9e ad       	ldd	r25, Y+62	; 0x3e
    20b0:	20 e0       	ldi	r18, 0x00	; 0
    20b2:	30 e0       	ldi	r19, 0x00	; 0
    20b4:	40 e8       	ldi	r20, 0x80	; 128
    20b6:	50 e4       	ldi	r21, 0x40	; 64
    20b8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    20bc:	dc 01       	movw	r26, r24
    20be:	cb 01       	movw	r24, r22
    20c0:	bc 01       	movw	r22, r24
    20c2:	cd 01       	movw	r24, r26
    20c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20c8:	dc 01       	movw	r26, r24
    20ca:	cb 01       	movw	r24, r22
    20cc:	8a af       	std	Y+58, r24	; 0x3a

	u8 Local_u8Iter;
	for(Local_u8Iter = 0; Local_u8Iter<Local_u8NumberOfIterations; Local_u8Iter++)
    20ce:	19 ae       	std	Y+57, r1	; 0x39
    20d0:	cb c2       	rjmp	.+1430   	; 0x2668 <STEPPER_voidRotateCounterClockWise+0x60c>
	{
		/*Step 4 in stepper motor*/
		DIO_u8SetPinValue(Copy_pSTEPPER_tStepper->PORT, Copy_pSTEPPER_tStepper->PIN4, DIO_u8PIN_LOW);
    20d2:	fe 01       	movw	r30, r28
    20d4:	ff 96       	adiw	r30, 0x3f	; 63
    20d6:	01 90       	ld	r0, Z+
    20d8:	f0 81       	ld	r31, Z
    20da:	e0 2d       	mov	r30, r0
    20dc:	80 81       	ld	r24, Z
    20de:	fe 01       	movw	r30, r28
    20e0:	ff 96       	adiw	r30, 0x3f	; 63
    20e2:	01 90       	ld	r0, Z+
    20e4:	f0 81       	ld	r31, Z
    20e6:	e0 2d       	mov	r30, r0
    20e8:	94 81       	ldd	r25, Z+4	; 0x04
    20ea:	69 2f       	mov	r22, r25
    20ec:	40 e0       	ldi	r20, 0x00	; 0
    20ee:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Copy_pSTEPPER_tStepper->PORT, Copy_pSTEPPER_tStepper->PIN3, DIO_u8PIN_HIGH);
    20f2:	fe 01       	movw	r30, r28
    20f4:	ff 96       	adiw	r30, 0x3f	; 63
    20f6:	01 90       	ld	r0, Z+
    20f8:	f0 81       	ld	r31, Z
    20fa:	e0 2d       	mov	r30, r0
    20fc:	80 81       	ld	r24, Z
    20fe:	fe 01       	movw	r30, r28
    2100:	ff 96       	adiw	r30, 0x3f	; 63
    2102:	01 90       	ld	r0, Z+
    2104:	f0 81       	ld	r31, Z
    2106:	e0 2d       	mov	r30, r0
    2108:	93 81       	ldd	r25, Z+3	; 0x03
    210a:	69 2f       	mov	r22, r25
    210c:	41 e0       	ldi	r20, 0x01	; 1
    210e:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Copy_pSTEPPER_tStepper->PORT, Copy_pSTEPPER_tStepper->PIN2, DIO_u8PIN_HIGH);
    2112:	fe 01       	movw	r30, r28
    2114:	ff 96       	adiw	r30, 0x3f	; 63
    2116:	01 90       	ld	r0, Z+
    2118:	f0 81       	ld	r31, Z
    211a:	e0 2d       	mov	r30, r0
    211c:	80 81       	ld	r24, Z
    211e:	fe 01       	movw	r30, r28
    2120:	ff 96       	adiw	r30, 0x3f	; 63
    2122:	01 90       	ld	r0, Z+
    2124:	f0 81       	ld	r31, Z
    2126:	e0 2d       	mov	r30, r0
    2128:	92 81       	ldd	r25, Z+2	; 0x02
    212a:	69 2f       	mov	r22, r25
    212c:	41 e0       	ldi	r20, 0x01	; 1
    212e:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Copy_pSTEPPER_tStepper->PORT, Copy_pSTEPPER_tStepper->PIN1, DIO_u8PIN_HIGH);
    2132:	fe 01       	movw	r30, r28
    2134:	ff 96       	adiw	r30, 0x3f	; 63
    2136:	01 90       	ld	r0, Z+
    2138:	f0 81       	ld	r31, Z
    213a:	e0 2d       	mov	r30, r0
    213c:	80 81       	ld	r24, Z
    213e:	fe 01       	movw	r30, r28
    2140:	ff 96       	adiw	r30, 0x3f	; 63
    2142:	01 90       	ld	r0, Z+
    2144:	f0 81       	ld	r31, Z
    2146:	e0 2d       	mov	r30, r0
    2148:	91 81       	ldd	r25, Z+1	; 0x01
    214a:	69 2f       	mov	r22, r25
    214c:	41 e0       	ldi	r20, 0x01	; 1
    214e:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_u8SetPinValue>
    2152:	80 e0       	ldi	r24, 0x00	; 0
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	a0 ea       	ldi	r26, 0xA0	; 160
    2158:	b1 e4       	ldi	r27, 0x41	; 65
    215a:	8d ab       	std	Y+53, r24	; 0x35
    215c:	9e ab       	std	Y+54, r25	; 0x36
    215e:	af ab       	std	Y+55, r26	; 0x37
    2160:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2162:	6d a9       	ldd	r22, Y+53	; 0x35
    2164:	7e a9       	ldd	r23, Y+54	; 0x36
    2166:	8f a9       	ldd	r24, Y+55	; 0x37
    2168:	98 ad       	ldd	r25, Y+56	; 0x38
    216a:	20 e0       	ldi	r18, 0x00	; 0
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	4a ef       	ldi	r20, 0xFA	; 250
    2170:	54 e4       	ldi	r21, 0x44	; 68
    2172:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2176:	dc 01       	movw	r26, r24
    2178:	cb 01       	movw	r24, r22
    217a:	89 ab       	std	Y+49, r24	; 0x31
    217c:	9a ab       	std	Y+50, r25	; 0x32
    217e:	ab ab       	std	Y+51, r26	; 0x33
    2180:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2182:	69 a9       	ldd	r22, Y+49	; 0x31
    2184:	7a a9       	ldd	r23, Y+50	; 0x32
    2186:	8b a9       	ldd	r24, Y+51	; 0x33
    2188:	9c a9       	ldd	r25, Y+52	; 0x34
    218a:	20 e0       	ldi	r18, 0x00	; 0
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	40 e8       	ldi	r20, 0x80	; 128
    2190:	5f e3       	ldi	r21, 0x3F	; 63
    2192:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2196:	88 23       	and	r24, r24
    2198:	2c f4       	brge	.+10     	; 0x21a4 <STEPPER_voidRotateCounterClockWise+0x148>
		__ticks = 1;
    219a:	81 e0       	ldi	r24, 0x01	; 1
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	98 ab       	std	Y+48, r25	; 0x30
    21a0:	8f a7       	std	Y+47, r24	; 0x2f
    21a2:	3f c0       	rjmp	.+126    	; 0x2222 <STEPPER_voidRotateCounterClockWise+0x1c6>
	else if (__tmp > 65535)
    21a4:	69 a9       	ldd	r22, Y+49	; 0x31
    21a6:	7a a9       	ldd	r23, Y+50	; 0x32
    21a8:	8b a9       	ldd	r24, Y+51	; 0x33
    21aa:	9c a9       	ldd	r25, Y+52	; 0x34
    21ac:	20 e0       	ldi	r18, 0x00	; 0
    21ae:	3f ef       	ldi	r19, 0xFF	; 255
    21b0:	4f e7       	ldi	r20, 0x7F	; 127
    21b2:	57 e4       	ldi	r21, 0x47	; 71
    21b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21b8:	18 16       	cp	r1, r24
    21ba:	4c f5       	brge	.+82     	; 0x220e <STEPPER_voidRotateCounterClockWise+0x1b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21bc:	6d a9       	ldd	r22, Y+53	; 0x35
    21be:	7e a9       	ldd	r23, Y+54	; 0x36
    21c0:	8f a9       	ldd	r24, Y+55	; 0x37
    21c2:	98 ad       	ldd	r25, Y+56	; 0x38
    21c4:	20 e0       	ldi	r18, 0x00	; 0
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	40 e2       	ldi	r20, 0x20	; 32
    21ca:	51 e4       	ldi	r21, 0x41	; 65
    21cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21d0:	dc 01       	movw	r26, r24
    21d2:	cb 01       	movw	r24, r22
    21d4:	bc 01       	movw	r22, r24
    21d6:	cd 01       	movw	r24, r26
    21d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21dc:	dc 01       	movw	r26, r24
    21de:	cb 01       	movw	r24, r22
    21e0:	98 ab       	std	Y+48, r25	; 0x30
    21e2:	8f a7       	std	Y+47, r24	; 0x2f
    21e4:	0f c0       	rjmp	.+30     	; 0x2204 <STEPPER_voidRotateCounterClockWise+0x1a8>
    21e6:	88 ec       	ldi	r24, 0xC8	; 200
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	9e a7       	std	Y+46, r25	; 0x2e
    21ec:	8d a7       	std	Y+45, r24	; 0x2d
    21ee:	8d a5       	ldd	r24, Y+45	; 0x2d
    21f0:	9e a5       	ldd	r25, Y+46	; 0x2e
    21f2:	01 97       	sbiw	r24, 0x01	; 1
    21f4:	f1 f7       	brne	.-4      	; 0x21f2 <STEPPER_voidRotateCounterClockWise+0x196>
    21f6:	9e a7       	std	Y+46, r25	; 0x2e
    21f8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    21fc:	98 a9       	ldd	r25, Y+48	; 0x30
    21fe:	01 97       	sbiw	r24, 0x01	; 1
    2200:	98 ab       	std	Y+48, r25	; 0x30
    2202:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2204:	8f a5       	ldd	r24, Y+47	; 0x2f
    2206:	98 a9       	ldd	r25, Y+48	; 0x30
    2208:	00 97       	sbiw	r24, 0x00	; 0
    220a:	69 f7       	brne	.-38     	; 0x21e6 <STEPPER_voidRotateCounterClockWise+0x18a>
    220c:	14 c0       	rjmp	.+40     	; 0x2236 <STEPPER_voidRotateCounterClockWise+0x1da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    220e:	69 a9       	ldd	r22, Y+49	; 0x31
    2210:	7a a9       	ldd	r23, Y+50	; 0x32
    2212:	8b a9       	ldd	r24, Y+51	; 0x33
    2214:	9c a9       	ldd	r25, Y+52	; 0x34
    2216:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    221a:	dc 01       	movw	r26, r24
    221c:	cb 01       	movw	r24, r22
    221e:	98 ab       	std	Y+48, r25	; 0x30
    2220:	8f a7       	std	Y+47, r24	; 0x2f
    2222:	8f a5       	ldd	r24, Y+47	; 0x2f
    2224:	98 a9       	ldd	r25, Y+48	; 0x30
    2226:	9c a7       	std	Y+44, r25	; 0x2c
    2228:	8b a7       	std	Y+43, r24	; 0x2b
    222a:	8b a5       	ldd	r24, Y+43	; 0x2b
    222c:	9c a5       	ldd	r25, Y+44	; 0x2c
    222e:	01 97       	sbiw	r24, 0x01	; 1
    2230:	f1 f7       	brne	.-4      	; 0x222e <STEPPER_voidRotateCounterClockWise+0x1d2>
    2232:	9c a7       	std	Y+44, r25	; 0x2c
    2234:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(20);

		/*Step 3 in stepper motor*/
		DIO_u8SetPinValue(Copy_pSTEPPER_tStepper->PORT, Copy_pSTEPPER_tStepper->PIN4, DIO_u8PIN_HIGH);
    2236:	fe 01       	movw	r30, r28
    2238:	ff 96       	adiw	r30, 0x3f	; 63
    223a:	01 90       	ld	r0, Z+
    223c:	f0 81       	ld	r31, Z
    223e:	e0 2d       	mov	r30, r0
    2240:	80 81       	ld	r24, Z
    2242:	fe 01       	movw	r30, r28
    2244:	ff 96       	adiw	r30, 0x3f	; 63
    2246:	01 90       	ld	r0, Z+
    2248:	f0 81       	ld	r31, Z
    224a:	e0 2d       	mov	r30, r0
    224c:	94 81       	ldd	r25, Z+4	; 0x04
    224e:	69 2f       	mov	r22, r25
    2250:	41 e0       	ldi	r20, 0x01	; 1
    2252:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Copy_pSTEPPER_tStepper->PORT, Copy_pSTEPPER_tStepper->PIN3, DIO_u8PIN_LOW);
    2256:	fe 01       	movw	r30, r28
    2258:	ff 96       	adiw	r30, 0x3f	; 63
    225a:	01 90       	ld	r0, Z+
    225c:	f0 81       	ld	r31, Z
    225e:	e0 2d       	mov	r30, r0
    2260:	80 81       	ld	r24, Z
    2262:	fe 01       	movw	r30, r28
    2264:	ff 96       	adiw	r30, 0x3f	; 63
    2266:	01 90       	ld	r0, Z+
    2268:	f0 81       	ld	r31, Z
    226a:	e0 2d       	mov	r30, r0
    226c:	93 81       	ldd	r25, Z+3	; 0x03
    226e:	69 2f       	mov	r22, r25
    2270:	40 e0       	ldi	r20, 0x00	; 0
    2272:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Copy_pSTEPPER_tStepper->PORT, Copy_pSTEPPER_tStepper->PIN2, DIO_u8PIN_HIGH);
    2276:	fe 01       	movw	r30, r28
    2278:	ff 96       	adiw	r30, 0x3f	; 63
    227a:	01 90       	ld	r0, Z+
    227c:	f0 81       	ld	r31, Z
    227e:	e0 2d       	mov	r30, r0
    2280:	80 81       	ld	r24, Z
    2282:	fe 01       	movw	r30, r28
    2284:	ff 96       	adiw	r30, 0x3f	; 63
    2286:	01 90       	ld	r0, Z+
    2288:	f0 81       	ld	r31, Z
    228a:	e0 2d       	mov	r30, r0
    228c:	92 81       	ldd	r25, Z+2	; 0x02
    228e:	69 2f       	mov	r22, r25
    2290:	41 e0       	ldi	r20, 0x01	; 1
    2292:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Copy_pSTEPPER_tStepper->PORT, Copy_pSTEPPER_tStepper->PIN1, DIO_u8PIN_HIGH);
    2296:	fe 01       	movw	r30, r28
    2298:	ff 96       	adiw	r30, 0x3f	; 63
    229a:	01 90       	ld	r0, Z+
    229c:	f0 81       	ld	r31, Z
    229e:	e0 2d       	mov	r30, r0
    22a0:	80 81       	ld	r24, Z
    22a2:	fe 01       	movw	r30, r28
    22a4:	ff 96       	adiw	r30, 0x3f	; 63
    22a6:	01 90       	ld	r0, Z+
    22a8:	f0 81       	ld	r31, Z
    22aa:	e0 2d       	mov	r30, r0
    22ac:	91 81       	ldd	r25, Z+1	; 0x01
    22ae:	69 2f       	mov	r22, r25
    22b0:	41 e0       	ldi	r20, 0x01	; 1
    22b2:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_u8SetPinValue>
    22b6:	80 e0       	ldi	r24, 0x00	; 0
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	a0 ea       	ldi	r26, 0xA0	; 160
    22bc:	b1 e4       	ldi	r27, 0x41	; 65
    22be:	8f a3       	std	Y+39, r24	; 0x27
    22c0:	98 a7       	std	Y+40, r25	; 0x28
    22c2:	a9 a7       	std	Y+41, r26	; 0x29
    22c4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22c6:	6f a1       	ldd	r22, Y+39	; 0x27
    22c8:	78 a5       	ldd	r23, Y+40	; 0x28
    22ca:	89 a5       	ldd	r24, Y+41	; 0x29
    22cc:	9a a5       	ldd	r25, Y+42	; 0x2a
    22ce:	20 e0       	ldi	r18, 0x00	; 0
    22d0:	30 e0       	ldi	r19, 0x00	; 0
    22d2:	4a ef       	ldi	r20, 0xFA	; 250
    22d4:	54 e4       	ldi	r21, 0x44	; 68
    22d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22da:	dc 01       	movw	r26, r24
    22dc:	cb 01       	movw	r24, r22
    22de:	8b a3       	std	Y+35, r24	; 0x23
    22e0:	9c a3       	std	Y+36, r25	; 0x24
    22e2:	ad a3       	std	Y+37, r26	; 0x25
    22e4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    22e6:	6b a1       	ldd	r22, Y+35	; 0x23
    22e8:	7c a1       	ldd	r23, Y+36	; 0x24
    22ea:	8d a1       	ldd	r24, Y+37	; 0x25
    22ec:	9e a1       	ldd	r25, Y+38	; 0x26
    22ee:	20 e0       	ldi	r18, 0x00	; 0
    22f0:	30 e0       	ldi	r19, 0x00	; 0
    22f2:	40 e8       	ldi	r20, 0x80	; 128
    22f4:	5f e3       	ldi	r21, 0x3F	; 63
    22f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22fa:	88 23       	and	r24, r24
    22fc:	2c f4       	brge	.+10     	; 0x2308 <STEPPER_voidRotateCounterClockWise+0x2ac>
		__ticks = 1;
    22fe:	81 e0       	ldi	r24, 0x01	; 1
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	9a a3       	std	Y+34, r25	; 0x22
    2304:	89 a3       	std	Y+33, r24	; 0x21
    2306:	3f c0       	rjmp	.+126    	; 0x2386 <STEPPER_voidRotateCounterClockWise+0x32a>
	else if (__tmp > 65535)
    2308:	6b a1       	ldd	r22, Y+35	; 0x23
    230a:	7c a1       	ldd	r23, Y+36	; 0x24
    230c:	8d a1       	ldd	r24, Y+37	; 0x25
    230e:	9e a1       	ldd	r25, Y+38	; 0x26
    2310:	20 e0       	ldi	r18, 0x00	; 0
    2312:	3f ef       	ldi	r19, 0xFF	; 255
    2314:	4f e7       	ldi	r20, 0x7F	; 127
    2316:	57 e4       	ldi	r21, 0x47	; 71
    2318:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    231c:	18 16       	cp	r1, r24
    231e:	4c f5       	brge	.+82     	; 0x2372 <STEPPER_voidRotateCounterClockWise+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2320:	6f a1       	ldd	r22, Y+39	; 0x27
    2322:	78 a5       	ldd	r23, Y+40	; 0x28
    2324:	89 a5       	ldd	r24, Y+41	; 0x29
    2326:	9a a5       	ldd	r25, Y+42	; 0x2a
    2328:	20 e0       	ldi	r18, 0x00	; 0
    232a:	30 e0       	ldi	r19, 0x00	; 0
    232c:	40 e2       	ldi	r20, 0x20	; 32
    232e:	51 e4       	ldi	r21, 0x41	; 65
    2330:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2334:	dc 01       	movw	r26, r24
    2336:	cb 01       	movw	r24, r22
    2338:	bc 01       	movw	r22, r24
    233a:	cd 01       	movw	r24, r26
    233c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2340:	dc 01       	movw	r26, r24
    2342:	cb 01       	movw	r24, r22
    2344:	9a a3       	std	Y+34, r25	; 0x22
    2346:	89 a3       	std	Y+33, r24	; 0x21
    2348:	0f c0       	rjmp	.+30     	; 0x2368 <STEPPER_voidRotateCounterClockWise+0x30c>
    234a:	88 ec       	ldi	r24, 0xC8	; 200
    234c:	90 e0       	ldi	r25, 0x00	; 0
    234e:	98 a3       	std	Y+32, r25	; 0x20
    2350:	8f 8f       	std	Y+31, r24	; 0x1f
    2352:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2354:	98 a1       	ldd	r25, Y+32	; 0x20
    2356:	01 97       	sbiw	r24, 0x01	; 1
    2358:	f1 f7       	brne	.-4      	; 0x2356 <STEPPER_voidRotateCounterClockWise+0x2fa>
    235a:	98 a3       	std	Y+32, r25	; 0x20
    235c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    235e:	89 a1       	ldd	r24, Y+33	; 0x21
    2360:	9a a1       	ldd	r25, Y+34	; 0x22
    2362:	01 97       	sbiw	r24, 0x01	; 1
    2364:	9a a3       	std	Y+34, r25	; 0x22
    2366:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2368:	89 a1       	ldd	r24, Y+33	; 0x21
    236a:	9a a1       	ldd	r25, Y+34	; 0x22
    236c:	00 97       	sbiw	r24, 0x00	; 0
    236e:	69 f7       	brne	.-38     	; 0x234a <STEPPER_voidRotateCounterClockWise+0x2ee>
    2370:	14 c0       	rjmp	.+40     	; 0x239a <STEPPER_voidRotateCounterClockWise+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2372:	6b a1       	ldd	r22, Y+35	; 0x23
    2374:	7c a1       	ldd	r23, Y+36	; 0x24
    2376:	8d a1       	ldd	r24, Y+37	; 0x25
    2378:	9e a1       	ldd	r25, Y+38	; 0x26
    237a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    237e:	dc 01       	movw	r26, r24
    2380:	cb 01       	movw	r24, r22
    2382:	9a a3       	std	Y+34, r25	; 0x22
    2384:	89 a3       	std	Y+33, r24	; 0x21
    2386:	89 a1       	ldd	r24, Y+33	; 0x21
    2388:	9a a1       	ldd	r25, Y+34	; 0x22
    238a:	9e 8f       	std	Y+30, r25	; 0x1e
    238c:	8d 8f       	std	Y+29, r24	; 0x1d
    238e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2390:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2392:	01 97       	sbiw	r24, 0x01	; 1
    2394:	f1 f7       	brne	.-4      	; 0x2392 <STEPPER_voidRotateCounterClockWise+0x336>
    2396:	9e 8f       	std	Y+30, r25	; 0x1e
    2398:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(20);

		/*Step 2 in stepper motor*/
		DIO_u8SetPinValue(Copy_pSTEPPER_tStepper->PORT, Copy_pSTEPPER_tStepper->PIN4, DIO_u8PIN_HIGH);
    239a:	fe 01       	movw	r30, r28
    239c:	ff 96       	adiw	r30, 0x3f	; 63
    239e:	01 90       	ld	r0, Z+
    23a0:	f0 81       	ld	r31, Z
    23a2:	e0 2d       	mov	r30, r0
    23a4:	80 81       	ld	r24, Z
    23a6:	fe 01       	movw	r30, r28
    23a8:	ff 96       	adiw	r30, 0x3f	; 63
    23aa:	01 90       	ld	r0, Z+
    23ac:	f0 81       	ld	r31, Z
    23ae:	e0 2d       	mov	r30, r0
    23b0:	94 81       	ldd	r25, Z+4	; 0x04
    23b2:	69 2f       	mov	r22, r25
    23b4:	41 e0       	ldi	r20, 0x01	; 1
    23b6:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Copy_pSTEPPER_tStepper->PORT, Copy_pSTEPPER_tStepper->PIN3, DIO_u8PIN_HIGH);
    23ba:	fe 01       	movw	r30, r28
    23bc:	ff 96       	adiw	r30, 0x3f	; 63
    23be:	01 90       	ld	r0, Z+
    23c0:	f0 81       	ld	r31, Z
    23c2:	e0 2d       	mov	r30, r0
    23c4:	80 81       	ld	r24, Z
    23c6:	fe 01       	movw	r30, r28
    23c8:	ff 96       	adiw	r30, 0x3f	; 63
    23ca:	01 90       	ld	r0, Z+
    23cc:	f0 81       	ld	r31, Z
    23ce:	e0 2d       	mov	r30, r0
    23d0:	93 81       	ldd	r25, Z+3	; 0x03
    23d2:	69 2f       	mov	r22, r25
    23d4:	41 e0       	ldi	r20, 0x01	; 1
    23d6:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Copy_pSTEPPER_tStepper->PORT, Copy_pSTEPPER_tStepper->PIN2, DIO_u8PIN_LOW);
    23da:	fe 01       	movw	r30, r28
    23dc:	ff 96       	adiw	r30, 0x3f	; 63
    23de:	01 90       	ld	r0, Z+
    23e0:	f0 81       	ld	r31, Z
    23e2:	e0 2d       	mov	r30, r0
    23e4:	80 81       	ld	r24, Z
    23e6:	fe 01       	movw	r30, r28
    23e8:	ff 96       	adiw	r30, 0x3f	; 63
    23ea:	01 90       	ld	r0, Z+
    23ec:	f0 81       	ld	r31, Z
    23ee:	e0 2d       	mov	r30, r0
    23f0:	92 81       	ldd	r25, Z+2	; 0x02
    23f2:	69 2f       	mov	r22, r25
    23f4:	40 e0       	ldi	r20, 0x00	; 0
    23f6:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Copy_pSTEPPER_tStepper->PORT, Copy_pSTEPPER_tStepper->PIN1, DIO_u8PIN_HIGH);
    23fa:	fe 01       	movw	r30, r28
    23fc:	ff 96       	adiw	r30, 0x3f	; 63
    23fe:	01 90       	ld	r0, Z+
    2400:	f0 81       	ld	r31, Z
    2402:	e0 2d       	mov	r30, r0
    2404:	80 81       	ld	r24, Z
    2406:	fe 01       	movw	r30, r28
    2408:	ff 96       	adiw	r30, 0x3f	; 63
    240a:	01 90       	ld	r0, Z+
    240c:	f0 81       	ld	r31, Z
    240e:	e0 2d       	mov	r30, r0
    2410:	91 81       	ldd	r25, Z+1	; 0x01
    2412:	69 2f       	mov	r22, r25
    2414:	41 e0       	ldi	r20, 0x01	; 1
    2416:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_u8SetPinValue>
    241a:	80 e0       	ldi	r24, 0x00	; 0
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	a0 ea       	ldi	r26, 0xA0	; 160
    2420:	b1 e4       	ldi	r27, 0x41	; 65
    2422:	89 8f       	std	Y+25, r24	; 0x19
    2424:	9a 8f       	std	Y+26, r25	; 0x1a
    2426:	ab 8f       	std	Y+27, r26	; 0x1b
    2428:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    242a:	69 8d       	ldd	r22, Y+25	; 0x19
    242c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    242e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2430:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2432:	20 e0       	ldi	r18, 0x00	; 0
    2434:	30 e0       	ldi	r19, 0x00	; 0
    2436:	4a ef       	ldi	r20, 0xFA	; 250
    2438:	54 e4       	ldi	r21, 0x44	; 68
    243a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    243e:	dc 01       	movw	r26, r24
    2440:	cb 01       	movw	r24, r22
    2442:	8d 8b       	std	Y+21, r24	; 0x15
    2444:	9e 8b       	std	Y+22, r25	; 0x16
    2446:	af 8b       	std	Y+23, r26	; 0x17
    2448:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    244a:	6d 89       	ldd	r22, Y+21	; 0x15
    244c:	7e 89       	ldd	r23, Y+22	; 0x16
    244e:	8f 89       	ldd	r24, Y+23	; 0x17
    2450:	98 8d       	ldd	r25, Y+24	; 0x18
    2452:	20 e0       	ldi	r18, 0x00	; 0
    2454:	30 e0       	ldi	r19, 0x00	; 0
    2456:	40 e8       	ldi	r20, 0x80	; 128
    2458:	5f e3       	ldi	r21, 0x3F	; 63
    245a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    245e:	88 23       	and	r24, r24
    2460:	2c f4       	brge	.+10     	; 0x246c <STEPPER_voidRotateCounterClockWise+0x410>
		__ticks = 1;
    2462:	81 e0       	ldi	r24, 0x01	; 1
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	9c 8b       	std	Y+20, r25	; 0x14
    2468:	8b 8b       	std	Y+19, r24	; 0x13
    246a:	3f c0       	rjmp	.+126    	; 0x24ea <STEPPER_voidRotateCounterClockWise+0x48e>
	else if (__tmp > 65535)
    246c:	6d 89       	ldd	r22, Y+21	; 0x15
    246e:	7e 89       	ldd	r23, Y+22	; 0x16
    2470:	8f 89       	ldd	r24, Y+23	; 0x17
    2472:	98 8d       	ldd	r25, Y+24	; 0x18
    2474:	20 e0       	ldi	r18, 0x00	; 0
    2476:	3f ef       	ldi	r19, 0xFF	; 255
    2478:	4f e7       	ldi	r20, 0x7F	; 127
    247a:	57 e4       	ldi	r21, 0x47	; 71
    247c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2480:	18 16       	cp	r1, r24
    2482:	4c f5       	brge	.+82     	; 0x24d6 <STEPPER_voidRotateCounterClockWise+0x47a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2484:	69 8d       	ldd	r22, Y+25	; 0x19
    2486:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2488:	8b 8d       	ldd	r24, Y+27	; 0x1b
    248a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    248c:	20 e0       	ldi	r18, 0x00	; 0
    248e:	30 e0       	ldi	r19, 0x00	; 0
    2490:	40 e2       	ldi	r20, 0x20	; 32
    2492:	51 e4       	ldi	r21, 0x41	; 65
    2494:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2498:	dc 01       	movw	r26, r24
    249a:	cb 01       	movw	r24, r22
    249c:	bc 01       	movw	r22, r24
    249e:	cd 01       	movw	r24, r26
    24a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24a4:	dc 01       	movw	r26, r24
    24a6:	cb 01       	movw	r24, r22
    24a8:	9c 8b       	std	Y+20, r25	; 0x14
    24aa:	8b 8b       	std	Y+19, r24	; 0x13
    24ac:	0f c0       	rjmp	.+30     	; 0x24cc <STEPPER_voidRotateCounterClockWise+0x470>
    24ae:	88 ec       	ldi	r24, 0xC8	; 200
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	9a 8b       	std	Y+18, r25	; 0x12
    24b4:	89 8b       	std	Y+17, r24	; 0x11
    24b6:	89 89       	ldd	r24, Y+17	; 0x11
    24b8:	9a 89       	ldd	r25, Y+18	; 0x12
    24ba:	01 97       	sbiw	r24, 0x01	; 1
    24bc:	f1 f7       	brne	.-4      	; 0x24ba <STEPPER_voidRotateCounterClockWise+0x45e>
    24be:	9a 8b       	std	Y+18, r25	; 0x12
    24c0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24c2:	8b 89       	ldd	r24, Y+19	; 0x13
    24c4:	9c 89       	ldd	r25, Y+20	; 0x14
    24c6:	01 97       	sbiw	r24, 0x01	; 1
    24c8:	9c 8b       	std	Y+20, r25	; 0x14
    24ca:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24cc:	8b 89       	ldd	r24, Y+19	; 0x13
    24ce:	9c 89       	ldd	r25, Y+20	; 0x14
    24d0:	00 97       	sbiw	r24, 0x00	; 0
    24d2:	69 f7       	brne	.-38     	; 0x24ae <STEPPER_voidRotateCounterClockWise+0x452>
    24d4:	14 c0       	rjmp	.+40     	; 0x24fe <STEPPER_voidRotateCounterClockWise+0x4a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24d6:	6d 89       	ldd	r22, Y+21	; 0x15
    24d8:	7e 89       	ldd	r23, Y+22	; 0x16
    24da:	8f 89       	ldd	r24, Y+23	; 0x17
    24dc:	98 8d       	ldd	r25, Y+24	; 0x18
    24de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24e2:	dc 01       	movw	r26, r24
    24e4:	cb 01       	movw	r24, r22
    24e6:	9c 8b       	std	Y+20, r25	; 0x14
    24e8:	8b 8b       	std	Y+19, r24	; 0x13
    24ea:	8b 89       	ldd	r24, Y+19	; 0x13
    24ec:	9c 89       	ldd	r25, Y+20	; 0x14
    24ee:	98 8b       	std	Y+16, r25	; 0x10
    24f0:	8f 87       	std	Y+15, r24	; 0x0f
    24f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    24f4:	98 89       	ldd	r25, Y+16	; 0x10
    24f6:	01 97       	sbiw	r24, 0x01	; 1
    24f8:	f1 f7       	brne	.-4      	; 0x24f6 <STEPPER_voidRotateCounterClockWise+0x49a>
    24fa:	98 8b       	std	Y+16, r25	; 0x10
    24fc:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(20);


		/*Step 1 in stepper motor*/
		DIO_u8SetPinValue(Copy_pSTEPPER_tStepper->PORT, Copy_pSTEPPER_tStepper->PIN4, DIO_u8PIN_HIGH);
    24fe:	fe 01       	movw	r30, r28
    2500:	ff 96       	adiw	r30, 0x3f	; 63
    2502:	01 90       	ld	r0, Z+
    2504:	f0 81       	ld	r31, Z
    2506:	e0 2d       	mov	r30, r0
    2508:	80 81       	ld	r24, Z
    250a:	fe 01       	movw	r30, r28
    250c:	ff 96       	adiw	r30, 0x3f	; 63
    250e:	01 90       	ld	r0, Z+
    2510:	f0 81       	ld	r31, Z
    2512:	e0 2d       	mov	r30, r0
    2514:	94 81       	ldd	r25, Z+4	; 0x04
    2516:	69 2f       	mov	r22, r25
    2518:	41 e0       	ldi	r20, 0x01	; 1
    251a:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Copy_pSTEPPER_tStepper->PORT, Copy_pSTEPPER_tStepper->PIN3, DIO_u8PIN_HIGH);
    251e:	fe 01       	movw	r30, r28
    2520:	ff 96       	adiw	r30, 0x3f	; 63
    2522:	01 90       	ld	r0, Z+
    2524:	f0 81       	ld	r31, Z
    2526:	e0 2d       	mov	r30, r0
    2528:	80 81       	ld	r24, Z
    252a:	fe 01       	movw	r30, r28
    252c:	ff 96       	adiw	r30, 0x3f	; 63
    252e:	01 90       	ld	r0, Z+
    2530:	f0 81       	ld	r31, Z
    2532:	e0 2d       	mov	r30, r0
    2534:	93 81       	ldd	r25, Z+3	; 0x03
    2536:	69 2f       	mov	r22, r25
    2538:	41 e0       	ldi	r20, 0x01	; 1
    253a:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Copy_pSTEPPER_tStepper->PORT, Copy_pSTEPPER_tStepper->PIN2, DIO_u8PIN_HIGH);
    253e:	fe 01       	movw	r30, r28
    2540:	ff 96       	adiw	r30, 0x3f	; 63
    2542:	01 90       	ld	r0, Z+
    2544:	f0 81       	ld	r31, Z
    2546:	e0 2d       	mov	r30, r0
    2548:	80 81       	ld	r24, Z
    254a:	fe 01       	movw	r30, r28
    254c:	ff 96       	adiw	r30, 0x3f	; 63
    254e:	01 90       	ld	r0, Z+
    2550:	f0 81       	ld	r31, Z
    2552:	e0 2d       	mov	r30, r0
    2554:	92 81       	ldd	r25, Z+2	; 0x02
    2556:	69 2f       	mov	r22, r25
    2558:	41 e0       	ldi	r20, 0x01	; 1
    255a:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Copy_pSTEPPER_tStepper->PORT, Copy_pSTEPPER_tStepper->PIN1, DIO_u8PIN_LOW);
    255e:	fe 01       	movw	r30, r28
    2560:	ff 96       	adiw	r30, 0x3f	; 63
    2562:	01 90       	ld	r0, Z+
    2564:	f0 81       	ld	r31, Z
    2566:	e0 2d       	mov	r30, r0
    2568:	80 81       	ld	r24, Z
    256a:	fe 01       	movw	r30, r28
    256c:	ff 96       	adiw	r30, 0x3f	; 63
    256e:	01 90       	ld	r0, Z+
    2570:	f0 81       	ld	r31, Z
    2572:	e0 2d       	mov	r30, r0
    2574:	91 81       	ldd	r25, Z+1	; 0x01
    2576:	69 2f       	mov	r22, r25
    2578:	40 e0       	ldi	r20, 0x00	; 0
    257a:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <DIO_u8SetPinValue>
    257e:	80 e0       	ldi	r24, 0x00	; 0
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	a0 ea       	ldi	r26, 0xA0	; 160
    2584:	b1 e4       	ldi	r27, 0x41	; 65
    2586:	8b 87       	std	Y+11, r24	; 0x0b
    2588:	9c 87       	std	Y+12, r25	; 0x0c
    258a:	ad 87       	std	Y+13, r26	; 0x0d
    258c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    258e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2590:	7c 85       	ldd	r23, Y+12	; 0x0c
    2592:	8d 85       	ldd	r24, Y+13	; 0x0d
    2594:	9e 85       	ldd	r25, Y+14	; 0x0e
    2596:	20 e0       	ldi	r18, 0x00	; 0
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	4a ef       	ldi	r20, 0xFA	; 250
    259c:	54 e4       	ldi	r21, 0x44	; 68
    259e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25a2:	dc 01       	movw	r26, r24
    25a4:	cb 01       	movw	r24, r22
    25a6:	8f 83       	std	Y+7, r24	; 0x07
    25a8:	98 87       	std	Y+8, r25	; 0x08
    25aa:	a9 87       	std	Y+9, r26	; 0x09
    25ac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25ae:	6f 81       	ldd	r22, Y+7	; 0x07
    25b0:	78 85       	ldd	r23, Y+8	; 0x08
    25b2:	89 85       	ldd	r24, Y+9	; 0x09
    25b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    25b6:	20 e0       	ldi	r18, 0x00	; 0
    25b8:	30 e0       	ldi	r19, 0x00	; 0
    25ba:	40 e8       	ldi	r20, 0x80	; 128
    25bc:	5f e3       	ldi	r21, 0x3F	; 63
    25be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25c2:	88 23       	and	r24, r24
    25c4:	2c f4       	brge	.+10     	; 0x25d0 <STEPPER_voidRotateCounterClockWise+0x574>
		__ticks = 1;
    25c6:	81 e0       	ldi	r24, 0x01	; 1
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	9e 83       	std	Y+6, r25	; 0x06
    25cc:	8d 83       	std	Y+5, r24	; 0x05
    25ce:	3f c0       	rjmp	.+126    	; 0x264e <STEPPER_voidRotateCounterClockWise+0x5f2>
	else if (__tmp > 65535)
    25d0:	6f 81       	ldd	r22, Y+7	; 0x07
    25d2:	78 85       	ldd	r23, Y+8	; 0x08
    25d4:	89 85       	ldd	r24, Y+9	; 0x09
    25d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    25d8:	20 e0       	ldi	r18, 0x00	; 0
    25da:	3f ef       	ldi	r19, 0xFF	; 255
    25dc:	4f e7       	ldi	r20, 0x7F	; 127
    25de:	57 e4       	ldi	r21, 0x47	; 71
    25e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25e4:	18 16       	cp	r1, r24
    25e6:	4c f5       	brge	.+82     	; 0x263a <STEPPER_voidRotateCounterClockWise+0x5de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    25ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    25ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    25ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    25f0:	20 e0       	ldi	r18, 0x00	; 0
    25f2:	30 e0       	ldi	r19, 0x00	; 0
    25f4:	40 e2       	ldi	r20, 0x20	; 32
    25f6:	51 e4       	ldi	r21, 0x41	; 65
    25f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25fc:	dc 01       	movw	r26, r24
    25fe:	cb 01       	movw	r24, r22
    2600:	bc 01       	movw	r22, r24
    2602:	cd 01       	movw	r24, r26
    2604:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2608:	dc 01       	movw	r26, r24
    260a:	cb 01       	movw	r24, r22
    260c:	9e 83       	std	Y+6, r25	; 0x06
    260e:	8d 83       	std	Y+5, r24	; 0x05
    2610:	0f c0       	rjmp	.+30     	; 0x2630 <STEPPER_voidRotateCounterClockWise+0x5d4>
    2612:	88 ec       	ldi	r24, 0xC8	; 200
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	9c 83       	std	Y+4, r25	; 0x04
    2618:	8b 83       	std	Y+3, r24	; 0x03
    261a:	8b 81       	ldd	r24, Y+3	; 0x03
    261c:	9c 81       	ldd	r25, Y+4	; 0x04
    261e:	01 97       	sbiw	r24, 0x01	; 1
    2620:	f1 f7       	brne	.-4      	; 0x261e <STEPPER_voidRotateCounterClockWise+0x5c2>
    2622:	9c 83       	std	Y+4, r25	; 0x04
    2624:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2626:	8d 81       	ldd	r24, Y+5	; 0x05
    2628:	9e 81       	ldd	r25, Y+6	; 0x06
    262a:	01 97       	sbiw	r24, 0x01	; 1
    262c:	9e 83       	std	Y+6, r25	; 0x06
    262e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2630:	8d 81       	ldd	r24, Y+5	; 0x05
    2632:	9e 81       	ldd	r25, Y+6	; 0x06
    2634:	00 97       	sbiw	r24, 0x00	; 0
    2636:	69 f7       	brne	.-38     	; 0x2612 <STEPPER_voidRotateCounterClockWise+0x5b6>
    2638:	14 c0       	rjmp	.+40     	; 0x2662 <STEPPER_voidRotateCounterClockWise+0x606>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    263a:	6f 81       	ldd	r22, Y+7	; 0x07
    263c:	78 85       	ldd	r23, Y+8	; 0x08
    263e:	89 85       	ldd	r24, Y+9	; 0x09
    2640:	9a 85       	ldd	r25, Y+10	; 0x0a
    2642:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2646:	dc 01       	movw	r26, r24
    2648:	cb 01       	movw	r24, r22
    264a:	9e 83       	std	Y+6, r25	; 0x06
    264c:	8d 83       	std	Y+5, r24	; 0x05
    264e:	8d 81       	ldd	r24, Y+5	; 0x05
    2650:	9e 81       	ldd	r25, Y+6	; 0x06
    2652:	9a 83       	std	Y+2, r25	; 0x02
    2654:	89 83       	std	Y+1, r24	; 0x01
    2656:	89 81       	ldd	r24, Y+1	; 0x01
    2658:	9a 81       	ldd	r25, Y+2	; 0x02
    265a:	01 97       	sbiw	r24, 0x01	; 1
    265c:	f1 f7       	brne	.-4      	; 0x265a <STEPPER_voidRotateCounterClockWise+0x5fe>
    265e:	9a 83       	std	Y+2, r25	; 0x02
    2660:	89 83       	std	Y+1, r24	; 0x01

	/*calculate number of iterations to reach the required angle*/
	u8 Local_u8NumberOfIterations = Local_u8NumberOfSteps / 4;

	u8 Local_u8Iter;
	for(Local_u8Iter = 0; Local_u8Iter<Local_u8NumberOfIterations; Local_u8Iter++)
    2662:	89 ad       	ldd	r24, Y+57	; 0x39
    2664:	8f 5f       	subi	r24, 0xFF	; 255
    2666:	89 af       	std	Y+57, r24	; 0x39
    2668:	99 ad       	ldd	r25, Y+57	; 0x39
    266a:	8a ad       	ldd	r24, Y+58	; 0x3a
    266c:	98 17       	cp	r25, r24
    266e:	08 f4       	brcc	.+2      	; 0x2672 <STEPPER_voidRotateCounterClockWise+0x616>
    2670:	30 cd       	rjmp	.-1440   	; 0x20d2 <STEPPER_voidRotateCounterClockWise+0x76>
		DIO_u8SetPinValue(Copy_pSTEPPER_tStepper->PORT, Copy_pSTEPPER_tStepper->PIN2, DIO_u8PIN_HIGH);
		DIO_u8SetPinValue(Copy_pSTEPPER_tStepper->PORT, Copy_pSTEPPER_tStepper->PIN1, DIO_u8PIN_LOW);
		_delay_ms(20);

	}
}
    2672:	c0 5c       	subi	r28, 0xC0	; 192
    2674:	df 4f       	sbci	r29, 0xFF	; 255
    2676:	0f b6       	in	r0, 0x3f	; 63
    2678:	f8 94       	cli
    267a:	de bf       	out	0x3e, r29	; 62
    267c:	0f be       	out	0x3f, r0	; 63
    267e:	cd bf       	out	0x3d, r28	; 61
    2680:	cf 91       	pop	r28
    2682:	df 91       	pop	r29
    2684:	08 95       	ret

00002686 <main>:
#include "DCMOTOR_interface.h"
#include "STEPPER_interface.h"
#include <util/delay.h>

void main(void)
{
    2686:	ef 92       	push	r14
    2688:	ff 92       	push	r15
    268a:	0f 93       	push	r16
    268c:	1f 93       	push	r17
    268e:	df 93       	push	r29
    2690:	cf 93       	push	r28
    2692:	cd b7       	in	r28, 0x3d	; 61
    2694:	de b7       	in	r29, 0x3e	; 62
    2696:	ce 55       	subi	r28, 0x5E	; 94
    2698:	d0 40       	sbci	r29, 0x00	; 0
    269a:	0f b6       	in	r0, 0x3f	; 63
    269c:	f8 94       	cli
    269e:	de bf       	out	0x3e, r29	; 62
    26a0:	0f be       	out	0x3f, r0	; 63
    26a2:	cd bf       	out	0x3d, r28	; 61
	PORT_voidInit();
    26a4:	0e 94 c8 0c 	call	0x1990	; 0x1990 <PORT_voidInit>
	CLCD_voidInit();
    26a8:	0e 94 38 08 	call	0x1070	; 0x1070 <CLCD_voidInit>

	u8 Local_u8Option;
	STEPPER_t stp1;
	stp1.PORT = DIO_u8PORTD;
    26ac:	fe 01       	movw	r30, r28
    26ae:	ea 5a       	subi	r30, 0xAA	; 170
    26b0:	ff 4f       	sbci	r31, 0xFF	; 255
    26b2:	83 e0       	ldi	r24, 0x03	; 3
    26b4:	80 83       	st	Z, r24
	stp1.PIN1 = DIO_u8PIN0;
    26b6:	fe 01       	movw	r30, r28
    26b8:	ea 5a       	subi	r30, 0xAA	; 170
    26ba:	ff 4f       	sbci	r31, 0xFF	; 255
    26bc:	11 82       	std	Z+1, r1	; 0x01
	stp1.PIN2 = DIO_u8PIN1;
    26be:	fe 01       	movw	r30, r28
    26c0:	ea 5a       	subi	r30, 0xAA	; 170
    26c2:	ff 4f       	sbci	r31, 0xFF	; 255
    26c4:	81 e0       	ldi	r24, 0x01	; 1
    26c6:	82 83       	std	Z+2, r24	; 0x02
	stp1.PIN3 = DIO_u8PIN2;
    26c8:	fe 01       	movw	r30, r28
    26ca:	ea 5a       	subi	r30, 0xAA	; 170
    26cc:	ff 4f       	sbci	r31, 0xFF	; 255
    26ce:	82 e0       	ldi	r24, 0x02	; 2
    26d0:	83 83       	std	Z+3, r24	; 0x03
	stp1.PIN4 = DIO_u8PIN3;
    26d2:	fe 01       	movw	r30, r28
    26d4:	ea 5a       	subi	r30, 0xAA	; 170
    26d6:	ff 4f       	sbci	r31, 0xFF	; 255
    26d8:	83 e0       	ldi	r24, 0x03	; 3
    26da:	84 83       	std	Z+4, r24	; 0x04
	stp1.DEGREE = 0.0;
    26dc:	fe 01       	movw	r30, r28
    26de:	ea 5a       	subi	r30, 0xAA	; 170
    26e0:	ff 4f       	sbci	r31, 0xFF	; 255
    26e2:	80 e0       	ldi	r24, 0x00	; 0
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	a0 e0       	ldi	r26, 0x00	; 0
    26e8:	b0 e0       	ldi	r27, 0x00	; 0
    26ea:	85 83       	std	Z+5, r24	; 0x05
    26ec:	96 83       	std	Z+6, r25	; 0x06
    26ee:	a7 83       	std	Z+7, r26	; 0x07
    26f0:	b0 87       	std	Z+8, r27	; 0x08

	CLCD_voidSendString("Welcome to Motor Dashboard App");
    26f2:	80 e6       	ldi	r24, 0x60	; 96
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <CLCD_voidSendString>
    26fa:	fe 01       	movw	r30, r28
    26fc:	ef 5a       	subi	r30, 0xAF	; 175
    26fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2700:	80 e0       	ldi	r24, 0x00	; 0
    2702:	90 e0       	ldi	r25, 0x00	; 0
    2704:	aa ef       	ldi	r26, 0xFA	; 250
    2706:	b3 e4       	ldi	r27, 0x43	; 67
    2708:	80 83       	st	Z, r24
    270a:	91 83       	std	Z+1, r25	; 0x01
    270c:	a2 83       	std	Z+2, r26	; 0x02
    270e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2710:	8e 01       	movw	r16, r28
    2712:	03 5b       	subi	r16, 0xB3	; 179
    2714:	1f 4f       	sbci	r17, 0xFF	; 255
    2716:	fe 01       	movw	r30, r28
    2718:	ef 5a       	subi	r30, 0xAF	; 175
    271a:	ff 4f       	sbci	r31, 0xFF	; 255
    271c:	60 81       	ld	r22, Z
    271e:	71 81       	ldd	r23, Z+1	; 0x01
    2720:	82 81       	ldd	r24, Z+2	; 0x02
    2722:	93 81       	ldd	r25, Z+3	; 0x03
    2724:	20 e0       	ldi	r18, 0x00	; 0
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	4a ef       	ldi	r20, 0xFA	; 250
    272a:	54 e4       	ldi	r21, 0x44	; 68
    272c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2730:	dc 01       	movw	r26, r24
    2732:	cb 01       	movw	r24, r22
    2734:	f8 01       	movw	r30, r16
    2736:	80 83       	st	Z, r24
    2738:	91 83       	std	Z+1, r25	; 0x01
    273a:	a2 83       	std	Z+2, r26	; 0x02
    273c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    273e:	fe 01       	movw	r30, r28
    2740:	e3 5b       	subi	r30, 0xB3	; 179
    2742:	ff 4f       	sbci	r31, 0xFF	; 255
    2744:	60 81       	ld	r22, Z
    2746:	71 81       	ldd	r23, Z+1	; 0x01
    2748:	82 81       	ldd	r24, Z+2	; 0x02
    274a:	93 81       	ldd	r25, Z+3	; 0x03
    274c:	20 e0       	ldi	r18, 0x00	; 0
    274e:	30 e0       	ldi	r19, 0x00	; 0
    2750:	40 e8       	ldi	r20, 0x80	; 128
    2752:	5f e3       	ldi	r21, 0x3F	; 63
    2754:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2758:	88 23       	and	r24, r24
    275a:	44 f4       	brge	.+16     	; 0x276c <main+0xe6>
		__ticks = 1;
    275c:	fe 01       	movw	r30, r28
    275e:	e5 5b       	subi	r30, 0xB5	; 181
    2760:	ff 4f       	sbci	r31, 0xFF	; 255
    2762:	81 e0       	ldi	r24, 0x01	; 1
    2764:	90 e0       	ldi	r25, 0x00	; 0
    2766:	91 83       	std	Z+1, r25	; 0x01
    2768:	80 83       	st	Z, r24
    276a:	64 c0       	rjmp	.+200    	; 0x2834 <main+0x1ae>
	else if (__tmp > 65535)
    276c:	fe 01       	movw	r30, r28
    276e:	e3 5b       	subi	r30, 0xB3	; 179
    2770:	ff 4f       	sbci	r31, 0xFF	; 255
    2772:	60 81       	ld	r22, Z
    2774:	71 81       	ldd	r23, Z+1	; 0x01
    2776:	82 81       	ldd	r24, Z+2	; 0x02
    2778:	93 81       	ldd	r25, Z+3	; 0x03
    277a:	20 e0       	ldi	r18, 0x00	; 0
    277c:	3f ef       	ldi	r19, 0xFF	; 255
    277e:	4f e7       	ldi	r20, 0x7F	; 127
    2780:	57 e4       	ldi	r21, 0x47	; 71
    2782:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2786:	18 16       	cp	r1, r24
    2788:	0c f0       	brlt	.+2      	; 0x278c <main+0x106>
    278a:	43 c0       	rjmp	.+134    	; 0x2812 <main+0x18c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    278c:	fe 01       	movw	r30, r28
    278e:	ef 5a       	subi	r30, 0xAF	; 175
    2790:	ff 4f       	sbci	r31, 0xFF	; 255
    2792:	60 81       	ld	r22, Z
    2794:	71 81       	ldd	r23, Z+1	; 0x01
    2796:	82 81       	ldd	r24, Z+2	; 0x02
    2798:	93 81       	ldd	r25, Z+3	; 0x03
    279a:	20 e0       	ldi	r18, 0x00	; 0
    279c:	30 e0       	ldi	r19, 0x00	; 0
    279e:	40 e2       	ldi	r20, 0x20	; 32
    27a0:	51 e4       	ldi	r21, 0x41	; 65
    27a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27a6:	dc 01       	movw	r26, r24
    27a8:	cb 01       	movw	r24, r22
    27aa:	8e 01       	movw	r16, r28
    27ac:	05 5b       	subi	r16, 0xB5	; 181
    27ae:	1f 4f       	sbci	r17, 0xFF	; 255
    27b0:	bc 01       	movw	r22, r24
    27b2:	cd 01       	movw	r24, r26
    27b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27b8:	dc 01       	movw	r26, r24
    27ba:	cb 01       	movw	r24, r22
    27bc:	f8 01       	movw	r30, r16
    27be:	91 83       	std	Z+1, r25	; 0x01
    27c0:	80 83       	st	Z, r24
    27c2:	1f c0       	rjmp	.+62     	; 0x2802 <main+0x17c>
    27c4:	fe 01       	movw	r30, r28
    27c6:	e7 5b       	subi	r30, 0xB7	; 183
    27c8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ca:	88 ec       	ldi	r24, 0xC8	; 200
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	91 83       	std	Z+1, r25	; 0x01
    27d0:	80 83       	st	Z, r24
    27d2:	fe 01       	movw	r30, r28
    27d4:	e7 5b       	subi	r30, 0xB7	; 183
    27d6:	ff 4f       	sbci	r31, 0xFF	; 255
    27d8:	80 81       	ld	r24, Z
    27da:	91 81       	ldd	r25, Z+1	; 0x01
    27dc:	01 97       	sbiw	r24, 0x01	; 1
    27de:	f1 f7       	brne	.-4      	; 0x27dc <main+0x156>
    27e0:	fe 01       	movw	r30, r28
    27e2:	e7 5b       	subi	r30, 0xB7	; 183
    27e4:	ff 4f       	sbci	r31, 0xFF	; 255
    27e6:	91 83       	std	Z+1, r25	; 0x01
    27e8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ea:	de 01       	movw	r26, r28
    27ec:	a5 5b       	subi	r26, 0xB5	; 181
    27ee:	bf 4f       	sbci	r27, 0xFF	; 255
    27f0:	fe 01       	movw	r30, r28
    27f2:	e5 5b       	subi	r30, 0xB5	; 181
    27f4:	ff 4f       	sbci	r31, 0xFF	; 255
    27f6:	80 81       	ld	r24, Z
    27f8:	91 81       	ldd	r25, Z+1	; 0x01
    27fa:	01 97       	sbiw	r24, 0x01	; 1
    27fc:	11 96       	adiw	r26, 0x01	; 1
    27fe:	9c 93       	st	X, r25
    2800:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2802:	fe 01       	movw	r30, r28
    2804:	e5 5b       	subi	r30, 0xB5	; 181
    2806:	ff 4f       	sbci	r31, 0xFF	; 255
    2808:	80 81       	ld	r24, Z
    280a:	91 81       	ldd	r25, Z+1	; 0x01
    280c:	00 97       	sbiw	r24, 0x00	; 0
    280e:	d1 f6       	brne	.-76     	; 0x27c4 <main+0x13e>
    2810:	27 c0       	rjmp	.+78     	; 0x2860 <main+0x1da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2812:	8e 01       	movw	r16, r28
    2814:	05 5b       	subi	r16, 0xB5	; 181
    2816:	1f 4f       	sbci	r17, 0xFF	; 255
    2818:	fe 01       	movw	r30, r28
    281a:	e3 5b       	subi	r30, 0xB3	; 179
    281c:	ff 4f       	sbci	r31, 0xFF	; 255
    281e:	60 81       	ld	r22, Z
    2820:	71 81       	ldd	r23, Z+1	; 0x01
    2822:	82 81       	ldd	r24, Z+2	; 0x02
    2824:	93 81       	ldd	r25, Z+3	; 0x03
    2826:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    282a:	dc 01       	movw	r26, r24
    282c:	cb 01       	movw	r24, r22
    282e:	f8 01       	movw	r30, r16
    2830:	91 83       	std	Z+1, r25	; 0x01
    2832:	80 83       	st	Z, r24
    2834:	de 01       	movw	r26, r28
    2836:	a9 5b       	subi	r26, 0xB9	; 185
    2838:	bf 4f       	sbci	r27, 0xFF	; 255
    283a:	fe 01       	movw	r30, r28
    283c:	e5 5b       	subi	r30, 0xB5	; 181
    283e:	ff 4f       	sbci	r31, 0xFF	; 255
    2840:	80 81       	ld	r24, Z
    2842:	91 81       	ldd	r25, Z+1	; 0x01
    2844:	8d 93       	st	X+, r24
    2846:	9c 93       	st	X, r25
    2848:	fe 01       	movw	r30, r28
    284a:	e9 5b       	subi	r30, 0xB9	; 185
    284c:	ff 4f       	sbci	r31, 0xFF	; 255
    284e:	80 81       	ld	r24, Z
    2850:	91 81       	ldd	r25, Z+1	; 0x01
    2852:	01 97       	sbiw	r24, 0x01	; 1
    2854:	f1 f7       	brne	.-4      	; 0x2852 <main+0x1cc>
    2856:	fe 01       	movw	r30, r28
    2858:	e9 5b       	subi	r30, 0xB9	; 185
    285a:	ff 4f       	sbci	r31, 0xFF	; 255
    285c:	91 83       	std	Z+1, r25	; 0x01
    285e:	80 83       	st	Z, r24
	_delay_ms(500);

	MAIN_MENU:
	/*clear LCD*/
	CLCD_voidSendCommand(0x01);
    2860:	81 e0       	ldi	r24, 0x01	; 1
    2862:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <CLCD_voidSendCommand>

	CLCD_voidSendString("DC motor:1");
    2866:	8f e7       	ldi	r24, 0x7F	; 127
    2868:	90 e0       	ldi	r25, 0x00	; 0
    286a:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <CLCD_voidSendString>
	CLCD_voidGoToXY(1,0);
    286e:	81 e0       	ldi	r24, 0x01	; 1
    2870:	60 e0       	ldi	r22, 0x00	; 0
    2872:	0e 94 c6 08 	call	0x118c	; 0x118c <CLCD_voidGoToXY>
	CLCD_voidSendString("stepper:2");
    2876:	8a e8       	ldi	r24, 0x8A	; 138
    2878:	90 e0       	ldi	r25, 0x00	; 0
    287a:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <CLCD_voidSendString>

	/*select between dc and stepper*/
	do{
		Local_u8Option = KPD_u8GetPressedKey();
    287e:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <KPD_u8GetPressedKey>
    2882:	fe 01       	movw	r30, r28
    2884:	eb 5a       	subi	r30, 0xAB	; 171
    2886:	ff 4f       	sbci	r31, 0xFF	; 255
    2888:	80 83       	st	Z, r24
	}while(Local_u8Option == 0xff);
    288a:	fe 01       	movw	r30, r28
    288c:	eb 5a       	subi	r30, 0xAB	; 171
    288e:	ff 4f       	sbci	r31, 0xFF	; 255
    2890:	80 81       	ld	r24, Z
    2892:	8f 3f       	cpi	r24, 0xFF	; 255
    2894:	a1 f3       	breq	.-24     	; 0x287e <main+0x1f8>

	/*display option number on the LCD*/
	CLCD_voidSendCommand(0x01);
    2896:	81 e0       	ldi	r24, 0x01	; 1
    2898:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <CLCD_voidSendCommand>
	CLCD_voidSendData(Local_u8Option + '0');
    289c:	fe 01       	movw	r30, r28
    289e:	eb 5a       	subi	r30, 0xAB	; 171
    28a0:	ff 4f       	sbci	r31, 0xFF	; 255
    28a2:	80 81       	ld	r24, Z
    28a4:	80 5d       	subi	r24, 0xD0	; 208
    28a6:	0e 94 9a 07 	call	0xf34	; 0xf34 <CLCD_voidSendData>
    28aa:	fe 01       	movw	r30, r28
    28ac:	ed 5b       	subi	r30, 0xBD	; 189
    28ae:	ff 4f       	sbci	r31, 0xFF	; 255
    28b0:	80 e0       	ldi	r24, 0x00	; 0
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	ac e8       	ldi	r26, 0x8C	; 140
    28b6:	b2 e4       	ldi	r27, 0x42	; 66
    28b8:	80 83       	st	Z, r24
    28ba:	91 83       	std	Z+1, r25	; 0x01
    28bc:	a2 83       	std	Z+2, r26	; 0x02
    28be:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28c0:	8e 01       	movw	r16, r28
    28c2:	01 5c       	subi	r16, 0xC1	; 193
    28c4:	1f 4f       	sbci	r17, 0xFF	; 255
    28c6:	fe 01       	movw	r30, r28
    28c8:	ed 5b       	subi	r30, 0xBD	; 189
    28ca:	ff 4f       	sbci	r31, 0xFF	; 255
    28cc:	60 81       	ld	r22, Z
    28ce:	71 81       	ldd	r23, Z+1	; 0x01
    28d0:	82 81       	ldd	r24, Z+2	; 0x02
    28d2:	93 81       	ldd	r25, Z+3	; 0x03
    28d4:	20 e0       	ldi	r18, 0x00	; 0
    28d6:	30 e0       	ldi	r19, 0x00	; 0
    28d8:	4a ef       	ldi	r20, 0xFA	; 250
    28da:	54 e4       	ldi	r21, 0x44	; 68
    28dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28e0:	dc 01       	movw	r26, r24
    28e2:	cb 01       	movw	r24, r22
    28e4:	f8 01       	movw	r30, r16
    28e6:	80 83       	st	Z, r24
    28e8:	91 83       	std	Z+1, r25	; 0x01
    28ea:	a2 83       	std	Z+2, r26	; 0x02
    28ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28ee:	fe 01       	movw	r30, r28
    28f0:	ff 96       	adiw	r30, 0x3f	; 63
    28f2:	60 81       	ld	r22, Z
    28f4:	71 81       	ldd	r23, Z+1	; 0x01
    28f6:	82 81       	ldd	r24, Z+2	; 0x02
    28f8:	93 81       	ldd	r25, Z+3	; 0x03
    28fa:	20 e0       	ldi	r18, 0x00	; 0
    28fc:	30 e0       	ldi	r19, 0x00	; 0
    28fe:	40 e8       	ldi	r20, 0x80	; 128
    2900:	5f e3       	ldi	r21, 0x3F	; 63
    2902:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2906:	88 23       	and	r24, r24
    2908:	2c f4       	brge	.+10     	; 0x2914 <main+0x28e>
		__ticks = 1;
    290a:	81 e0       	ldi	r24, 0x01	; 1
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	9e af       	std	Y+62, r25	; 0x3e
    2910:	8d af       	std	Y+61, r24	; 0x3d
    2912:	46 c0       	rjmp	.+140    	; 0x29a0 <main+0x31a>
	else if (__tmp > 65535)
    2914:	fe 01       	movw	r30, r28
    2916:	ff 96       	adiw	r30, 0x3f	; 63
    2918:	60 81       	ld	r22, Z
    291a:	71 81       	ldd	r23, Z+1	; 0x01
    291c:	82 81       	ldd	r24, Z+2	; 0x02
    291e:	93 81       	ldd	r25, Z+3	; 0x03
    2920:	20 e0       	ldi	r18, 0x00	; 0
    2922:	3f ef       	ldi	r19, 0xFF	; 255
    2924:	4f e7       	ldi	r20, 0x7F	; 127
    2926:	57 e4       	ldi	r21, 0x47	; 71
    2928:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    292c:	18 16       	cp	r1, r24
    292e:	64 f5       	brge	.+88     	; 0x2988 <main+0x302>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2930:	fe 01       	movw	r30, r28
    2932:	ed 5b       	subi	r30, 0xBD	; 189
    2934:	ff 4f       	sbci	r31, 0xFF	; 255
    2936:	60 81       	ld	r22, Z
    2938:	71 81       	ldd	r23, Z+1	; 0x01
    293a:	82 81       	ldd	r24, Z+2	; 0x02
    293c:	93 81       	ldd	r25, Z+3	; 0x03
    293e:	20 e0       	ldi	r18, 0x00	; 0
    2940:	30 e0       	ldi	r19, 0x00	; 0
    2942:	40 e2       	ldi	r20, 0x20	; 32
    2944:	51 e4       	ldi	r21, 0x41	; 65
    2946:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    294a:	dc 01       	movw	r26, r24
    294c:	cb 01       	movw	r24, r22
    294e:	bc 01       	movw	r22, r24
    2950:	cd 01       	movw	r24, r26
    2952:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2956:	dc 01       	movw	r26, r24
    2958:	cb 01       	movw	r24, r22
    295a:	9e af       	std	Y+62, r25	; 0x3e
    295c:	8d af       	std	Y+61, r24	; 0x3d
    295e:	0f c0       	rjmp	.+30     	; 0x297e <main+0x2f8>
    2960:	88 ec       	ldi	r24, 0xC8	; 200
    2962:	90 e0       	ldi	r25, 0x00	; 0
    2964:	9c af       	std	Y+60, r25	; 0x3c
    2966:	8b af       	std	Y+59, r24	; 0x3b
    2968:	8b ad       	ldd	r24, Y+59	; 0x3b
    296a:	9c ad       	ldd	r25, Y+60	; 0x3c
    296c:	01 97       	sbiw	r24, 0x01	; 1
    296e:	f1 f7       	brne	.-4      	; 0x296c <main+0x2e6>
    2970:	9c af       	std	Y+60, r25	; 0x3c
    2972:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2974:	8d ad       	ldd	r24, Y+61	; 0x3d
    2976:	9e ad       	ldd	r25, Y+62	; 0x3e
    2978:	01 97       	sbiw	r24, 0x01	; 1
    297a:	9e af       	std	Y+62, r25	; 0x3e
    297c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    297e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2980:	9e ad       	ldd	r25, Y+62	; 0x3e
    2982:	00 97       	sbiw	r24, 0x00	; 0
    2984:	69 f7       	brne	.-38     	; 0x2960 <main+0x2da>
    2986:	16 c0       	rjmp	.+44     	; 0x29b4 <main+0x32e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2988:	fe 01       	movw	r30, r28
    298a:	ff 96       	adiw	r30, 0x3f	; 63
    298c:	60 81       	ld	r22, Z
    298e:	71 81       	ldd	r23, Z+1	; 0x01
    2990:	82 81       	ldd	r24, Z+2	; 0x02
    2992:	93 81       	ldd	r25, Z+3	; 0x03
    2994:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2998:	dc 01       	movw	r26, r24
    299a:	cb 01       	movw	r24, r22
    299c:	9e af       	std	Y+62, r25	; 0x3e
    299e:	8d af       	std	Y+61, r24	; 0x3d
    29a0:	8d ad       	ldd	r24, Y+61	; 0x3d
    29a2:	9e ad       	ldd	r25, Y+62	; 0x3e
    29a4:	9a af       	std	Y+58, r25	; 0x3a
    29a6:	89 af       	std	Y+57, r24	; 0x39
    29a8:	89 ad       	ldd	r24, Y+57	; 0x39
    29aa:	9a ad       	ldd	r25, Y+58	; 0x3a
    29ac:	01 97       	sbiw	r24, 0x01	; 1
    29ae:	f1 f7       	brne	.-4      	; 0x29ac <main+0x326>
    29b0:	9a af       	std	Y+58, r25	; 0x3a
    29b2:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(70);
	CLCD_voidSendCommand(0x01);
    29b4:	81 e0       	ldi	r24, 0x01	; 1
    29b6:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <CLCD_voidSendCommand>

	/*if dc motor selected*/
	if(Local_u8Option == 1)
    29ba:	fe 01       	movw	r30, r28
    29bc:	eb 5a       	subi	r30, 0xAB	; 171
    29be:	ff 4f       	sbci	r31, 0xFF	; 255
    29c0:	80 81       	ld	r24, Z
    29c2:	81 30       	cpi	r24, 0x01	; 1
    29c4:	09 f0       	breq	.+2      	; 0x29c8 <main+0x342>
    29c6:	f3 c0       	rjmp	.+486    	; 0x2bae <main+0x528>
	{
		CLCD_voidSendString("Rotate CW:1");
    29c8:	84 e9       	ldi	r24, 0x94	; 148
    29ca:	90 e0       	ldi	r25, 0x00	; 0
    29cc:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <CLCD_voidSendString>
		CLCD_voidGoToXY(1,0);
    29d0:	81 e0       	ldi	r24, 0x01	; 1
    29d2:	60 e0       	ldi	r22, 0x00	; 0
    29d4:	0e 94 c6 08 	call	0x118c	; 0x118c <CLCD_voidGoToXY>
		CLCD_voidSendString("Rotate CCW:2");
    29d8:	80 ea       	ldi	r24, 0xA0	; 160
    29da:	90 e0       	ldi	r25, 0x00	; 0
    29dc:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <CLCD_voidSendString>

		/*select between CW and CCW*/
		do{
			Local_u8Option = KPD_u8GetPressedKey();
    29e0:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <KPD_u8GetPressedKey>
    29e4:	fe 01       	movw	r30, r28
    29e6:	eb 5a       	subi	r30, 0xAB	; 171
    29e8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ea:	80 83       	st	Z, r24
		}while(Local_u8Option == 0xff);
    29ec:	fe 01       	movw	r30, r28
    29ee:	eb 5a       	subi	r30, 0xAB	; 171
    29f0:	ff 4f       	sbci	r31, 0xFF	; 255
    29f2:	80 81       	ld	r24, Z
    29f4:	8f 3f       	cpi	r24, 0xFF	; 255
    29f6:	a1 f3       	breq	.-24     	; 0x29e0 <main+0x35a>

		/*display option number on the LCD*/
		CLCD_voidSendCommand(0x01);
    29f8:	81 e0       	ldi	r24, 0x01	; 1
    29fa:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <CLCD_voidSendCommand>
		CLCD_voidSendData(Local_u8Option + '0');
    29fe:	fe 01       	movw	r30, r28
    2a00:	eb 5a       	subi	r30, 0xAB	; 171
    2a02:	ff 4f       	sbci	r31, 0xFF	; 255
    2a04:	80 81       	ld	r24, Z
    2a06:	80 5d       	subi	r24, 0xD0	; 208
    2a08:	0e 94 9a 07 	call	0xf34	; 0xf34 <CLCD_voidSendData>
		if(Local_u8Option == 1)
    2a0c:	fe 01       	movw	r30, r28
    2a0e:	eb 5a       	subi	r30, 0xAB	; 171
    2a10:	ff 4f       	sbci	r31, 0xFF	; 255
    2a12:	80 81       	ld	r24, Z
    2a14:	81 30       	cpi	r24, 0x01	; 1
    2a16:	29 f5       	brne	.+74     	; 0x2a62 <main+0x3dc>
		{
			DCMOTOR_voidRotateClockWise(DIO_u8PORTB, DIO_u8PIN6, DIO_u8PIN7);
    2a18:	81 e0       	ldi	r24, 0x01	; 1
    2a1a:	66 e0       	ldi	r22, 0x06	; 6
    2a1c:	47 e0       	ldi	r20, 0x07	; 7
    2a1e:	0e 94 98 09 	call	0x1330	; 0x1330 <DCMOTOR_voidRotateClockWise>
			CLCD_voidSendCommand(0x01);
    2a22:	81 e0       	ldi	r24, 0x01	; 1
    2a24:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <CLCD_voidSendCommand>

			CLCD_voidSendString("Press any key to Stop");
    2a28:	8d ea       	ldi	r24, 0xAD	; 173
    2a2a:	90 e0       	ldi	r25, 0x00	; 0
    2a2c:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <CLCD_voidSendString>
			do{
				Local_u8Option = KPD_u8GetPressedKey();
    2a30:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <KPD_u8GetPressedKey>
    2a34:	fe 01       	movw	r30, r28
    2a36:	eb 5a       	subi	r30, 0xAB	; 171
    2a38:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3a:	80 83       	st	Z, r24
			}while(Local_u8Option == 0xff);
    2a3c:	fe 01       	movw	r30, r28
    2a3e:	eb 5a       	subi	r30, 0xAB	; 171
    2a40:	ff 4f       	sbci	r31, 0xFF	; 255
    2a42:	80 81       	ld	r24, Z
    2a44:	8f 3f       	cpi	r24, 0xFF	; 255
    2a46:	a1 f3       	breq	.-24     	; 0x2a30 <main+0x3aa>
			if(Local_u8Option != 0xff)
    2a48:	fe 01       	movw	r30, r28
    2a4a:	eb 5a       	subi	r30, 0xAB	; 171
    2a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4e:	80 81       	ld	r24, Z
    2a50:	8f 3f       	cpi	r24, 0xFF	; 255
    2a52:	31 f0       	breq	.+12     	; 0x2a60 <main+0x3da>
			{
				DCMOTOR_voidStopDCMotor(DIO_u8PORTB, DIO_u8PIN6, DIO_u8PIN7);
    2a54:	81 e0       	ldi	r24, 0x01	; 1
    2a56:	66 e0       	ldi	r22, 0x06	; 6
    2a58:	47 e0       	ldi	r20, 0x07	; 7
    2a5a:	0e 94 ca 09 	call	0x1394	; 0x1394 <DCMOTOR_voidStopDCMotor>
    2a5e:	00 cf       	rjmp	.-512    	; 0x2860 <main+0x1da>
    2a60:	a5 c0       	rjmp	.+330    	; 0x2bac <main+0x526>
				goto MAIN_MENU;
			}
		}
		else if(Local_u8Option == 2)
    2a62:	fe 01       	movw	r30, r28
    2a64:	eb 5a       	subi	r30, 0xAB	; 171
    2a66:	ff 4f       	sbci	r31, 0xFF	; 255
    2a68:	80 81       	ld	r24, Z
    2a6a:	82 30       	cpi	r24, 0x02	; 2
    2a6c:	29 f5       	brne	.+74     	; 0x2ab8 <main+0x432>
		{
			DCMOTOR_voidRotateCounterClockWise(DIO_u8PORTB, DIO_u8PIN7, DIO_u8PIN6);
    2a6e:	81 e0       	ldi	r24, 0x01	; 1
    2a70:	67 e0       	ldi	r22, 0x07	; 7
    2a72:	46 e0       	ldi	r20, 0x06	; 6
    2a74:	0e 94 b1 09 	call	0x1362	; 0x1362 <DCMOTOR_voidRotateCounterClockWise>
			CLCD_voidSendCommand(0x01);
    2a78:	81 e0       	ldi	r24, 0x01	; 1
    2a7a:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <CLCD_voidSendCommand>

			CLCD_voidSendString("Press any key to Stop");
    2a7e:	8d ea       	ldi	r24, 0xAD	; 173
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <CLCD_voidSendString>
			do{
				Local_u8Option = KPD_u8GetPressedKey();
    2a86:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <KPD_u8GetPressedKey>
    2a8a:	fe 01       	movw	r30, r28
    2a8c:	eb 5a       	subi	r30, 0xAB	; 171
    2a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a90:	80 83       	st	Z, r24
			}while(Local_u8Option == 0xff);
    2a92:	fe 01       	movw	r30, r28
    2a94:	eb 5a       	subi	r30, 0xAB	; 171
    2a96:	ff 4f       	sbci	r31, 0xFF	; 255
    2a98:	80 81       	ld	r24, Z
    2a9a:	8f 3f       	cpi	r24, 0xFF	; 255
    2a9c:	a1 f3       	breq	.-24     	; 0x2a86 <main+0x400>
			if(Local_u8Option != 0xff)
    2a9e:	fe 01       	movw	r30, r28
    2aa0:	eb 5a       	subi	r30, 0xAB	; 171
    2aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa4:	80 81       	ld	r24, Z
    2aa6:	8f 3f       	cpi	r24, 0xFF	; 255
    2aa8:	31 f0       	breq	.+12     	; 0x2ab6 <main+0x430>
			{
				DCMOTOR_voidStopDCMotor(DIO_u8PORTB, DIO_u8PIN6, DIO_u8PIN7);
    2aaa:	81 e0       	ldi	r24, 0x01	; 1
    2aac:	66 e0       	ldi	r22, 0x06	; 6
    2aae:	47 e0       	ldi	r20, 0x07	; 7
    2ab0:	0e 94 ca 09 	call	0x1394	; 0x1394 <DCMOTOR_voidStopDCMotor>
    2ab4:	d5 ce       	rjmp	.-598    	; 0x2860 <main+0x1da>
    2ab6:	7a c0       	rjmp	.+244    	; 0x2bac <main+0x526>
				goto MAIN_MENU;
			}
		}
		else
		{
			CLCD_voidSendCommand(0x01);
    2ab8:	81 e0       	ldi	r24, 0x01	; 1
    2aba:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <CLCD_voidSendCommand>
			CLCD_voidSendString("Wrong option!");
    2abe:	83 ec       	ldi	r24, 0xC3	; 195
    2ac0:	90 e0       	ldi	r25, 0x00	; 0
    2ac2:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <CLCD_voidSendString>
    2ac6:	80 e0       	ldi	r24, 0x00	; 0
    2ac8:	90 e0       	ldi	r25, 0x00	; 0
    2aca:	a8 e4       	ldi	r26, 0x48	; 72
    2acc:	b3 e4       	ldi	r27, 0x43	; 67
    2ace:	8d ab       	std	Y+53, r24	; 0x35
    2ad0:	9e ab       	std	Y+54, r25	; 0x36
    2ad2:	af ab       	std	Y+55, r26	; 0x37
    2ad4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ad6:	6d a9       	ldd	r22, Y+53	; 0x35
    2ad8:	7e a9       	ldd	r23, Y+54	; 0x36
    2ada:	8f a9       	ldd	r24, Y+55	; 0x37
    2adc:	98 ad       	ldd	r25, Y+56	; 0x38
    2ade:	20 e0       	ldi	r18, 0x00	; 0
    2ae0:	30 e0       	ldi	r19, 0x00	; 0
    2ae2:	4a ef       	ldi	r20, 0xFA	; 250
    2ae4:	54 e4       	ldi	r21, 0x44	; 68
    2ae6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aea:	dc 01       	movw	r26, r24
    2aec:	cb 01       	movw	r24, r22
    2aee:	89 ab       	std	Y+49, r24	; 0x31
    2af0:	9a ab       	std	Y+50, r25	; 0x32
    2af2:	ab ab       	std	Y+51, r26	; 0x33
    2af4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2af6:	69 a9       	ldd	r22, Y+49	; 0x31
    2af8:	7a a9       	ldd	r23, Y+50	; 0x32
    2afa:	8b a9       	ldd	r24, Y+51	; 0x33
    2afc:	9c a9       	ldd	r25, Y+52	; 0x34
    2afe:	20 e0       	ldi	r18, 0x00	; 0
    2b00:	30 e0       	ldi	r19, 0x00	; 0
    2b02:	40 e8       	ldi	r20, 0x80	; 128
    2b04:	5f e3       	ldi	r21, 0x3F	; 63
    2b06:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b0a:	88 23       	and	r24, r24
    2b0c:	2c f4       	brge	.+10     	; 0x2b18 <main+0x492>
		__ticks = 1;
    2b0e:	81 e0       	ldi	r24, 0x01	; 1
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	98 ab       	std	Y+48, r25	; 0x30
    2b14:	8f a7       	std	Y+47, r24	; 0x2f
    2b16:	3f c0       	rjmp	.+126    	; 0x2b96 <main+0x510>
	else if (__tmp > 65535)
    2b18:	69 a9       	ldd	r22, Y+49	; 0x31
    2b1a:	7a a9       	ldd	r23, Y+50	; 0x32
    2b1c:	8b a9       	ldd	r24, Y+51	; 0x33
    2b1e:	9c a9       	ldd	r25, Y+52	; 0x34
    2b20:	20 e0       	ldi	r18, 0x00	; 0
    2b22:	3f ef       	ldi	r19, 0xFF	; 255
    2b24:	4f e7       	ldi	r20, 0x7F	; 127
    2b26:	57 e4       	ldi	r21, 0x47	; 71
    2b28:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b2c:	18 16       	cp	r1, r24
    2b2e:	4c f5       	brge	.+82     	; 0x2b82 <main+0x4fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b30:	6d a9       	ldd	r22, Y+53	; 0x35
    2b32:	7e a9       	ldd	r23, Y+54	; 0x36
    2b34:	8f a9       	ldd	r24, Y+55	; 0x37
    2b36:	98 ad       	ldd	r25, Y+56	; 0x38
    2b38:	20 e0       	ldi	r18, 0x00	; 0
    2b3a:	30 e0       	ldi	r19, 0x00	; 0
    2b3c:	40 e2       	ldi	r20, 0x20	; 32
    2b3e:	51 e4       	ldi	r21, 0x41	; 65
    2b40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b44:	dc 01       	movw	r26, r24
    2b46:	cb 01       	movw	r24, r22
    2b48:	bc 01       	movw	r22, r24
    2b4a:	cd 01       	movw	r24, r26
    2b4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b50:	dc 01       	movw	r26, r24
    2b52:	cb 01       	movw	r24, r22
    2b54:	98 ab       	std	Y+48, r25	; 0x30
    2b56:	8f a7       	std	Y+47, r24	; 0x2f
    2b58:	0f c0       	rjmp	.+30     	; 0x2b78 <main+0x4f2>
    2b5a:	88 ec       	ldi	r24, 0xC8	; 200
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
    2b5e:	9e a7       	std	Y+46, r25	; 0x2e
    2b60:	8d a7       	std	Y+45, r24	; 0x2d
    2b62:	8d a5       	ldd	r24, Y+45	; 0x2d
    2b64:	9e a5       	ldd	r25, Y+46	; 0x2e
    2b66:	01 97       	sbiw	r24, 0x01	; 1
    2b68:	f1 f7       	brne	.-4      	; 0x2b66 <main+0x4e0>
    2b6a:	9e a7       	std	Y+46, r25	; 0x2e
    2b6c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b6e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b70:	98 a9       	ldd	r25, Y+48	; 0x30
    2b72:	01 97       	sbiw	r24, 0x01	; 1
    2b74:	98 ab       	std	Y+48, r25	; 0x30
    2b76:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b78:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b7a:	98 a9       	ldd	r25, Y+48	; 0x30
    2b7c:	00 97       	sbiw	r24, 0x00	; 0
    2b7e:	69 f7       	brne	.-38     	; 0x2b5a <main+0x4d4>
    2b80:	6f ce       	rjmp	.-802    	; 0x2860 <main+0x1da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b82:	69 a9       	ldd	r22, Y+49	; 0x31
    2b84:	7a a9       	ldd	r23, Y+50	; 0x32
    2b86:	8b a9       	ldd	r24, Y+51	; 0x33
    2b88:	9c a9       	ldd	r25, Y+52	; 0x34
    2b8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b8e:	dc 01       	movw	r26, r24
    2b90:	cb 01       	movw	r24, r22
    2b92:	98 ab       	std	Y+48, r25	; 0x30
    2b94:	8f a7       	std	Y+47, r24	; 0x2f
    2b96:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b98:	98 a9       	ldd	r25, Y+48	; 0x30
    2b9a:	9c a7       	std	Y+44, r25	; 0x2c
    2b9c:	8b a7       	std	Y+43, r24	; 0x2b
    2b9e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ba0:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ba2:	01 97       	sbiw	r24, 0x01	; 1
    2ba4:	f1 f7       	brne	.-4      	; 0x2ba2 <main+0x51c>
    2ba6:	9c a7       	std	Y+44, r25	; 0x2c
    2ba8:	8b a7       	std	Y+43, r24	; 0x2b
    2baa:	5a ce       	rjmp	.-844    	; 0x2860 <main+0x1da>
    2bac:	7f c2       	rjmp	.+1278   	; 0x30ac <main+0xa26>
			_delay_ms(200);
			goto MAIN_MENU;
		}

	}
	else if(Local_u8Option == 2)
    2bae:	fe 01       	movw	r30, r28
    2bb0:	eb 5a       	subi	r30, 0xAB	; 171
    2bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb4:	80 81       	ld	r24, Z
    2bb6:	82 30       	cpi	r24, 0x02	; 2
    2bb8:	09 f0       	breq	.+2      	; 0x2bbc <main+0x536>
    2bba:	78 c2       	rjmp	.+1264   	; 0x30ac <main+0xa26>
	{
		CLCD_voidSendString("Rotate CW:1");
    2bbc:	84 e9       	ldi	r24, 0x94	; 148
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <CLCD_voidSendString>
		CLCD_voidGoToXY(1,0);
    2bc4:	81 e0       	ldi	r24, 0x01	; 1
    2bc6:	60 e0       	ldi	r22, 0x00	; 0
    2bc8:	0e 94 c6 08 	call	0x118c	; 0x118c <CLCD_voidGoToXY>
		CLCD_voidSendString("Rotate CCW:2");
    2bcc:	80 ea       	ldi	r24, 0xA0	; 160
    2bce:	90 e0       	ldi	r25, 0x00	; 0
    2bd0:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <CLCD_voidSendString>

		/*select between CW and CCW*/
		do{
			Local_u8Option = KPD_u8GetPressedKey();
    2bd4:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <KPD_u8GetPressedKey>
    2bd8:	fe 01       	movw	r30, r28
    2bda:	eb 5a       	subi	r30, 0xAB	; 171
    2bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bde:	80 83       	st	Z, r24
		}while(Local_u8Option == 0xff);
    2be0:	fe 01       	movw	r30, r28
    2be2:	eb 5a       	subi	r30, 0xAB	; 171
    2be4:	ff 4f       	sbci	r31, 0xFF	; 255
    2be6:	80 81       	ld	r24, Z
    2be8:	8f 3f       	cpi	r24, 0xFF	; 255
    2bea:	a1 f3       	breq	.-24     	; 0x2bd4 <main+0x54e>

		/*display option number on the LCD*/
		CLCD_voidSendCommand(0x01);
    2bec:	81 e0       	ldi	r24, 0x01	; 1
    2bee:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <CLCD_voidSendCommand>
		CLCD_voidSendData(Local_u8Option + '0');
    2bf2:	fe 01       	movw	r30, r28
    2bf4:	eb 5a       	subi	r30, 0xAB	; 171
    2bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf8:	80 81       	ld	r24, Z
    2bfa:	80 5d       	subi	r24, 0xD0	; 208
    2bfc:	0e 94 9a 07 	call	0xf34	; 0xf34 <CLCD_voidSendData>
		if(Local_u8Option == 1)
    2c00:	fe 01       	movw	r30, r28
    2c02:	eb 5a       	subi	r30, 0xAB	; 171
    2c04:	ff 4f       	sbci	r31, 0xFF	; 255
    2c06:	80 81       	ld	r24, Z
    2c08:	81 30       	cpi	r24, 0x01	; 1
    2c0a:	09 f0       	breq	.+2      	; 0x2c0e <main+0x588>
    2c0c:	e7 c0       	rjmp	.+462    	; 0x2ddc <main+0x756>
		{
			CLCD_voidSendCommand(0x01);
    2c0e:	81 e0       	ldi	r24, 0x01	; 1
    2c10:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <CLCD_voidSendCommand>

			/*enter the angle of rotation*/
			CLCD_voidSendString("Enter angle:");
    2c14:	81 ed       	ldi	r24, 0xD1	; 209
    2c16:	90 e0       	ldi	r25, 0x00	; 0
    2c18:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <CLCD_voidSendString>
			CLCD_voidGoToXY(1,0);
    2c1c:	81 e0       	ldi	r24, 0x01	; 1
    2c1e:	60 e0       	ldi	r22, 0x00	; 0
    2c20:	0e 94 c6 08 	call	0x118c	; 0x118c <CLCD_voidGoToXY>
			while(1)
			{
				do{
					Local_u8Option = KPD_u8GetPressedKey();
    2c24:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <KPD_u8GetPressedKey>
    2c28:	fe 01       	movw	r30, r28
    2c2a:	eb 5a       	subi	r30, 0xAB	; 171
    2c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c2e:	80 83       	st	Z, r24
				}while(Local_u8Option == 0xff);
    2c30:	fe 01       	movw	r30, r28
    2c32:	eb 5a       	subi	r30, 0xAB	; 171
    2c34:	ff 4f       	sbci	r31, 0xFF	; 255
    2c36:	80 81       	ld	r24, Z
    2c38:	8f 3f       	cpi	r24, 0xFF	; 255
    2c3a:	a1 f3       	breq	.-24     	; 0x2c24 <main+0x59e>
				if(Local_u8Option != 42)
    2c3c:	fe 01       	movw	r30, r28
    2c3e:	eb 5a       	subi	r30, 0xAB	; 171
    2c40:	ff 4f       	sbci	r31, 0xFF	; 255
    2c42:	80 81       	ld	r24, Z
    2c44:	8a 32       	cpi	r24, 0x2A	; 42
    2c46:	c1 f1       	breq	.+112    	; 0x2cb8 <main+0x632>
				{
					CLCD_voidSendData(Local_u8Option + '0');
    2c48:	fe 01       	movw	r30, r28
    2c4a:	eb 5a       	subi	r30, 0xAB	; 171
    2c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4e:	80 81       	ld	r24, Z
    2c50:	80 5d       	subi	r24, 0xD0	; 208
    2c52:	0e 94 9a 07 	call	0xf34	; 0xf34 <CLCD_voidSendData>
					stp1.DEGREE = (stp1.DEGREE* 10.0) + Local_u8Option;
    2c56:	fe 01       	movw	r30, r28
    2c58:	ea 5a       	subi	r30, 0xAA	; 170
    2c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c5c:	85 81       	ldd	r24, Z+5	; 0x05
    2c5e:	96 81       	ldd	r25, Z+6	; 0x06
    2c60:	a7 81       	ldd	r26, Z+7	; 0x07
    2c62:	b0 85       	ldd	r27, Z+8	; 0x08
    2c64:	bc 01       	movw	r22, r24
    2c66:	cd 01       	movw	r24, r26
    2c68:	20 e0       	ldi	r18, 0x00	; 0
    2c6a:	30 e0       	ldi	r19, 0x00	; 0
    2c6c:	40 e2       	ldi	r20, 0x20	; 32
    2c6e:	51 e4       	ldi	r21, 0x41	; 65
    2c70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c74:	dc 01       	movw	r26, r24
    2c76:	cb 01       	movw	r24, r22
    2c78:	7c 01       	movw	r14, r24
    2c7a:	8d 01       	movw	r16, r26
    2c7c:	fe 01       	movw	r30, r28
    2c7e:	eb 5a       	subi	r30, 0xAB	; 171
    2c80:	ff 4f       	sbci	r31, 0xFF	; 255
    2c82:	80 81       	ld	r24, Z
    2c84:	88 2f       	mov	r24, r24
    2c86:	90 e0       	ldi	r25, 0x00	; 0
    2c88:	aa 27       	eor	r26, r26
    2c8a:	97 fd       	sbrc	r25, 7
    2c8c:	a0 95       	com	r26
    2c8e:	ba 2f       	mov	r27, r26
    2c90:	bc 01       	movw	r22, r24
    2c92:	cd 01       	movw	r24, r26
    2c94:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    2c98:	9b 01       	movw	r18, r22
    2c9a:	ac 01       	movw	r20, r24
    2c9c:	c8 01       	movw	r24, r16
    2c9e:	b7 01       	movw	r22, r14
    2ca0:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2ca4:	dc 01       	movw	r26, r24
    2ca6:	cb 01       	movw	r24, r22
    2ca8:	fe 01       	movw	r30, r28
    2caa:	ea 5a       	subi	r30, 0xAA	; 170
    2cac:	ff 4f       	sbci	r31, 0xFF	; 255
    2cae:	85 83       	std	Z+5, r24	; 0x05
    2cb0:	96 83       	std	Z+6, r25	; 0x06
    2cb2:	a7 83       	std	Z+7, r26	; 0x07
    2cb4:	b0 87       	std	Z+8, r27	; 0x08
    2cb6:	b6 cf       	rjmp	.-148    	; 0x2c24 <main+0x59e>
				{
					break;
				}
			}

			if(Local_u8Option != 0xff)
    2cb8:	fe 01       	movw	r30, r28
    2cba:	eb 5a       	subi	r30, 0xAB	; 171
    2cbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cbe:	80 81       	ld	r24, Z
    2cc0:	8f 3f       	cpi	r24, 0xFF	; 255
    2cc2:	09 f4       	brne	.+2      	; 0x2cc6 <main+0x640>
    2cc4:	8a c0       	rjmp	.+276    	; 0x2dda <main+0x754>
			{
				STEPPER_voidRotateClockWise(&stp1);
    2cc6:	ce 01       	movw	r24, r28
    2cc8:	8a 5a       	subi	r24, 0xAA	; 170
    2cca:	9f 4f       	sbci	r25, 0xFF	; 255
    2ccc:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <STEPPER_voidRotateClockWise>
				CLCD_voidSendCommand(0x01);
    2cd0:	81 e0       	ldi	r24, 0x01	; 1
    2cd2:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <CLCD_voidSendCommand>
				CLCD_voidSendString("Angle Reached");
    2cd6:	8e ed       	ldi	r24, 0xDE	; 222
    2cd8:	90 e0       	ldi	r25, 0x00	; 0
    2cda:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <CLCD_voidSendString>
    2cde:	80 e0       	ldi	r24, 0x00	; 0
    2ce0:	90 e0       	ldi	r25, 0x00	; 0
    2ce2:	aa ef       	ldi	r26, 0xFA	; 250
    2ce4:	b3 e4       	ldi	r27, 0x43	; 67
    2ce6:	8f a3       	std	Y+39, r24	; 0x27
    2ce8:	98 a7       	std	Y+40, r25	; 0x28
    2cea:	a9 a7       	std	Y+41, r26	; 0x29
    2cec:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cee:	6f a1       	ldd	r22, Y+39	; 0x27
    2cf0:	78 a5       	ldd	r23, Y+40	; 0x28
    2cf2:	89 a5       	ldd	r24, Y+41	; 0x29
    2cf4:	9a a5       	ldd	r25, Y+42	; 0x2a
    2cf6:	20 e0       	ldi	r18, 0x00	; 0
    2cf8:	30 e0       	ldi	r19, 0x00	; 0
    2cfa:	4a ef       	ldi	r20, 0xFA	; 250
    2cfc:	54 e4       	ldi	r21, 0x44	; 68
    2cfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d02:	dc 01       	movw	r26, r24
    2d04:	cb 01       	movw	r24, r22
    2d06:	8b a3       	std	Y+35, r24	; 0x23
    2d08:	9c a3       	std	Y+36, r25	; 0x24
    2d0a:	ad a3       	std	Y+37, r26	; 0x25
    2d0c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2d0e:	6b a1       	ldd	r22, Y+35	; 0x23
    2d10:	7c a1       	ldd	r23, Y+36	; 0x24
    2d12:	8d a1       	ldd	r24, Y+37	; 0x25
    2d14:	9e a1       	ldd	r25, Y+38	; 0x26
    2d16:	20 e0       	ldi	r18, 0x00	; 0
    2d18:	30 e0       	ldi	r19, 0x00	; 0
    2d1a:	40 e8       	ldi	r20, 0x80	; 128
    2d1c:	5f e3       	ldi	r21, 0x3F	; 63
    2d1e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d22:	88 23       	and	r24, r24
    2d24:	2c f4       	brge	.+10     	; 0x2d30 <main+0x6aa>
		__ticks = 1;
    2d26:	81 e0       	ldi	r24, 0x01	; 1
    2d28:	90 e0       	ldi	r25, 0x00	; 0
    2d2a:	9a a3       	std	Y+34, r25	; 0x22
    2d2c:	89 a3       	std	Y+33, r24	; 0x21
    2d2e:	3f c0       	rjmp	.+126    	; 0x2dae <main+0x728>
	else if (__tmp > 65535)
    2d30:	6b a1       	ldd	r22, Y+35	; 0x23
    2d32:	7c a1       	ldd	r23, Y+36	; 0x24
    2d34:	8d a1       	ldd	r24, Y+37	; 0x25
    2d36:	9e a1       	ldd	r25, Y+38	; 0x26
    2d38:	20 e0       	ldi	r18, 0x00	; 0
    2d3a:	3f ef       	ldi	r19, 0xFF	; 255
    2d3c:	4f e7       	ldi	r20, 0x7F	; 127
    2d3e:	57 e4       	ldi	r21, 0x47	; 71
    2d40:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d44:	18 16       	cp	r1, r24
    2d46:	4c f5       	brge	.+82     	; 0x2d9a <main+0x714>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d48:	6f a1       	ldd	r22, Y+39	; 0x27
    2d4a:	78 a5       	ldd	r23, Y+40	; 0x28
    2d4c:	89 a5       	ldd	r24, Y+41	; 0x29
    2d4e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d50:	20 e0       	ldi	r18, 0x00	; 0
    2d52:	30 e0       	ldi	r19, 0x00	; 0
    2d54:	40 e2       	ldi	r20, 0x20	; 32
    2d56:	51 e4       	ldi	r21, 0x41	; 65
    2d58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d5c:	dc 01       	movw	r26, r24
    2d5e:	cb 01       	movw	r24, r22
    2d60:	bc 01       	movw	r22, r24
    2d62:	cd 01       	movw	r24, r26
    2d64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d68:	dc 01       	movw	r26, r24
    2d6a:	cb 01       	movw	r24, r22
    2d6c:	9a a3       	std	Y+34, r25	; 0x22
    2d6e:	89 a3       	std	Y+33, r24	; 0x21
    2d70:	0f c0       	rjmp	.+30     	; 0x2d90 <main+0x70a>
    2d72:	88 ec       	ldi	r24, 0xC8	; 200
    2d74:	90 e0       	ldi	r25, 0x00	; 0
    2d76:	98 a3       	std	Y+32, r25	; 0x20
    2d78:	8f 8f       	std	Y+31, r24	; 0x1f
    2d7a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d7c:	98 a1       	ldd	r25, Y+32	; 0x20
    2d7e:	01 97       	sbiw	r24, 0x01	; 1
    2d80:	f1 f7       	brne	.-4      	; 0x2d7e <main+0x6f8>
    2d82:	98 a3       	std	Y+32, r25	; 0x20
    2d84:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d86:	89 a1       	ldd	r24, Y+33	; 0x21
    2d88:	9a a1       	ldd	r25, Y+34	; 0x22
    2d8a:	01 97       	sbiw	r24, 0x01	; 1
    2d8c:	9a a3       	std	Y+34, r25	; 0x22
    2d8e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d90:	89 a1       	ldd	r24, Y+33	; 0x21
    2d92:	9a a1       	ldd	r25, Y+34	; 0x22
    2d94:	00 97       	sbiw	r24, 0x00	; 0
    2d96:	69 f7       	brne	.-38     	; 0x2d72 <main+0x6ec>
    2d98:	14 c0       	rjmp	.+40     	; 0x2dc2 <main+0x73c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d9a:	6b a1       	ldd	r22, Y+35	; 0x23
    2d9c:	7c a1       	ldd	r23, Y+36	; 0x24
    2d9e:	8d a1       	ldd	r24, Y+37	; 0x25
    2da0:	9e a1       	ldd	r25, Y+38	; 0x26
    2da2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2da6:	dc 01       	movw	r26, r24
    2da8:	cb 01       	movw	r24, r22
    2daa:	9a a3       	std	Y+34, r25	; 0x22
    2dac:	89 a3       	std	Y+33, r24	; 0x21
    2dae:	89 a1       	ldd	r24, Y+33	; 0x21
    2db0:	9a a1       	ldd	r25, Y+34	; 0x22
    2db2:	9e 8f       	std	Y+30, r25	; 0x1e
    2db4:	8d 8f       	std	Y+29, r24	; 0x1d
    2db6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2db8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2dba:	01 97       	sbiw	r24, 0x01	; 1
    2dbc:	f1 f7       	brne	.-4      	; 0x2dba <main+0x734>
    2dbe:	9e 8f       	std	Y+30, r25	; 0x1e
    2dc0:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(500);
				stp1.DEGREE = 0.0;
    2dc2:	fe 01       	movw	r30, r28
    2dc4:	ea 5a       	subi	r30, 0xAA	; 170
    2dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc8:	80 e0       	ldi	r24, 0x00	; 0
    2dca:	90 e0       	ldi	r25, 0x00	; 0
    2dcc:	a0 e0       	ldi	r26, 0x00	; 0
    2dce:	b0 e0       	ldi	r27, 0x00	; 0
    2dd0:	85 83       	std	Z+5, r24	; 0x05
    2dd2:	96 83       	std	Z+6, r25	; 0x06
    2dd4:	a7 83       	std	Z+7, r26	; 0x07
    2dd6:	b0 87       	std	Z+8, r27	; 0x08
    2dd8:	43 cd       	rjmp	.-1402   	; 0x2860 <main+0x1da>
    2dda:	68 c1       	rjmp	.+720    	; 0x30ac <main+0xa26>
				goto MAIN_MENU;
			}
		}
		else if(Local_u8Option == 2)
    2ddc:	fe 01       	movw	r30, r28
    2dde:	eb 5a       	subi	r30, 0xAB	; 171
    2de0:	ff 4f       	sbci	r31, 0xFF	; 255
    2de2:	80 81       	ld	r24, Z
    2de4:	82 30       	cpi	r24, 0x02	; 2
    2de6:	09 f0       	breq	.+2      	; 0x2dea <main+0x764>
    2de8:	e7 c0       	rjmp	.+462    	; 0x2fb8 <main+0x932>
		{
			CLCD_voidSendCommand(0x01);
    2dea:	81 e0       	ldi	r24, 0x01	; 1
    2dec:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <CLCD_voidSendCommand>

			/*enter the angle of rotation*/
			CLCD_voidSendString("Enter angle:");
    2df0:	81 ed       	ldi	r24, 0xD1	; 209
    2df2:	90 e0       	ldi	r25, 0x00	; 0
    2df4:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <CLCD_voidSendString>
			CLCD_voidGoToXY(1,0);
    2df8:	81 e0       	ldi	r24, 0x01	; 1
    2dfa:	60 e0       	ldi	r22, 0x00	; 0
    2dfc:	0e 94 c6 08 	call	0x118c	; 0x118c <CLCD_voidGoToXY>
			while(1)
			{
				do{
					Local_u8Option = KPD_u8GetPressedKey();
    2e00:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <KPD_u8GetPressedKey>
    2e04:	fe 01       	movw	r30, r28
    2e06:	eb 5a       	subi	r30, 0xAB	; 171
    2e08:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0a:	80 83       	st	Z, r24
				}while(Local_u8Option == 0xff);
    2e0c:	fe 01       	movw	r30, r28
    2e0e:	eb 5a       	subi	r30, 0xAB	; 171
    2e10:	ff 4f       	sbci	r31, 0xFF	; 255
    2e12:	80 81       	ld	r24, Z
    2e14:	8f 3f       	cpi	r24, 0xFF	; 255
    2e16:	a1 f3       	breq	.-24     	; 0x2e00 <main+0x77a>
				if(Local_u8Option != 42)
    2e18:	fe 01       	movw	r30, r28
    2e1a:	eb 5a       	subi	r30, 0xAB	; 171
    2e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1e:	80 81       	ld	r24, Z
    2e20:	8a 32       	cpi	r24, 0x2A	; 42
    2e22:	c1 f1       	breq	.+112    	; 0x2e94 <main+0x80e>
				{
					CLCD_voidSendData(Local_u8Option + '0');
    2e24:	fe 01       	movw	r30, r28
    2e26:	eb 5a       	subi	r30, 0xAB	; 171
    2e28:	ff 4f       	sbci	r31, 0xFF	; 255
    2e2a:	80 81       	ld	r24, Z
    2e2c:	80 5d       	subi	r24, 0xD0	; 208
    2e2e:	0e 94 9a 07 	call	0xf34	; 0xf34 <CLCD_voidSendData>
					stp1.DEGREE = (stp1.DEGREE* 10.0) + Local_u8Option;
    2e32:	fe 01       	movw	r30, r28
    2e34:	ea 5a       	subi	r30, 0xAA	; 170
    2e36:	ff 4f       	sbci	r31, 0xFF	; 255
    2e38:	85 81       	ldd	r24, Z+5	; 0x05
    2e3a:	96 81       	ldd	r25, Z+6	; 0x06
    2e3c:	a7 81       	ldd	r26, Z+7	; 0x07
    2e3e:	b0 85       	ldd	r27, Z+8	; 0x08
    2e40:	bc 01       	movw	r22, r24
    2e42:	cd 01       	movw	r24, r26
    2e44:	20 e0       	ldi	r18, 0x00	; 0
    2e46:	30 e0       	ldi	r19, 0x00	; 0
    2e48:	40 e2       	ldi	r20, 0x20	; 32
    2e4a:	51 e4       	ldi	r21, 0x41	; 65
    2e4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e50:	dc 01       	movw	r26, r24
    2e52:	cb 01       	movw	r24, r22
    2e54:	7c 01       	movw	r14, r24
    2e56:	8d 01       	movw	r16, r26
    2e58:	fe 01       	movw	r30, r28
    2e5a:	eb 5a       	subi	r30, 0xAB	; 171
    2e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e5e:	80 81       	ld	r24, Z
    2e60:	88 2f       	mov	r24, r24
    2e62:	90 e0       	ldi	r25, 0x00	; 0
    2e64:	aa 27       	eor	r26, r26
    2e66:	97 fd       	sbrc	r25, 7
    2e68:	a0 95       	com	r26
    2e6a:	ba 2f       	mov	r27, r26
    2e6c:	bc 01       	movw	r22, r24
    2e6e:	cd 01       	movw	r24, r26
    2e70:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    2e74:	9b 01       	movw	r18, r22
    2e76:	ac 01       	movw	r20, r24
    2e78:	c8 01       	movw	r24, r16
    2e7a:	b7 01       	movw	r22, r14
    2e7c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2e80:	dc 01       	movw	r26, r24
    2e82:	cb 01       	movw	r24, r22
    2e84:	fe 01       	movw	r30, r28
    2e86:	ea 5a       	subi	r30, 0xAA	; 170
    2e88:	ff 4f       	sbci	r31, 0xFF	; 255
    2e8a:	85 83       	std	Z+5, r24	; 0x05
    2e8c:	96 83       	std	Z+6, r25	; 0x06
    2e8e:	a7 83       	std	Z+7, r26	; 0x07
    2e90:	b0 87       	std	Z+8, r27	; 0x08
    2e92:	b6 cf       	rjmp	.-148    	; 0x2e00 <main+0x77a>
				{
					break;
				}
			}

			if(Local_u8Option != 0xff)
    2e94:	fe 01       	movw	r30, r28
    2e96:	eb 5a       	subi	r30, 0xAB	; 171
    2e98:	ff 4f       	sbci	r31, 0xFF	; 255
    2e9a:	80 81       	ld	r24, Z
    2e9c:	8f 3f       	cpi	r24, 0xFF	; 255
    2e9e:	09 f4       	brne	.+2      	; 0x2ea2 <main+0x81c>
    2ea0:	8a c0       	rjmp	.+276    	; 0x2fb6 <main+0x930>
			{
				STEPPER_voidRotateCounterClockWise(&stp1);
    2ea2:	ce 01       	movw	r24, r28
    2ea4:	8a 5a       	subi	r24, 0xAA	; 170
    2ea6:	9f 4f       	sbci	r25, 0xFF	; 255
    2ea8:	0e 94 2e 10 	call	0x205c	; 0x205c <STEPPER_voidRotateCounterClockWise>
				CLCD_voidSendCommand(0x01);
    2eac:	81 e0       	ldi	r24, 0x01	; 1
    2eae:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <CLCD_voidSendCommand>
				CLCD_voidSendString("Angle Reached");
    2eb2:	8e ed       	ldi	r24, 0xDE	; 222
    2eb4:	90 e0       	ldi	r25, 0x00	; 0
    2eb6:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <CLCD_voidSendString>
    2eba:	80 e0       	ldi	r24, 0x00	; 0
    2ebc:	90 e0       	ldi	r25, 0x00	; 0
    2ebe:	aa ef       	ldi	r26, 0xFA	; 250
    2ec0:	b3 e4       	ldi	r27, 0x43	; 67
    2ec2:	89 8f       	std	Y+25, r24	; 0x19
    2ec4:	9a 8f       	std	Y+26, r25	; 0x1a
    2ec6:	ab 8f       	std	Y+27, r26	; 0x1b
    2ec8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2eca:	69 8d       	ldd	r22, Y+25	; 0x19
    2ecc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ece:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ed0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ed2:	20 e0       	ldi	r18, 0x00	; 0
    2ed4:	30 e0       	ldi	r19, 0x00	; 0
    2ed6:	4a ef       	ldi	r20, 0xFA	; 250
    2ed8:	54 e4       	ldi	r21, 0x44	; 68
    2eda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ede:	dc 01       	movw	r26, r24
    2ee0:	cb 01       	movw	r24, r22
    2ee2:	8d 8b       	std	Y+21, r24	; 0x15
    2ee4:	9e 8b       	std	Y+22, r25	; 0x16
    2ee6:	af 8b       	std	Y+23, r26	; 0x17
    2ee8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2eea:	6d 89       	ldd	r22, Y+21	; 0x15
    2eec:	7e 89       	ldd	r23, Y+22	; 0x16
    2eee:	8f 89       	ldd	r24, Y+23	; 0x17
    2ef0:	98 8d       	ldd	r25, Y+24	; 0x18
    2ef2:	20 e0       	ldi	r18, 0x00	; 0
    2ef4:	30 e0       	ldi	r19, 0x00	; 0
    2ef6:	40 e8       	ldi	r20, 0x80	; 128
    2ef8:	5f e3       	ldi	r21, 0x3F	; 63
    2efa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2efe:	88 23       	and	r24, r24
    2f00:	2c f4       	brge	.+10     	; 0x2f0c <main+0x886>
		__ticks = 1;
    2f02:	81 e0       	ldi	r24, 0x01	; 1
    2f04:	90 e0       	ldi	r25, 0x00	; 0
    2f06:	9c 8b       	std	Y+20, r25	; 0x14
    2f08:	8b 8b       	std	Y+19, r24	; 0x13
    2f0a:	3f c0       	rjmp	.+126    	; 0x2f8a <main+0x904>
	else if (__tmp > 65535)
    2f0c:	6d 89       	ldd	r22, Y+21	; 0x15
    2f0e:	7e 89       	ldd	r23, Y+22	; 0x16
    2f10:	8f 89       	ldd	r24, Y+23	; 0x17
    2f12:	98 8d       	ldd	r25, Y+24	; 0x18
    2f14:	20 e0       	ldi	r18, 0x00	; 0
    2f16:	3f ef       	ldi	r19, 0xFF	; 255
    2f18:	4f e7       	ldi	r20, 0x7F	; 127
    2f1a:	57 e4       	ldi	r21, 0x47	; 71
    2f1c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f20:	18 16       	cp	r1, r24
    2f22:	4c f5       	brge	.+82     	; 0x2f76 <main+0x8f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f24:	69 8d       	ldd	r22, Y+25	; 0x19
    2f26:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f28:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f2a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f2c:	20 e0       	ldi	r18, 0x00	; 0
    2f2e:	30 e0       	ldi	r19, 0x00	; 0
    2f30:	40 e2       	ldi	r20, 0x20	; 32
    2f32:	51 e4       	ldi	r21, 0x41	; 65
    2f34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f38:	dc 01       	movw	r26, r24
    2f3a:	cb 01       	movw	r24, r22
    2f3c:	bc 01       	movw	r22, r24
    2f3e:	cd 01       	movw	r24, r26
    2f40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f44:	dc 01       	movw	r26, r24
    2f46:	cb 01       	movw	r24, r22
    2f48:	9c 8b       	std	Y+20, r25	; 0x14
    2f4a:	8b 8b       	std	Y+19, r24	; 0x13
    2f4c:	0f c0       	rjmp	.+30     	; 0x2f6c <main+0x8e6>
    2f4e:	88 ec       	ldi	r24, 0xC8	; 200
    2f50:	90 e0       	ldi	r25, 0x00	; 0
    2f52:	9a 8b       	std	Y+18, r25	; 0x12
    2f54:	89 8b       	std	Y+17, r24	; 0x11
    2f56:	89 89       	ldd	r24, Y+17	; 0x11
    2f58:	9a 89       	ldd	r25, Y+18	; 0x12
    2f5a:	01 97       	sbiw	r24, 0x01	; 1
    2f5c:	f1 f7       	brne	.-4      	; 0x2f5a <main+0x8d4>
    2f5e:	9a 8b       	std	Y+18, r25	; 0x12
    2f60:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f62:	8b 89       	ldd	r24, Y+19	; 0x13
    2f64:	9c 89       	ldd	r25, Y+20	; 0x14
    2f66:	01 97       	sbiw	r24, 0x01	; 1
    2f68:	9c 8b       	std	Y+20, r25	; 0x14
    2f6a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f6c:	8b 89       	ldd	r24, Y+19	; 0x13
    2f6e:	9c 89       	ldd	r25, Y+20	; 0x14
    2f70:	00 97       	sbiw	r24, 0x00	; 0
    2f72:	69 f7       	brne	.-38     	; 0x2f4e <main+0x8c8>
    2f74:	14 c0       	rjmp	.+40     	; 0x2f9e <main+0x918>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f76:	6d 89       	ldd	r22, Y+21	; 0x15
    2f78:	7e 89       	ldd	r23, Y+22	; 0x16
    2f7a:	8f 89       	ldd	r24, Y+23	; 0x17
    2f7c:	98 8d       	ldd	r25, Y+24	; 0x18
    2f7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f82:	dc 01       	movw	r26, r24
    2f84:	cb 01       	movw	r24, r22
    2f86:	9c 8b       	std	Y+20, r25	; 0x14
    2f88:	8b 8b       	std	Y+19, r24	; 0x13
    2f8a:	8b 89       	ldd	r24, Y+19	; 0x13
    2f8c:	9c 89       	ldd	r25, Y+20	; 0x14
    2f8e:	98 8b       	std	Y+16, r25	; 0x10
    2f90:	8f 87       	std	Y+15, r24	; 0x0f
    2f92:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f94:	98 89       	ldd	r25, Y+16	; 0x10
    2f96:	01 97       	sbiw	r24, 0x01	; 1
    2f98:	f1 f7       	brne	.-4      	; 0x2f96 <main+0x910>
    2f9a:	98 8b       	std	Y+16, r25	; 0x10
    2f9c:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(500);
				stp1.DEGREE = 0.0;
    2f9e:	fe 01       	movw	r30, r28
    2fa0:	ea 5a       	subi	r30, 0xAA	; 170
    2fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa4:	80 e0       	ldi	r24, 0x00	; 0
    2fa6:	90 e0       	ldi	r25, 0x00	; 0
    2fa8:	a0 e0       	ldi	r26, 0x00	; 0
    2faa:	b0 e0       	ldi	r27, 0x00	; 0
    2fac:	85 83       	std	Z+5, r24	; 0x05
    2fae:	96 83       	std	Z+6, r25	; 0x06
    2fb0:	a7 83       	std	Z+7, r26	; 0x07
    2fb2:	b0 87       	std	Z+8, r27	; 0x08
    2fb4:	55 cc       	rjmp	.-1878   	; 0x2860 <main+0x1da>
    2fb6:	7a c0       	rjmp	.+244    	; 0x30ac <main+0xa26>
				goto MAIN_MENU;
			}
		}
		else
		{
			CLCD_voidSendCommand(0x01);
    2fb8:	81 e0       	ldi	r24, 0x01	; 1
    2fba:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <CLCD_voidSendCommand>
			CLCD_voidSendString("Wrong option!");
    2fbe:	83 ec       	ldi	r24, 0xC3	; 195
    2fc0:	90 e0       	ldi	r25, 0x00	; 0
    2fc2:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <CLCD_voidSendString>
    2fc6:	80 e0       	ldi	r24, 0x00	; 0
    2fc8:	90 e0       	ldi	r25, 0x00	; 0
    2fca:	a8 e4       	ldi	r26, 0x48	; 72
    2fcc:	b3 e4       	ldi	r27, 0x43	; 67
    2fce:	8b 87       	std	Y+11, r24	; 0x0b
    2fd0:	9c 87       	std	Y+12, r25	; 0x0c
    2fd2:	ad 87       	std	Y+13, r26	; 0x0d
    2fd4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fd6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fd8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fda:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fdc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fde:	20 e0       	ldi	r18, 0x00	; 0
    2fe0:	30 e0       	ldi	r19, 0x00	; 0
    2fe2:	4a ef       	ldi	r20, 0xFA	; 250
    2fe4:	54 e4       	ldi	r21, 0x44	; 68
    2fe6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fea:	dc 01       	movw	r26, r24
    2fec:	cb 01       	movw	r24, r22
    2fee:	8f 83       	std	Y+7, r24	; 0x07
    2ff0:	98 87       	std	Y+8, r25	; 0x08
    2ff2:	a9 87       	std	Y+9, r26	; 0x09
    2ff4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ff6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ff8:	78 85       	ldd	r23, Y+8	; 0x08
    2ffa:	89 85       	ldd	r24, Y+9	; 0x09
    2ffc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ffe:	20 e0       	ldi	r18, 0x00	; 0
    3000:	30 e0       	ldi	r19, 0x00	; 0
    3002:	40 e8       	ldi	r20, 0x80	; 128
    3004:	5f e3       	ldi	r21, 0x3F	; 63
    3006:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    300a:	88 23       	and	r24, r24
    300c:	2c f4       	brge	.+10     	; 0x3018 <main+0x992>
		__ticks = 1;
    300e:	81 e0       	ldi	r24, 0x01	; 1
    3010:	90 e0       	ldi	r25, 0x00	; 0
    3012:	9e 83       	std	Y+6, r25	; 0x06
    3014:	8d 83       	std	Y+5, r24	; 0x05
    3016:	3f c0       	rjmp	.+126    	; 0x3096 <main+0xa10>
	else if (__tmp > 65535)
    3018:	6f 81       	ldd	r22, Y+7	; 0x07
    301a:	78 85       	ldd	r23, Y+8	; 0x08
    301c:	89 85       	ldd	r24, Y+9	; 0x09
    301e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3020:	20 e0       	ldi	r18, 0x00	; 0
    3022:	3f ef       	ldi	r19, 0xFF	; 255
    3024:	4f e7       	ldi	r20, 0x7F	; 127
    3026:	57 e4       	ldi	r21, 0x47	; 71
    3028:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    302c:	18 16       	cp	r1, r24
    302e:	4c f5       	brge	.+82     	; 0x3082 <main+0x9fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3030:	6b 85       	ldd	r22, Y+11	; 0x0b
    3032:	7c 85       	ldd	r23, Y+12	; 0x0c
    3034:	8d 85       	ldd	r24, Y+13	; 0x0d
    3036:	9e 85       	ldd	r25, Y+14	; 0x0e
    3038:	20 e0       	ldi	r18, 0x00	; 0
    303a:	30 e0       	ldi	r19, 0x00	; 0
    303c:	40 e2       	ldi	r20, 0x20	; 32
    303e:	51 e4       	ldi	r21, 0x41	; 65
    3040:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3044:	dc 01       	movw	r26, r24
    3046:	cb 01       	movw	r24, r22
    3048:	bc 01       	movw	r22, r24
    304a:	cd 01       	movw	r24, r26
    304c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3050:	dc 01       	movw	r26, r24
    3052:	cb 01       	movw	r24, r22
    3054:	9e 83       	std	Y+6, r25	; 0x06
    3056:	8d 83       	std	Y+5, r24	; 0x05
    3058:	0f c0       	rjmp	.+30     	; 0x3078 <main+0x9f2>
    305a:	88 ec       	ldi	r24, 0xC8	; 200
    305c:	90 e0       	ldi	r25, 0x00	; 0
    305e:	9c 83       	std	Y+4, r25	; 0x04
    3060:	8b 83       	std	Y+3, r24	; 0x03
    3062:	8b 81       	ldd	r24, Y+3	; 0x03
    3064:	9c 81       	ldd	r25, Y+4	; 0x04
    3066:	01 97       	sbiw	r24, 0x01	; 1
    3068:	f1 f7       	brne	.-4      	; 0x3066 <main+0x9e0>
    306a:	9c 83       	std	Y+4, r25	; 0x04
    306c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    306e:	8d 81       	ldd	r24, Y+5	; 0x05
    3070:	9e 81       	ldd	r25, Y+6	; 0x06
    3072:	01 97       	sbiw	r24, 0x01	; 1
    3074:	9e 83       	std	Y+6, r25	; 0x06
    3076:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3078:	8d 81       	ldd	r24, Y+5	; 0x05
    307a:	9e 81       	ldd	r25, Y+6	; 0x06
    307c:	00 97       	sbiw	r24, 0x00	; 0
    307e:	69 f7       	brne	.-38     	; 0x305a <main+0x9d4>
    3080:	ef cb       	rjmp	.-2082   	; 0x2860 <main+0x1da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3082:	6f 81       	ldd	r22, Y+7	; 0x07
    3084:	78 85       	ldd	r23, Y+8	; 0x08
    3086:	89 85       	ldd	r24, Y+9	; 0x09
    3088:	9a 85       	ldd	r25, Y+10	; 0x0a
    308a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    308e:	dc 01       	movw	r26, r24
    3090:	cb 01       	movw	r24, r22
    3092:	9e 83       	std	Y+6, r25	; 0x06
    3094:	8d 83       	std	Y+5, r24	; 0x05
    3096:	8d 81       	ldd	r24, Y+5	; 0x05
    3098:	9e 81       	ldd	r25, Y+6	; 0x06
    309a:	9a 83       	std	Y+2, r25	; 0x02
    309c:	89 83       	std	Y+1, r24	; 0x01
    309e:	89 81       	ldd	r24, Y+1	; 0x01
    30a0:	9a 81       	ldd	r25, Y+2	; 0x02
    30a2:	01 97       	sbiw	r24, 0x01	; 1
    30a4:	f1 f7       	brne	.-4      	; 0x30a2 <main+0xa1c>
    30a6:	9a 83       	std	Y+2, r25	; 0x02
    30a8:	89 83       	std	Y+1, r24	; 0x01
    30aa:	da cb       	rjmp	.-2124   	; 0x2860 <main+0x1da>
    30ac:	ff cf       	rjmp	.-2      	; 0x30ac <main+0xa26>

000030ae <__udivmodsi4>:
    30ae:	a1 e2       	ldi	r26, 0x21	; 33
    30b0:	1a 2e       	mov	r1, r26
    30b2:	aa 1b       	sub	r26, r26
    30b4:	bb 1b       	sub	r27, r27
    30b6:	fd 01       	movw	r30, r26
    30b8:	0d c0       	rjmp	.+26     	; 0x30d4 <__udivmodsi4_ep>

000030ba <__udivmodsi4_loop>:
    30ba:	aa 1f       	adc	r26, r26
    30bc:	bb 1f       	adc	r27, r27
    30be:	ee 1f       	adc	r30, r30
    30c0:	ff 1f       	adc	r31, r31
    30c2:	a2 17       	cp	r26, r18
    30c4:	b3 07       	cpc	r27, r19
    30c6:	e4 07       	cpc	r30, r20
    30c8:	f5 07       	cpc	r31, r21
    30ca:	20 f0       	brcs	.+8      	; 0x30d4 <__udivmodsi4_ep>
    30cc:	a2 1b       	sub	r26, r18
    30ce:	b3 0b       	sbc	r27, r19
    30d0:	e4 0b       	sbc	r30, r20
    30d2:	f5 0b       	sbc	r31, r21

000030d4 <__udivmodsi4_ep>:
    30d4:	66 1f       	adc	r22, r22
    30d6:	77 1f       	adc	r23, r23
    30d8:	88 1f       	adc	r24, r24
    30da:	99 1f       	adc	r25, r25
    30dc:	1a 94       	dec	r1
    30de:	69 f7       	brne	.-38     	; 0x30ba <__udivmodsi4_loop>
    30e0:	60 95       	com	r22
    30e2:	70 95       	com	r23
    30e4:	80 95       	com	r24
    30e6:	90 95       	com	r25
    30e8:	9b 01       	movw	r18, r22
    30ea:	ac 01       	movw	r20, r24
    30ec:	bd 01       	movw	r22, r26
    30ee:	cf 01       	movw	r24, r30
    30f0:	08 95       	ret

000030f2 <__prologue_saves__>:
    30f2:	2f 92       	push	r2
    30f4:	3f 92       	push	r3
    30f6:	4f 92       	push	r4
    30f8:	5f 92       	push	r5
    30fa:	6f 92       	push	r6
    30fc:	7f 92       	push	r7
    30fe:	8f 92       	push	r8
    3100:	9f 92       	push	r9
    3102:	af 92       	push	r10
    3104:	bf 92       	push	r11
    3106:	cf 92       	push	r12
    3108:	df 92       	push	r13
    310a:	ef 92       	push	r14
    310c:	ff 92       	push	r15
    310e:	0f 93       	push	r16
    3110:	1f 93       	push	r17
    3112:	cf 93       	push	r28
    3114:	df 93       	push	r29
    3116:	cd b7       	in	r28, 0x3d	; 61
    3118:	de b7       	in	r29, 0x3e	; 62
    311a:	ca 1b       	sub	r28, r26
    311c:	db 0b       	sbc	r29, r27
    311e:	0f b6       	in	r0, 0x3f	; 63
    3120:	f8 94       	cli
    3122:	de bf       	out	0x3e, r29	; 62
    3124:	0f be       	out	0x3f, r0	; 63
    3126:	cd bf       	out	0x3d, r28	; 61
    3128:	09 94       	ijmp

0000312a <__epilogue_restores__>:
    312a:	2a 88       	ldd	r2, Y+18	; 0x12
    312c:	39 88       	ldd	r3, Y+17	; 0x11
    312e:	48 88       	ldd	r4, Y+16	; 0x10
    3130:	5f 84       	ldd	r5, Y+15	; 0x0f
    3132:	6e 84       	ldd	r6, Y+14	; 0x0e
    3134:	7d 84       	ldd	r7, Y+13	; 0x0d
    3136:	8c 84       	ldd	r8, Y+12	; 0x0c
    3138:	9b 84       	ldd	r9, Y+11	; 0x0b
    313a:	aa 84       	ldd	r10, Y+10	; 0x0a
    313c:	b9 84       	ldd	r11, Y+9	; 0x09
    313e:	c8 84       	ldd	r12, Y+8	; 0x08
    3140:	df 80       	ldd	r13, Y+7	; 0x07
    3142:	ee 80       	ldd	r14, Y+6	; 0x06
    3144:	fd 80       	ldd	r15, Y+5	; 0x05
    3146:	0c 81       	ldd	r16, Y+4	; 0x04
    3148:	1b 81       	ldd	r17, Y+3	; 0x03
    314a:	aa 81       	ldd	r26, Y+2	; 0x02
    314c:	b9 81       	ldd	r27, Y+1	; 0x01
    314e:	ce 0f       	add	r28, r30
    3150:	d1 1d       	adc	r29, r1
    3152:	0f b6       	in	r0, 0x3f	; 63
    3154:	f8 94       	cli
    3156:	de bf       	out	0x3e, r29	; 62
    3158:	0f be       	out	0x3f, r0	; 63
    315a:	cd bf       	out	0x3d, r28	; 61
    315c:	ed 01       	movw	r28, r26
    315e:	08 95       	ret

00003160 <_exit>:
    3160:	f8 94       	cli

00003162 <__stop_program>:
    3162:	ff cf       	rjmp	.-2      	; 0x3162 <__stop_program>
